// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: term_command_result.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "term_command_result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TermCommandResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TermCommandResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_term_5fcommand_5fresult_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_term_5fcommand_5fresult_2eproto() {
  protobuf_AddDesc_term_5fcommand_5fresult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "term_command_result.proto");
  GOOGLE_CHECK(file != NULL);
  TermCommandResult_descriptor_ = file->message_type(0);
  static const int TermCommandResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermCommandResult, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermCommandResult, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermCommandResult, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermCommandResult, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermCommandResult, respcode_),
  };
  TermCommandResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TermCommandResult_descriptor_,
      TermCommandResult::default_instance_,
      TermCommandResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermCommandResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(TermCommandResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermCommandResult, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_term_5fcommand_5fresult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TermCommandResult_descriptor_, &TermCommandResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_term_5fcommand_5fresult_2eproto() {
  delete TermCommandResult::default_instance_;
  delete TermCommandResult_reflection_;
}

void protobuf_AddDesc_term_5fcommand_5fresult_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_term_5fcommand_5fresult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031term_command_result.proto\"k\n\021TermComma"
    "ndResult\022\020\n\010termType\030\001 \002(\r\022\021\n\trequestId\030"
    "\002 \002(\t\022\016\n\006status\030\003 \002(\r\022\017\n\007message\030\004 \001(\t\022\020"
    "\n\010respCode\030\005 \001(\005B0\n\022com.mx.ota.messageB\030"
    "TermCommandResultMessageH\001", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "term_command_result.proto", &protobuf_RegisterTypes);
  TermCommandResult::default_instance_ = new TermCommandResult();
  TermCommandResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_term_5fcommand_5fresult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_term_5fcommand_5fresult_2eproto {
  StaticDescriptorInitializer_term_5fcommand_5fresult_2eproto() {
    protobuf_AddDesc_term_5fcommand_5fresult_2eproto();
  }
} static_descriptor_initializer_term_5fcommand_5fresult_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TermCommandResult::kTermTypeFieldNumber;
const int TermCommandResult::kRequestIdFieldNumber;
const int TermCommandResult::kStatusFieldNumber;
const int TermCommandResult::kMessageFieldNumber;
const int TermCommandResult::kRespCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TermCommandResult::TermCommandResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TermCommandResult)
}

void TermCommandResult::InitAsDefaultInstance() {
}

TermCommandResult::TermCommandResult(const TermCommandResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TermCommandResult)
}

void TermCommandResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  termtype_ = 0u;
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  respcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TermCommandResult::~TermCommandResult() {
  // @@protoc_insertion_point(destructor:TermCommandResult)
  SharedDtor();
}

void TermCommandResult::SharedDtor() {
  requestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TermCommandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TermCommandResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TermCommandResult_descriptor_;
}

const TermCommandResult& TermCommandResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_term_5fcommand_5fresult_2eproto();
  return *default_instance_;
}

TermCommandResult* TermCommandResult::default_instance_ = NULL;

TermCommandResult* TermCommandResult::New(::google::protobuf::Arena* arena) const {
  TermCommandResult* n = new TermCommandResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TermCommandResult::Clear() {
// @@protoc_insertion_point(message_clear_start:TermCommandResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TermCommandResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TermCommandResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(termtype_, status_);
    if (has_requestid()) {
      requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    respcode_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TermCommandResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TermCommandResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 termType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requestId;
        break;
      }

      // required string requestId = 2;
      case 2: {
        if (tag == 18) {
         parse_requestId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TermCommandResult.requestId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional string message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TermCommandResult.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_respCode;
        break;
      }

      // optional int32 respCode = 5;
      case 5: {
        if (tag == 40) {
         parse_respCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respcode_)));
          set_has_respcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TermCommandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TermCommandResult)
  return false;
#undef DO_
}

void TermCommandResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TermCommandResult)
  // required uint32 termType = 1;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->termtype(), output);
  }

  // required string requestId = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermCommandResult.requestId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requestid(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermCommandResult.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  // optional int32 respCode = 5;
  if (has_respcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->respcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TermCommandResult)
}

::google::protobuf::uint8* TermCommandResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TermCommandResult)
  // required uint32 termType = 1;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->termtype(), target);
  }

  // required string requestId = 2;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermCommandResult.requestId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requestid(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermCommandResult.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional int32 respCode = 5;
  if (has_respcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->respcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TermCommandResult)
  return target;
}

int TermCommandResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TermCommandResult)
  int total_size = 0;

  if (has_termtype()) {
    // required uint32 termType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->termtype());
  }

  if (has_requestid()) {
    // required string requestId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestid());
  }

  if (has_status()) {
    // required uint32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  return total_size;
}
int TermCommandResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TermCommandResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 termType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->termtype());

    // required string requestId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestid());

    // required uint32 status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 respCode = 5;
    if (has_respcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->respcode());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TermCommandResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TermCommandResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TermCommandResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TermCommandResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TermCommandResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TermCommandResult)
    MergeFrom(*source);
  }
}

void TermCommandResult::MergeFrom(const TermCommandResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TermCommandResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_requestid()) {
      set_has_requestid();
      requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_respcode()) {
      set_respcode(from.respcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TermCommandResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TermCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermCommandResult::CopyFrom(const TermCommandResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TermCommandResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermCommandResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TermCommandResult::Swap(TermCommandResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TermCommandResult::InternalSwap(TermCommandResult* other) {
  std::swap(termtype_, other->termtype_);
  requestid_.Swap(&other->requestid_);
  std::swap(status_, other->status_);
  message_.Swap(&other->message_);
  std::swap(respcode_, other->respcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TermCommandResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TermCommandResult_descriptor_;
  metadata.reflection = TermCommandResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TermCommandResult

// required uint32 termType = 1;
bool TermCommandResult::has_termtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TermCommandResult::set_has_termtype() {
  _has_bits_[0] |= 0x00000001u;
}
void TermCommandResult::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void TermCommandResult::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
 ::google::protobuf::uint32 TermCommandResult::termtype() const {
  // @@protoc_insertion_point(field_get:TermCommandResult.termType)
  return termtype_;
}
 void TermCommandResult::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:TermCommandResult.termType)
}

// required string requestId = 2;
bool TermCommandResult::has_requestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TermCommandResult::set_has_requestid() {
  _has_bits_[0] |= 0x00000002u;
}
void TermCommandResult::clear_has_requestid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TermCommandResult::clear_requestid() {
  requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requestid();
}
 const ::std::string& TermCommandResult::requestid() const {
  // @@protoc_insertion_point(field_get:TermCommandResult.requestId)
  return requestid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermCommandResult::set_requestid(const ::std::string& value) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermCommandResult.requestId)
}
 void TermCommandResult::set_requestid(const char* value) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermCommandResult.requestId)
}
 void TermCommandResult::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermCommandResult.requestId)
}
 ::std::string* TermCommandResult::mutable_requestid() {
  set_has_requestid();
  // @@protoc_insertion_point(field_mutable:TermCommandResult.requestId)
  return requestid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TermCommandResult::release_requestid() {
  // @@protoc_insertion_point(field_release:TermCommandResult.requestId)
  clear_has_requestid();
  return requestid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermCommandResult::set_allocated_requestid(::std::string* requestid) {
  if (requestid != NULL) {
    set_has_requestid();
  } else {
    clear_has_requestid();
  }
  requestid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestid);
  // @@protoc_insertion_point(field_set_allocated:TermCommandResult.requestId)
}

// required uint32 status = 3;
bool TermCommandResult::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TermCommandResult::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TermCommandResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TermCommandResult::clear_status() {
  status_ = 0u;
  clear_has_status();
}
 ::google::protobuf::uint32 TermCommandResult::status() const {
  // @@protoc_insertion_point(field_get:TermCommandResult.status)
  return status_;
}
 void TermCommandResult::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:TermCommandResult.status)
}

// optional string message = 4;
bool TermCommandResult::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TermCommandResult::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
void TermCommandResult::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
void TermCommandResult::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& TermCommandResult::message() const {
  // @@protoc_insertion_point(field_get:TermCommandResult.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermCommandResult::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermCommandResult.message)
}
 void TermCommandResult::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermCommandResult.message)
}
 void TermCommandResult::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermCommandResult.message)
}
 ::std::string* TermCommandResult::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:TermCommandResult.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TermCommandResult::release_message() {
  // @@protoc_insertion_point(field_release:TermCommandResult.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermCommandResult::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:TermCommandResult.message)
}

// optional int32 respCode = 5;
bool TermCommandResult::has_respcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TermCommandResult::set_has_respcode() {
  _has_bits_[0] |= 0x00000010u;
}
void TermCommandResult::clear_has_respcode() {
  _has_bits_[0] &= ~0x00000010u;
}
void TermCommandResult::clear_respcode() {
  respcode_ = 0;
  clear_has_respcode();
}
 ::google::protobuf::int32 TermCommandResult::respcode() const {
  // @@protoc_insertion_point(field_get:TermCommandResult.respCode)
  return respcode_;
}
 void TermCommandResult::set_respcode(::google::protobuf::int32 value) {
  set_has_respcode();
  respcode_ = value;
  // @@protoc_insertion_point(field_set:TermCommandResult.respCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
