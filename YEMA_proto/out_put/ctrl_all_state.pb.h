// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_all_state.proto

#ifndef PROTOBUF_ctrl_5fall_5fstate_2eproto__INCLUDED
#define PROTOBUF_ctrl_5fall_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ctrl_air.pb.h"
#include "ctrl_chair.pb.h"
#include "ctrl_charge.pb.h"
#include "ctrl_doors.pb.h"
#include "ctrl_ekey.pb.h"
#include "ctrl_electromotor.pb.h"
#include "ctrl_engine.pb.h"
#include "ctrl_light_horn.pb.h"
#include "ctrl_windows.pb.h"
#include "ctrl_private_information.pb.h"
#include "state_oil_mass.pb.h"
#include "state_battery.pb.h"
#include "state_lighting.pb.h"
#include "state_mileage.pb.h"
#include "state_tyre.pb.h"
#include "state_other.pb.h"
#include "ctrl_common_param_tbox.pb.h"
#include "ctrl_top_windows.pb.h"
#include "ctrl_trunk_doors.pb.h"
#include "ctrl_air_temperature.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ctrl_5fall_5fstate_2eproto();
void protobuf_AssignDesc_ctrl_5fall_5fstate_2eproto();
void protobuf_ShutdownFile_ctrl_5fall_5fstate_2eproto();

class CtrlAllStateMessage;

// ===================================================================

class CtrlAllStateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CtrlAllStateMessage) */ {
 public:
  CtrlAllStateMessage();
  virtual ~CtrlAllStateMessage();

  CtrlAllStateMessage(const CtrlAllStateMessage& from);

  inline CtrlAllStateMessage& operator=(const CtrlAllStateMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlAllStateMessage& default_instance();

  void Swap(CtrlAllStateMessage* other);

  // implements Message ----------------------------------------------

  inline CtrlAllStateMessage* New() const { return New(NULL); }

  CtrlAllStateMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlAllStateMessage& from);
  void MergeFrom(const CtrlAllStateMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlAllStateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CtrlCommonParamTbox common_param = 1;
  bool has_common_param() const;
  void clear_common_param();
  static const int kCommonParamFieldNumber = 1;
  const ::CtrlCommonParamTbox& common_param() const;
  ::CtrlCommonParamTbox* mutable_common_param();
  ::CtrlCommonParamTbox* release_common_param();
  void set_allocated_common_param(::CtrlCommonParamTbox* common_param);

  // optional .CtrlAirMessage air_message = 2;
  bool has_air_message() const;
  void clear_air_message();
  static const int kAirMessageFieldNumber = 2;
  const ::CtrlAirMessage& air_message() const;
  ::CtrlAirMessage* mutable_air_message();
  ::CtrlAirMessage* release_air_message();
  void set_allocated_air_message(::CtrlAirMessage* air_message);

  // optional .CtrlChairMessage chair_message = 3;
  bool has_chair_message() const;
  void clear_chair_message();
  static const int kChairMessageFieldNumber = 3;
  const ::CtrlChairMessage& chair_message() const;
  ::CtrlChairMessage* mutable_chair_message();
  ::CtrlChairMessage* release_chair_message();
  void set_allocated_chair_message(::CtrlChairMessage* chair_message);

  // optional .CtrlChargeMessage charge_message = 4;
  bool has_charge_message() const;
  void clear_charge_message();
  static const int kChargeMessageFieldNumber = 4;
  const ::CtrlChargeMessage& charge_message() const;
  ::CtrlChargeMessage* mutable_charge_message();
  ::CtrlChargeMessage* release_charge_message();
  void set_allocated_charge_message(::CtrlChargeMessage* charge_message);

  // optional .CtrlDoorsMessage doors_message = 5;
  bool has_doors_message() const;
  void clear_doors_message();
  static const int kDoorsMessageFieldNumber = 5;
  const ::CtrlDoorsMessage& doors_message() const;
  ::CtrlDoorsMessage* mutable_doors_message();
  ::CtrlDoorsMessage* release_doors_message();
  void set_allocated_doors_message(::CtrlDoorsMessage* doors_message);

  // optional .CtrlEkeyMessage ekey_message = 6;
  bool has_ekey_message() const;
  void clear_ekey_message();
  static const int kEkeyMessageFieldNumber = 6;
  const ::CtrlEkeyMessage& ekey_message() const;
  ::CtrlEkeyMessage* mutable_ekey_message();
  ::CtrlEkeyMessage* release_ekey_message();
  void set_allocated_ekey_message(::CtrlEkeyMessage* ekey_message);

  // optional .CtrlElectromotorMessage electromotor_message = 7;
  bool has_electromotor_message() const;
  void clear_electromotor_message();
  static const int kElectromotorMessageFieldNumber = 7;
  const ::CtrlElectromotorMessage& electromotor_message() const;
  ::CtrlElectromotorMessage* mutable_electromotor_message();
  ::CtrlElectromotorMessage* release_electromotor_message();
  void set_allocated_electromotor_message(::CtrlElectromotorMessage* electromotor_message);

  // optional .CtrlEngineMessage engine_message = 8;
  bool has_engine_message() const;
  void clear_engine_message();
  static const int kEngineMessageFieldNumber = 8;
  const ::CtrlEngineMessage& engine_message() const;
  ::CtrlEngineMessage* mutable_engine_message();
  ::CtrlEngineMessage* release_engine_message();
  void set_allocated_engine_message(::CtrlEngineMessage* engine_message);

  // optional .CtrlLightHornMessage light_horn_message = 9;
  bool has_light_horn_message() const;
  void clear_light_horn_message();
  static const int kLightHornMessageFieldNumber = 9;
  const ::CtrlLightHornMessage& light_horn_message() const;
  ::CtrlLightHornMessage* mutable_light_horn_message();
  ::CtrlLightHornMessage* release_light_horn_message();
  void set_allocated_light_horn_message(::CtrlLightHornMessage* light_horn_message);

  // optional .CtrlWindowsMessage windows_message = 10;
  bool has_windows_message() const;
  void clear_windows_message();
  static const int kWindowsMessageFieldNumber = 10;
  const ::CtrlWindowsMessage& windows_message() const;
  ::CtrlWindowsMessage* mutable_windows_message();
  ::CtrlWindowsMessage* release_windows_message();
  void set_allocated_windows_message(::CtrlWindowsMessage* windows_message);

  // optional .StateOilMassMessage oil_mass_state = 11;
  bool has_oil_mass_state() const;
  void clear_oil_mass_state();
  static const int kOilMassStateFieldNumber = 11;
  const ::StateOilMassMessage& oil_mass_state() const;
  ::StateOilMassMessage* mutable_oil_mass_state();
  ::StateOilMassMessage* release_oil_mass_state();
  void set_allocated_oil_mass_state(::StateOilMassMessage* oil_mass_state);

  // optional .StateBatteryMessage battery_state = 12;
  bool has_battery_state() const;
  void clear_battery_state();
  static const int kBatteryStateFieldNumber = 12;
  const ::StateBatteryMessage& battery_state() const;
  ::StateBatteryMessage* mutable_battery_state();
  ::StateBatteryMessage* release_battery_state();
  void set_allocated_battery_state(::StateBatteryMessage* battery_state);

  // optional .StateLightingMessage lighting_state = 13;
  bool has_lighting_state() const;
  void clear_lighting_state();
  static const int kLightingStateFieldNumber = 13;
  const ::StateLightingMessage& lighting_state() const;
  ::StateLightingMessage* mutable_lighting_state();
  ::StateLightingMessage* release_lighting_state();
  void set_allocated_lighting_state(::StateLightingMessage* lighting_state);

  // optional .StateMileageMessage mileage_state = 14;
  bool has_mileage_state() const;
  void clear_mileage_state();
  static const int kMileageStateFieldNumber = 14;
  const ::StateMileageMessage& mileage_state() const;
  ::StateMileageMessage* mutable_mileage_state();
  ::StateMileageMessage* release_mileage_state();
  void set_allocated_mileage_state(::StateMileageMessage* mileage_state);

  // optional .StateTyreMessage tyre_state = 15;
  bool has_tyre_state() const;
  void clear_tyre_state();
  static const int kTyreStateFieldNumber = 15;
  const ::StateTyreMessage& tyre_state() const;
  ::StateTyreMessage* mutable_tyre_state();
  ::StateTyreMessage* release_tyre_state();
  void set_allocated_tyre_state(::StateTyreMessage* tyre_state);

  // optional .StateOtherMessage other_state = 16;
  bool has_other_state() const;
  void clear_other_state();
  static const int kOtherStateFieldNumber = 16;
  const ::StateOtherMessage& other_state() const;
  ::StateOtherMessage* mutable_other_state();
  ::StateOtherMessage* release_other_state();
  void set_allocated_other_state(::StateOtherMessage* other_state);

  // optional .CtrlPrivateInformationMessage private_information_message = 17;
  bool has_private_information_message() const;
  void clear_private_information_message();
  static const int kPrivateInformationMessageFieldNumber = 17;
  const ::CtrlPrivateInformationMessage& private_information_message() const;
  ::CtrlPrivateInformationMessage* mutable_private_information_message();
  ::CtrlPrivateInformationMessage* release_private_information_message();
  void set_allocated_private_information_message(::CtrlPrivateInformationMessage* private_information_message);

  // optional .CtrlTopWindowsMessage top_windows_message = 18;
  bool has_top_windows_message() const;
  void clear_top_windows_message();
  static const int kTopWindowsMessageFieldNumber = 18;
  const ::CtrlTopWindowsMessage& top_windows_message() const;
  ::CtrlTopWindowsMessage* mutable_top_windows_message();
  ::CtrlTopWindowsMessage* release_top_windows_message();
  void set_allocated_top_windows_message(::CtrlTopWindowsMessage* top_windows_message);

  // optional .CtrlTrunkDoorsMessage trunk_doors_message = 19;
  bool has_trunk_doors_message() const;
  void clear_trunk_doors_message();
  static const int kTrunkDoorsMessageFieldNumber = 19;
  const ::CtrlTrunkDoorsMessage& trunk_doors_message() const;
  ::CtrlTrunkDoorsMessage* mutable_trunk_doors_message();
  ::CtrlTrunkDoorsMessage* release_trunk_doors_message();
  void set_allocated_trunk_doors_message(::CtrlTrunkDoorsMessage* trunk_doors_message);

  // optional .CtrlAirTemperatureMessage air_temperature_message = 20;
  bool has_air_temperature_message() const;
  void clear_air_temperature_message();
  static const int kAirTemperatureMessageFieldNumber = 20;
  const ::CtrlAirTemperatureMessage& air_temperature_message() const;
  ::CtrlAirTemperatureMessage* mutable_air_temperature_message();
  ::CtrlAirTemperatureMessage* release_air_temperature_message();
  void set_allocated_air_temperature_message(::CtrlAirTemperatureMessage* air_temperature_message);

  // @@protoc_insertion_point(class_scope:CtrlAllStateMessage)
 private:
  inline void set_has_common_param();
  inline void clear_has_common_param();
  inline void set_has_air_message();
  inline void clear_has_air_message();
  inline void set_has_chair_message();
  inline void clear_has_chair_message();
  inline void set_has_charge_message();
  inline void clear_has_charge_message();
  inline void set_has_doors_message();
  inline void clear_has_doors_message();
  inline void set_has_ekey_message();
  inline void clear_has_ekey_message();
  inline void set_has_electromotor_message();
  inline void clear_has_electromotor_message();
  inline void set_has_engine_message();
  inline void clear_has_engine_message();
  inline void set_has_light_horn_message();
  inline void clear_has_light_horn_message();
  inline void set_has_windows_message();
  inline void clear_has_windows_message();
  inline void set_has_oil_mass_state();
  inline void clear_has_oil_mass_state();
  inline void set_has_battery_state();
  inline void clear_has_battery_state();
  inline void set_has_lighting_state();
  inline void clear_has_lighting_state();
  inline void set_has_mileage_state();
  inline void clear_has_mileage_state();
  inline void set_has_tyre_state();
  inline void clear_has_tyre_state();
  inline void set_has_other_state();
  inline void clear_has_other_state();
  inline void set_has_private_information_message();
  inline void clear_has_private_information_message();
  inline void set_has_top_windows_message();
  inline void clear_has_top_windows_message();
  inline void set_has_trunk_doors_message();
  inline void clear_has_trunk_doors_message();
  inline void set_has_air_temperature_message();
  inline void clear_has_air_temperature_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CtrlCommonParamTbox* common_param_;
  ::CtrlAirMessage* air_message_;
  ::CtrlChairMessage* chair_message_;
  ::CtrlChargeMessage* charge_message_;
  ::CtrlDoorsMessage* doors_message_;
  ::CtrlEkeyMessage* ekey_message_;
  ::CtrlElectromotorMessage* electromotor_message_;
  ::CtrlEngineMessage* engine_message_;
  ::CtrlLightHornMessage* light_horn_message_;
  ::CtrlWindowsMessage* windows_message_;
  ::StateOilMassMessage* oil_mass_state_;
  ::StateBatteryMessage* battery_state_;
  ::StateLightingMessage* lighting_state_;
  ::StateMileageMessage* mileage_state_;
  ::StateTyreMessage* tyre_state_;
  ::StateOtherMessage* other_state_;
  ::CtrlPrivateInformationMessage* private_information_message_;
  ::CtrlTopWindowsMessage* top_windows_message_;
  ::CtrlTrunkDoorsMessage* trunk_doors_message_;
  ::CtrlAirTemperatureMessage* air_temperature_message_;
  friend void  protobuf_AddDesc_ctrl_5fall_5fstate_2eproto();
  friend void protobuf_AssignDesc_ctrl_5fall_5fstate_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5fall_5fstate_2eproto();

  void InitAsDefaultInstance();
  static CtrlAllStateMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlAllStateMessage

// optional .CtrlCommonParamTbox common_param = 1;
inline bool CtrlAllStateMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CtrlAllStateMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CtrlAllStateMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CtrlAllStateMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
inline const ::CtrlCommonParamTbox& CtrlAllStateMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
inline ::CtrlCommonParamTbox* CtrlAllStateMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.common_param)
  return common_param_;
}
inline ::CtrlCommonParamTbox* CtrlAllStateMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.common_param)
}

// optional .CtrlAirMessage air_message = 2;
inline bool CtrlAllStateMessage::has_air_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CtrlAllStateMessage::set_has_air_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CtrlAllStateMessage::clear_has_air_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CtrlAllStateMessage::clear_air_message() {
  if (air_message_ != NULL) air_message_->::CtrlAirMessage::Clear();
  clear_has_air_message();
}
inline const ::CtrlAirMessage& CtrlAllStateMessage::air_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.air_message)
  return air_message_ != NULL ? *air_message_ : *default_instance_->air_message_;
}
inline ::CtrlAirMessage* CtrlAllStateMessage::mutable_air_message() {
  set_has_air_message();
  if (air_message_ == NULL) {
    air_message_ = new ::CtrlAirMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.air_message)
  return air_message_;
}
inline ::CtrlAirMessage* CtrlAllStateMessage::release_air_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.air_message)
  clear_has_air_message();
  ::CtrlAirMessage* temp = air_message_;
  air_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_air_message(::CtrlAirMessage* air_message) {
  delete air_message_;
  air_message_ = air_message;
  if (air_message) {
    set_has_air_message();
  } else {
    clear_has_air_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.air_message)
}

// optional .CtrlChairMessage chair_message = 3;
inline bool CtrlAllStateMessage::has_chair_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CtrlAllStateMessage::set_has_chair_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CtrlAllStateMessage::clear_has_chair_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CtrlAllStateMessage::clear_chair_message() {
  if (chair_message_ != NULL) chair_message_->::CtrlChairMessage::Clear();
  clear_has_chair_message();
}
inline const ::CtrlChairMessage& CtrlAllStateMessage::chair_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.chair_message)
  return chair_message_ != NULL ? *chair_message_ : *default_instance_->chair_message_;
}
inline ::CtrlChairMessage* CtrlAllStateMessage::mutable_chair_message() {
  set_has_chair_message();
  if (chair_message_ == NULL) {
    chair_message_ = new ::CtrlChairMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.chair_message)
  return chair_message_;
}
inline ::CtrlChairMessage* CtrlAllStateMessage::release_chair_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.chair_message)
  clear_has_chair_message();
  ::CtrlChairMessage* temp = chair_message_;
  chair_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_chair_message(::CtrlChairMessage* chair_message) {
  delete chair_message_;
  chair_message_ = chair_message;
  if (chair_message) {
    set_has_chair_message();
  } else {
    clear_has_chair_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.chair_message)
}

// optional .CtrlChargeMessage charge_message = 4;
inline bool CtrlAllStateMessage::has_charge_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CtrlAllStateMessage::set_has_charge_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CtrlAllStateMessage::clear_has_charge_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CtrlAllStateMessage::clear_charge_message() {
  if (charge_message_ != NULL) charge_message_->::CtrlChargeMessage::Clear();
  clear_has_charge_message();
}
inline const ::CtrlChargeMessage& CtrlAllStateMessage::charge_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.charge_message)
  return charge_message_ != NULL ? *charge_message_ : *default_instance_->charge_message_;
}
inline ::CtrlChargeMessage* CtrlAllStateMessage::mutable_charge_message() {
  set_has_charge_message();
  if (charge_message_ == NULL) {
    charge_message_ = new ::CtrlChargeMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.charge_message)
  return charge_message_;
}
inline ::CtrlChargeMessage* CtrlAllStateMessage::release_charge_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.charge_message)
  clear_has_charge_message();
  ::CtrlChargeMessage* temp = charge_message_;
  charge_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_charge_message(::CtrlChargeMessage* charge_message) {
  delete charge_message_;
  charge_message_ = charge_message;
  if (charge_message) {
    set_has_charge_message();
  } else {
    clear_has_charge_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.charge_message)
}

// optional .CtrlDoorsMessage doors_message = 5;
inline bool CtrlAllStateMessage::has_doors_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CtrlAllStateMessage::set_has_doors_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CtrlAllStateMessage::clear_has_doors_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CtrlAllStateMessage::clear_doors_message() {
  if (doors_message_ != NULL) doors_message_->::CtrlDoorsMessage::Clear();
  clear_has_doors_message();
}
inline const ::CtrlDoorsMessage& CtrlAllStateMessage::doors_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.doors_message)
  return doors_message_ != NULL ? *doors_message_ : *default_instance_->doors_message_;
}
inline ::CtrlDoorsMessage* CtrlAllStateMessage::mutable_doors_message() {
  set_has_doors_message();
  if (doors_message_ == NULL) {
    doors_message_ = new ::CtrlDoorsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.doors_message)
  return doors_message_;
}
inline ::CtrlDoorsMessage* CtrlAllStateMessage::release_doors_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.doors_message)
  clear_has_doors_message();
  ::CtrlDoorsMessage* temp = doors_message_;
  doors_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_doors_message(::CtrlDoorsMessage* doors_message) {
  delete doors_message_;
  doors_message_ = doors_message;
  if (doors_message) {
    set_has_doors_message();
  } else {
    clear_has_doors_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.doors_message)
}

// optional .CtrlEkeyMessage ekey_message = 6;
inline bool CtrlAllStateMessage::has_ekey_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CtrlAllStateMessage::set_has_ekey_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CtrlAllStateMessage::clear_has_ekey_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CtrlAllStateMessage::clear_ekey_message() {
  if (ekey_message_ != NULL) ekey_message_->::CtrlEkeyMessage::Clear();
  clear_has_ekey_message();
}
inline const ::CtrlEkeyMessage& CtrlAllStateMessage::ekey_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.ekey_message)
  return ekey_message_ != NULL ? *ekey_message_ : *default_instance_->ekey_message_;
}
inline ::CtrlEkeyMessage* CtrlAllStateMessage::mutable_ekey_message() {
  set_has_ekey_message();
  if (ekey_message_ == NULL) {
    ekey_message_ = new ::CtrlEkeyMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.ekey_message)
  return ekey_message_;
}
inline ::CtrlEkeyMessage* CtrlAllStateMessage::release_ekey_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.ekey_message)
  clear_has_ekey_message();
  ::CtrlEkeyMessage* temp = ekey_message_;
  ekey_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_ekey_message(::CtrlEkeyMessage* ekey_message) {
  delete ekey_message_;
  ekey_message_ = ekey_message;
  if (ekey_message) {
    set_has_ekey_message();
  } else {
    clear_has_ekey_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.ekey_message)
}

// optional .CtrlElectromotorMessage electromotor_message = 7;
inline bool CtrlAllStateMessage::has_electromotor_message() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CtrlAllStateMessage::set_has_electromotor_message() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CtrlAllStateMessage::clear_has_electromotor_message() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CtrlAllStateMessage::clear_electromotor_message() {
  if (electromotor_message_ != NULL) electromotor_message_->::CtrlElectromotorMessage::Clear();
  clear_has_electromotor_message();
}
inline const ::CtrlElectromotorMessage& CtrlAllStateMessage::electromotor_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.electromotor_message)
  return electromotor_message_ != NULL ? *electromotor_message_ : *default_instance_->electromotor_message_;
}
inline ::CtrlElectromotorMessage* CtrlAllStateMessage::mutable_electromotor_message() {
  set_has_electromotor_message();
  if (electromotor_message_ == NULL) {
    electromotor_message_ = new ::CtrlElectromotorMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.electromotor_message)
  return electromotor_message_;
}
inline ::CtrlElectromotorMessage* CtrlAllStateMessage::release_electromotor_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.electromotor_message)
  clear_has_electromotor_message();
  ::CtrlElectromotorMessage* temp = electromotor_message_;
  electromotor_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_electromotor_message(::CtrlElectromotorMessage* electromotor_message) {
  delete electromotor_message_;
  electromotor_message_ = electromotor_message;
  if (electromotor_message) {
    set_has_electromotor_message();
  } else {
    clear_has_electromotor_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.electromotor_message)
}

// optional .CtrlEngineMessage engine_message = 8;
inline bool CtrlAllStateMessage::has_engine_message() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CtrlAllStateMessage::set_has_engine_message() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CtrlAllStateMessage::clear_has_engine_message() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CtrlAllStateMessage::clear_engine_message() {
  if (engine_message_ != NULL) engine_message_->::CtrlEngineMessage::Clear();
  clear_has_engine_message();
}
inline const ::CtrlEngineMessage& CtrlAllStateMessage::engine_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.engine_message)
  return engine_message_ != NULL ? *engine_message_ : *default_instance_->engine_message_;
}
inline ::CtrlEngineMessage* CtrlAllStateMessage::mutable_engine_message() {
  set_has_engine_message();
  if (engine_message_ == NULL) {
    engine_message_ = new ::CtrlEngineMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.engine_message)
  return engine_message_;
}
inline ::CtrlEngineMessage* CtrlAllStateMessage::release_engine_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.engine_message)
  clear_has_engine_message();
  ::CtrlEngineMessage* temp = engine_message_;
  engine_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_engine_message(::CtrlEngineMessage* engine_message) {
  delete engine_message_;
  engine_message_ = engine_message;
  if (engine_message) {
    set_has_engine_message();
  } else {
    clear_has_engine_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.engine_message)
}

// optional .CtrlLightHornMessage light_horn_message = 9;
inline bool CtrlAllStateMessage::has_light_horn_message() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CtrlAllStateMessage::set_has_light_horn_message() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CtrlAllStateMessage::clear_has_light_horn_message() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CtrlAllStateMessage::clear_light_horn_message() {
  if (light_horn_message_ != NULL) light_horn_message_->::CtrlLightHornMessage::Clear();
  clear_has_light_horn_message();
}
inline const ::CtrlLightHornMessage& CtrlAllStateMessage::light_horn_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.light_horn_message)
  return light_horn_message_ != NULL ? *light_horn_message_ : *default_instance_->light_horn_message_;
}
inline ::CtrlLightHornMessage* CtrlAllStateMessage::mutable_light_horn_message() {
  set_has_light_horn_message();
  if (light_horn_message_ == NULL) {
    light_horn_message_ = new ::CtrlLightHornMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.light_horn_message)
  return light_horn_message_;
}
inline ::CtrlLightHornMessage* CtrlAllStateMessage::release_light_horn_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.light_horn_message)
  clear_has_light_horn_message();
  ::CtrlLightHornMessage* temp = light_horn_message_;
  light_horn_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_light_horn_message(::CtrlLightHornMessage* light_horn_message) {
  delete light_horn_message_;
  light_horn_message_ = light_horn_message;
  if (light_horn_message) {
    set_has_light_horn_message();
  } else {
    clear_has_light_horn_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.light_horn_message)
}

// optional .CtrlWindowsMessage windows_message = 10;
inline bool CtrlAllStateMessage::has_windows_message() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CtrlAllStateMessage::set_has_windows_message() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CtrlAllStateMessage::clear_has_windows_message() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CtrlAllStateMessage::clear_windows_message() {
  if (windows_message_ != NULL) windows_message_->::CtrlWindowsMessage::Clear();
  clear_has_windows_message();
}
inline const ::CtrlWindowsMessage& CtrlAllStateMessage::windows_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.windows_message)
  return windows_message_ != NULL ? *windows_message_ : *default_instance_->windows_message_;
}
inline ::CtrlWindowsMessage* CtrlAllStateMessage::mutable_windows_message() {
  set_has_windows_message();
  if (windows_message_ == NULL) {
    windows_message_ = new ::CtrlWindowsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.windows_message)
  return windows_message_;
}
inline ::CtrlWindowsMessage* CtrlAllStateMessage::release_windows_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.windows_message)
  clear_has_windows_message();
  ::CtrlWindowsMessage* temp = windows_message_;
  windows_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_windows_message(::CtrlWindowsMessage* windows_message) {
  delete windows_message_;
  windows_message_ = windows_message;
  if (windows_message) {
    set_has_windows_message();
  } else {
    clear_has_windows_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.windows_message)
}

// optional .StateOilMassMessage oil_mass_state = 11;
inline bool CtrlAllStateMessage::has_oil_mass_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CtrlAllStateMessage::set_has_oil_mass_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CtrlAllStateMessage::clear_has_oil_mass_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CtrlAllStateMessage::clear_oil_mass_state() {
  if (oil_mass_state_ != NULL) oil_mass_state_->::StateOilMassMessage::Clear();
  clear_has_oil_mass_state();
}
inline const ::StateOilMassMessage& CtrlAllStateMessage::oil_mass_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.oil_mass_state)
  return oil_mass_state_ != NULL ? *oil_mass_state_ : *default_instance_->oil_mass_state_;
}
inline ::StateOilMassMessage* CtrlAllStateMessage::mutable_oil_mass_state() {
  set_has_oil_mass_state();
  if (oil_mass_state_ == NULL) {
    oil_mass_state_ = new ::StateOilMassMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.oil_mass_state)
  return oil_mass_state_;
}
inline ::StateOilMassMessage* CtrlAllStateMessage::release_oil_mass_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.oil_mass_state)
  clear_has_oil_mass_state();
  ::StateOilMassMessage* temp = oil_mass_state_;
  oil_mass_state_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_oil_mass_state(::StateOilMassMessage* oil_mass_state) {
  delete oil_mass_state_;
  oil_mass_state_ = oil_mass_state;
  if (oil_mass_state) {
    set_has_oil_mass_state();
  } else {
    clear_has_oil_mass_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.oil_mass_state)
}

// optional .StateBatteryMessage battery_state = 12;
inline bool CtrlAllStateMessage::has_battery_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CtrlAllStateMessage::set_has_battery_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CtrlAllStateMessage::clear_has_battery_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CtrlAllStateMessage::clear_battery_state() {
  if (battery_state_ != NULL) battery_state_->::StateBatteryMessage::Clear();
  clear_has_battery_state();
}
inline const ::StateBatteryMessage& CtrlAllStateMessage::battery_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.battery_state)
  return battery_state_ != NULL ? *battery_state_ : *default_instance_->battery_state_;
}
inline ::StateBatteryMessage* CtrlAllStateMessage::mutable_battery_state() {
  set_has_battery_state();
  if (battery_state_ == NULL) {
    battery_state_ = new ::StateBatteryMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.battery_state)
  return battery_state_;
}
inline ::StateBatteryMessage* CtrlAllStateMessage::release_battery_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.battery_state)
  clear_has_battery_state();
  ::StateBatteryMessage* temp = battery_state_;
  battery_state_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_battery_state(::StateBatteryMessage* battery_state) {
  delete battery_state_;
  battery_state_ = battery_state;
  if (battery_state) {
    set_has_battery_state();
  } else {
    clear_has_battery_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.battery_state)
}

// optional .StateLightingMessage lighting_state = 13;
inline bool CtrlAllStateMessage::has_lighting_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CtrlAllStateMessage::set_has_lighting_state() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CtrlAllStateMessage::clear_has_lighting_state() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CtrlAllStateMessage::clear_lighting_state() {
  if (lighting_state_ != NULL) lighting_state_->::StateLightingMessage::Clear();
  clear_has_lighting_state();
}
inline const ::StateLightingMessage& CtrlAllStateMessage::lighting_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.lighting_state)
  return lighting_state_ != NULL ? *lighting_state_ : *default_instance_->lighting_state_;
}
inline ::StateLightingMessage* CtrlAllStateMessage::mutable_lighting_state() {
  set_has_lighting_state();
  if (lighting_state_ == NULL) {
    lighting_state_ = new ::StateLightingMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.lighting_state)
  return lighting_state_;
}
inline ::StateLightingMessage* CtrlAllStateMessage::release_lighting_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.lighting_state)
  clear_has_lighting_state();
  ::StateLightingMessage* temp = lighting_state_;
  lighting_state_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_lighting_state(::StateLightingMessage* lighting_state) {
  delete lighting_state_;
  lighting_state_ = lighting_state;
  if (lighting_state) {
    set_has_lighting_state();
  } else {
    clear_has_lighting_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.lighting_state)
}

// optional .StateMileageMessage mileage_state = 14;
inline bool CtrlAllStateMessage::has_mileage_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CtrlAllStateMessage::set_has_mileage_state() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CtrlAllStateMessage::clear_has_mileage_state() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CtrlAllStateMessage::clear_mileage_state() {
  if (mileage_state_ != NULL) mileage_state_->::StateMileageMessage::Clear();
  clear_has_mileage_state();
}
inline const ::StateMileageMessage& CtrlAllStateMessage::mileage_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.mileage_state)
  return mileage_state_ != NULL ? *mileage_state_ : *default_instance_->mileage_state_;
}
inline ::StateMileageMessage* CtrlAllStateMessage::mutable_mileage_state() {
  set_has_mileage_state();
  if (mileage_state_ == NULL) {
    mileage_state_ = new ::StateMileageMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.mileage_state)
  return mileage_state_;
}
inline ::StateMileageMessage* CtrlAllStateMessage::release_mileage_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.mileage_state)
  clear_has_mileage_state();
  ::StateMileageMessage* temp = mileage_state_;
  mileage_state_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_mileage_state(::StateMileageMessage* mileage_state) {
  delete mileage_state_;
  mileage_state_ = mileage_state;
  if (mileage_state) {
    set_has_mileage_state();
  } else {
    clear_has_mileage_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.mileage_state)
}

// optional .StateTyreMessage tyre_state = 15;
inline bool CtrlAllStateMessage::has_tyre_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CtrlAllStateMessage::set_has_tyre_state() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CtrlAllStateMessage::clear_has_tyre_state() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CtrlAllStateMessage::clear_tyre_state() {
  if (tyre_state_ != NULL) tyre_state_->::StateTyreMessage::Clear();
  clear_has_tyre_state();
}
inline const ::StateTyreMessage& CtrlAllStateMessage::tyre_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.tyre_state)
  return tyre_state_ != NULL ? *tyre_state_ : *default_instance_->tyre_state_;
}
inline ::StateTyreMessage* CtrlAllStateMessage::mutable_tyre_state() {
  set_has_tyre_state();
  if (tyre_state_ == NULL) {
    tyre_state_ = new ::StateTyreMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.tyre_state)
  return tyre_state_;
}
inline ::StateTyreMessage* CtrlAllStateMessage::release_tyre_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.tyre_state)
  clear_has_tyre_state();
  ::StateTyreMessage* temp = tyre_state_;
  tyre_state_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_tyre_state(::StateTyreMessage* tyre_state) {
  delete tyre_state_;
  tyre_state_ = tyre_state;
  if (tyre_state) {
    set_has_tyre_state();
  } else {
    clear_has_tyre_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.tyre_state)
}

// optional .StateOtherMessage other_state = 16;
inline bool CtrlAllStateMessage::has_other_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CtrlAllStateMessage::set_has_other_state() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CtrlAllStateMessage::clear_has_other_state() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CtrlAllStateMessage::clear_other_state() {
  if (other_state_ != NULL) other_state_->::StateOtherMessage::Clear();
  clear_has_other_state();
}
inline const ::StateOtherMessage& CtrlAllStateMessage::other_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.other_state)
  return other_state_ != NULL ? *other_state_ : *default_instance_->other_state_;
}
inline ::StateOtherMessage* CtrlAllStateMessage::mutable_other_state() {
  set_has_other_state();
  if (other_state_ == NULL) {
    other_state_ = new ::StateOtherMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.other_state)
  return other_state_;
}
inline ::StateOtherMessage* CtrlAllStateMessage::release_other_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.other_state)
  clear_has_other_state();
  ::StateOtherMessage* temp = other_state_;
  other_state_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_other_state(::StateOtherMessage* other_state) {
  delete other_state_;
  other_state_ = other_state;
  if (other_state) {
    set_has_other_state();
  } else {
    clear_has_other_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.other_state)
}

// optional .CtrlPrivateInformationMessage private_information_message = 17;
inline bool CtrlAllStateMessage::has_private_information_message() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CtrlAllStateMessage::set_has_private_information_message() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CtrlAllStateMessage::clear_has_private_information_message() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CtrlAllStateMessage::clear_private_information_message() {
  if (private_information_message_ != NULL) private_information_message_->::CtrlPrivateInformationMessage::Clear();
  clear_has_private_information_message();
}
inline const ::CtrlPrivateInformationMessage& CtrlAllStateMessage::private_information_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.private_information_message)
  return private_information_message_ != NULL ? *private_information_message_ : *default_instance_->private_information_message_;
}
inline ::CtrlPrivateInformationMessage* CtrlAllStateMessage::mutable_private_information_message() {
  set_has_private_information_message();
  if (private_information_message_ == NULL) {
    private_information_message_ = new ::CtrlPrivateInformationMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.private_information_message)
  return private_information_message_;
}
inline ::CtrlPrivateInformationMessage* CtrlAllStateMessage::release_private_information_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.private_information_message)
  clear_has_private_information_message();
  ::CtrlPrivateInformationMessage* temp = private_information_message_;
  private_information_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_private_information_message(::CtrlPrivateInformationMessage* private_information_message) {
  delete private_information_message_;
  private_information_message_ = private_information_message;
  if (private_information_message) {
    set_has_private_information_message();
  } else {
    clear_has_private_information_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.private_information_message)
}

// optional .CtrlTopWindowsMessage top_windows_message = 18;
inline bool CtrlAllStateMessage::has_top_windows_message() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CtrlAllStateMessage::set_has_top_windows_message() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CtrlAllStateMessage::clear_has_top_windows_message() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CtrlAllStateMessage::clear_top_windows_message() {
  if (top_windows_message_ != NULL) top_windows_message_->::CtrlTopWindowsMessage::Clear();
  clear_has_top_windows_message();
}
inline const ::CtrlTopWindowsMessage& CtrlAllStateMessage::top_windows_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.top_windows_message)
  return top_windows_message_ != NULL ? *top_windows_message_ : *default_instance_->top_windows_message_;
}
inline ::CtrlTopWindowsMessage* CtrlAllStateMessage::mutable_top_windows_message() {
  set_has_top_windows_message();
  if (top_windows_message_ == NULL) {
    top_windows_message_ = new ::CtrlTopWindowsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.top_windows_message)
  return top_windows_message_;
}
inline ::CtrlTopWindowsMessage* CtrlAllStateMessage::release_top_windows_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.top_windows_message)
  clear_has_top_windows_message();
  ::CtrlTopWindowsMessage* temp = top_windows_message_;
  top_windows_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_top_windows_message(::CtrlTopWindowsMessage* top_windows_message) {
  delete top_windows_message_;
  top_windows_message_ = top_windows_message;
  if (top_windows_message) {
    set_has_top_windows_message();
  } else {
    clear_has_top_windows_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.top_windows_message)
}

// optional .CtrlTrunkDoorsMessage trunk_doors_message = 19;
inline bool CtrlAllStateMessage::has_trunk_doors_message() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CtrlAllStateMessage::set_has_trunk_doors_message() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CtrlAllStateMessage::clear_has_trunk_doors_message() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CtrlAllStateMessage::clear_trunk_doors_message() {
  if (trunk_doors_message_ != NULL) trunk_doors_message_->::CtrlTrunkDoorsMessage::Clear();
  clear_has_trunk_doors_message();
}
inline const ::CtrlTrunkDoorsMessage& CtrlAllStateMessage::trunk_doors_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.trunk_doors_message)
  return trunk_doors_message_ != NULL ? *trunk_doors_message_ : *default_instance_->trunk_doors_message_;
}
inline ::CtrlTrunkDoorsMessage* CtrlAllStateMessage::mutable_trunk_doors_message() {
  set_has_trunk_doors_message();
  if (trunk_doors_message_ == NULL) {
    trunk_doors_message_ = new ::CtrlTrunkDoorsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.trunk_doors_message)
  return trunk_doors_message_;
}
inline ::CtrlTrunkDoorsMessage* CtrlAllStateMessage::release_trunk_doors_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.trunk_doors_message)
  clear_has_trunk_doors_message();
  ::CtrlTrunkDoorsMessage* temp = trunk_doors_message_;
  trunk_doors_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_trunk_doors_message(::CtrlTrunkDoorsMessage* trunk_doors_message) {
  delete trunk_doors_message_;
  trunk_doors_message_ = trunk_doors_message;
  if (trunk_doors_message) {
    set_has_trunk_doors_message();
  } else {
    clear_has_trunk_doors_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.trunk_doors_message)
}

// optional .CtrlAirTemperatureMessage air_temperature_message = 20;
inline bool CtrlAllStateMessage::has_air_temperature_message() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CtrlAllStateMessage::set_has_air_temperature_message() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CtrlAllStateMessage::clear_has_air_temperature_message() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CtrlAllStateMessage::clear_air_temperature_message() {
  if (air_temperature_message_ != NULL) air_temperature_message_->::CtrlAirTemperatureMessage::Clear();
  clear_has_air_temperature_message();
}
inline const ::CtrlAirTemperatureMessage& CtrlAllStateMessage::air_temperature_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.air_temperature_message)
  return air_temperature_message_ != NULL ? *air_temperature_message_ : *default_instance_->air_temperature_message_;
}
inline ::CtrlAirTemperatureMessage* CtrlAllStateMessage::mutable_air_temperature_message() {
  set_has_air_temperature_message();
  if (air_temperature_message_ == NULL) {
    air_temperature_message_ = new ::CtrlAirTemperatureMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.air_temperature_message)
  return air_temperature_message_;
}
inline ::CtrlAirTemperatureMessage* CtrlAllStateMessage::release_air_temperature_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.air_temperature_message)
  clear_has_air_temperature_message();
  ::CtrlAirTemperatureMessage* temp = air_temperature_message_;
  air_temperature_message_ = NULL;
  return temp;
}
inline void CtrlAllStateMessage::set_allocated_air_temperature_message(::CtrlAirTemperatureMessage* air_temperature_message) {
  delete air_temperature_message_;
  air_temperature_message_ = air_temperature_message;
  if (air_temperature_message) {
    set_has_air_temperature_message();
  } else {
    clear_has_air_temperature_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.air_temperature_message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ctrl_5fall_5fstate_2eproto__INCLUDED
