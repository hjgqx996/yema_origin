// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: term_version_upload.proto

#ifndef PROTOBUF_term_5fversion_5fupload_2eproto__INCLUDED
#define PROTOBUF_term_5fversion_5fupload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_term_5fversion_5fupload_2eproto();
void protobuf_AssignDesc_term_5fversion_5fupload_2eproto();
void protobuf_ShutdownFile_term_5fversion_5fupload_2eproto();

class TermVersionUpload;
class TermVersionUploadData;

// ===================================================================

class TermVersionUploadData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TermVersionUploadData) */ {
 public:
  TermVersionUploadData();
  virtual ~TermVersionUploadData();

  TermVersionUploadData(const TermVersionUploadData& from);

  inline TermVersionUploadData& operator=(const TermVersionUploadData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TermVersionUploadData& default_instance();

  void Swap(TermVersionUploadData* other);

  // implements Message ----------------------------------------------

  inline TermVersionUploadData* New() const { return New(NULL); }

  TermVersionUploadData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TermVersionUploadData& from);
  void MergeFrom(const TermVersionUploadData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TermVersionUploadData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TermVersionUpload termVersionUpload = 1;
  int termversionupload_size() const;
  void clear_termversionupload();
  static const int kTermVersionUploadFieldNumber = 1;
  const ::TermVersionUpload& termversionupload(int index) const;
  ::TermVersionUpload* mutable_termversionupload(int index);
  ::TermVersionUpload* add_termversionupload();
  ::google::protobuf::RepeatedPtrField< ::TermVersionUpload >*
      mutable_termversionupload();
  const ::google::protobuf::RepeatedPtrField< ::TermVersionUpload >&
      termversionupload() const;

  // optional int32 respCode = 2;
  bool has_respcode() const;
  void clear_respcode();
  static const int kRespCodeFieldNumber = 2;
  ::google::protobuf::int32 respcode() const;
  void set_respcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TermVersionUploadData)
 private:
  inline void set_has_respcode();
  inline void clear_has_respcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TermVersionUpload > termversionupload_;
  ::google::protobuf::int32 respcode_;
  friend void  protobuf_AddDesc_term_5fversion_5fupload_2eproto();
  friend void protobuf_AssignDesc_term_5fversion_5fupload_2eproto();
  friend void protobuf_ShutdownFile_term_5fversion_5fupload_2eproto();

  void InitAsDefaultInstance();
  static TermVersionUploadData* default_instance_;
};
// -------------------------------------------------------------------

class TermVersionUpload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TermVersionUpload) */ {
 public:
  TermVersionUpload();
  virtual ~TermVersionUpload();

  TermVersionUpload(const TermVersionUpload& from);

  inline TermVersionUpload& operator=(const TermVersionUpload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TermVersionUpload& default_instance();

  void Swap(TermVersionUpload* other);

  // implements Message ----------------------------------------------

  inline TermVersionUpload* New() const { return New(NULL); }

  TermVersionUpload* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TermVersionUpload& from);
  void MergeFrom(const TermVersionUpload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TermVersionUpload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 termType = 1;
  bool has_termtype() const;
  void clear_termtype();
  static const int kTermTypeFieldNumber = 1;
  ::google::protobuf::uint32 termtype() const;
  void set_termtype(::google::protobuf::uint32 value);

  // optional string manufacturerId = 2;
  bool has_manufacturerid() const;
  void clear_manufacturerid();
  static const int kManufacturerIdFieldNumber = 2;
  const ::std::string& manufacturerid() const;
  void set_manufacturerid(const ::std::string& value);
  void set_manufacturerid(const char* value);
  void set_manufacturerid(const char* value, size_t size);
  ::std::string* mutable_manufacturerid();
  ::std::string* release_manufacturerid();
  void set_allocated_manufacturerid(::std::string* manufacturerid);

  // optional string hardwareVersion = 3;
  bool has_hardwareversion() const;
  void clear_hardwareversion();
  static const int kHardwareVersionFieldNumber = 3;
  const ::std::string& hardwareversion() const;
  void set_hardwareversion(const ::std::string& value);
  void set_hardwareversion(const char* value);
  void set_hardwareversion(const char* value, size_t size);
  ::std::string* mutable_hardwareversion();
  ::std::string* release_hardwareversion();
  void set_allocated_hardwareversion(::std::string* hardwareversion);

  // required string firmwareVersion = 4;
  bool has_firmwareversion() const;
  void clear_firmwareversion();
  static const int kFirmwareVersionFieldNumber = 4;
  const ::std::string& firmwareversion() const;
  void set_firmwareversion(const ::std::string& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  ::std::string* mutable_firmwareversion();
  ::std::string* release_firmwareversion();
  void set_allocated_firmwareversion(::std::string* firmwareversion);

  // @@protoc_insertion_point(class_scope:TermVersionUpload)
 private:
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_manufacturerid();
  inline void clear_has_manufacturerid();
  inline void set_has_hardwareversion();
  inline void clear_has_hardwareversion();
  inline void set_has_firmwareversion();
  inline void clear_has_firmwareversion();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr manufacturerid_;
  ::google::protobuf::internal::ArenaStringPtr hardwareversion_;
  ::google::protobuf::internal::ArenaStringPtr firmwareversion_;
  ::google::protobuf::uint32 termtype_;
  friend void  protobuf_AddDesc_term_5fversion_5fupload_2eproto();
  friend void protobuf_AssignDesc_term_5fversion_5fupload_2eproto();
  friend void protobuf_ShutdownFile_term_5fversion_5fupload_2eproto();

  void InitAsDefaultInstance();
  static TermVersionUpload* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TermVersionUploadData

// repeated .TermVersionUpload termVersionUpload = 1;
inline int TermVersionUploadData::termversionupload_size() const {
  return termversionupload_.size();
}
inline void TermVersionUploadData::clear_termversionupload() {
  termversionupload_.Clear();
}
inline const ::TermVersionUpload& TermVersionUploadData::termversionupload(int index) const {
  // @@protoc_insertion_point(field_get:TermVersionUploadData.termVersionUpload)
  return termversionupload_.Get(index);
}
inline ::TermVersionUpload* TermVersionUploadData::mutable_termversionupload(int index) {
  // @@protoc_insertion_point(field_mutable:TermVersionUploadData.termVersionUpload)
  return termversionupload_.Mutable(index);
}
inline ::TermVersionUpload* TermVersionUploadData::add_termversionupload() {
  // @@protoc_insertion_point(field_add:TermVersionUploadData.termVersionUpload)
  return termversionupload_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TermVersionUpload >*
TermVersionUploadData::mutable_termversionupload() {
  // @@protoc_insertion_point(field_mutable_list:TermVersionUploadData.termVersionUpload)
  return &termversionupload_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TermVersionUpload >&
TermVersionUploadData::termversionupload() const {
  // @@protoc_insertion_point(field_list:TermVersionUploadData.termVersionUpload)
  return termversionupload_;
}

// optional int32 respCode = 2;
inline bool TermVersionUploadData::has_respcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TermVersionUploadData::set_has_respcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TermVersionUploadData::clear_has_respcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TermVersionUploadData::clear_respcode() {
  respcode_ = 0;
  clear_has_respcode();
}
inline ::google::protobuf::int32 TermVersionUploadData::respcode() const {
  // @@protoc_insertion_point(field_get:TermVersionUploadData.respCode)
  return respcode_;
}
inline void TermVersionUploadData::set_respcode(::google::protobuf::int32 value) {
  set_has_respcode();
  respcode_ = value;
  // @@protoc_insertion_point(field_set:TermVersionUploadData.respCode)
}

// -------------------------------------------------------------------

// TermVersionUpload

// required uint32 termType = 1;
inline bool TermVersionUpload::has_termtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TermVersionUpload::set_has_termtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TermVersionUpload::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TermVersionUpload::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 TermVersionUpload::termtype() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.termType)
  return termtype_;
}
inline void TermVersionUpload::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:TermVersionUpload.termType)
}

// optional string manufacturerId = 2;
inline bool TermVersionUpload::has_manufacturerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TermVersionUpload::set_has_manufacturerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TermVersionUpload::clear_has_manufacturerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TermVersionUpload::clear_manufacturerid() {
  manufacturerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturerid();
}
inline const ::std::string& TermVersionUpload::manufacturerid() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.manufacturerId)
  return manufacturerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermVersionUpload::set_manufacturerid(const ::std::string& value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermVersionUpload.manufacturerId)
}
inline void TermVersionUpload::set_manufacturerid(const char* value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermVersionUpload.manufacturerId)
}
inline void TermVersionUpload::set_manufacturerid(const char* value, size_t size) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermVersionUpload.manufacturerId)
}
inline ::std::string* TermVersionUpload::mutable_manufacturerid() {
  set_has_manufacturerid();
  // @@protoc_insertion_point(field_mutable:TermVersionUpload.manufacturerId)
  return manufacturerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TermVersionUpload::release_manufacturerid() {
  // @@protoc_insertion_point(field_release:TermVersionUpload.manufacturerId)
  clear_has_manufacturerid();
  return manufacturerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermVersionUpload::set_allocated_manufacturerid(::std::string* manufacturerid) {
  if (manufacturerid != NULL) {
    set_has_manufacturerid();
  } else {
    clear_has_manufacturerid();
  }
  manufacturerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturerid);
  // @@protoc_insertion_point(field_set_allocated:TermVersionUpload.manufacturerId)
}

// optional string hardwareVersion = 3;
inline bool TermVersionUpload::has_hardwareversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TermVersionUpload::set_has_hardwareversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TermVersionUpload::clear_has_hardwareversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TermVersionUpload::clear_hardwareversion() {
  hardwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardwareversion();
}
inline const ::std::string& TermVersionUpload::hardwareversion() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.hardwareVersion)
  return hardwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermVersionUpload::set_hardwareversion(const ::std::string& value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermVersionUpload.hardwareVersion)
}
inline void TermVersionUpload::set_hardwareversion(const char* value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermVersionUpload.hardwareVersion)
}
inline void TermVersionUpload::set_hardwareversion(const char* value, size_t size) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermVersionUpload.hardwareVersion)
}
inline ::std::string* TermVersionUpload::mutable_hardwareversion() {
  set_has_hardwareversion();
  // @@protoc_insertion_point(field_mutable:TermVersionUpload.hardwareVersion)
  return hardwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TermVersionUpload::release_hardwareversion() {
  // @@protoc_insertion_point(field_release:TermVersionUpload.hardwareVersion)
  clear_has_hardwareversion();
  return hardwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermVersionUpload::set_allocated_hardwareversion(::std::string* hardwareversion) {
  if (hardwareversion != NULL) {
    set_has_hardwareversion();
  } else {
    clear_has_hardwareversion();
  }
  hardwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardwareversion);
  // @@protoc_insertion_point(field_set_allocated:TermVersionUpload.hardwareVersion)
}

// required string firmwareVersion = 4;
inline bool TermVersionUpload::has_firmwareversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TermVersionUpload::set_has_firmwareversion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TermVersionUpload::clear_has_firmwareversion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TermVersionUpload::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firmwareversion();
}
inline const ::std::string& TermVersionUpload::firmwareversion() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.firmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermVersionUpload::set_firmwareversion(const ::std::string& value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermVersionUpload.firmwareVersion)
}
inline void TermVersionUpload::set_firmwareversion(const char* value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermVersionUpload.firmwareVersion)
}
inline void TermVersionUpload::set_firmwareversion(const char* value, size_t size) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermVersionUpload.firmwareVersion)
}
inline ::std::string* TermVersionUpload::mutable_firmwareversion() {
  set_has_firmwareversion();
  // @@protoc_insertion_point(field_mutable:TermVersionUpload.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TermVersionUpload::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:TermVersionUpload.firmwareVersion)
  clear_has_firmwareversion();
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermVersionUpload::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    set_has_firmwareversion();
  } else {
    clear_has_firmwareversion();
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:TermVersionUpload.firmwareVersion)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_term_5fversion_5fupload_2eproto__INCLUDED
