// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_air_temperature.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_air_temperature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlAirTemperatureMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlAirTemperatureMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AirTemperatureCtrlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirTemperatureCtrlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AirTemperatureStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirTemperatureStateInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5fair_5ftemperature_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5fair_5ftemperature_2eproto() {
  protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_air_temperature.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlAirTemperatureMessage_descriptor_ = file->message_type(0);
  static const int CtrlAirTemperatureMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirTemperatureMessage, common_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirTemperatureMessage, air_temperature_ctrl_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirTemperatureMessage, air_temperature_state_info_),
  };
  CtrlAirTemperatureMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlAirTemperatureMessage_descriptor_,
      CtrlAirTemperatureMessage::default_instance_,
      CtrlAirTemperatureMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirTemperatureMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlAirTemperatureMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirTemperatureMessage, _internal_metadata_),
      -1);
  AirTemperatureCtrlInfo_descriptor_ = file->message_type(1);
  static const int AirTemperatureCtrlInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureCtrlInfo, set_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureCtrlInfo, result_),
  };
  AirTemperatureCtrlInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirTemperatureCtrlInfo_descriptor_,
      AirTemperatureCtrlInfo::default_instance_,
      AirTemperatureCtrlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureCtrlInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(AirTemperatureCtrlInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureCtrlInfo, _internal_metadata_),
      -1);
  AirTemperatureStateInfo_descriptor_ = file->message_type(2);
  static const int AirTemperatureStateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureStateInfo, set_temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureStateInfo, real_temperature_),
  };
  AirTemperatureStateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirTemperatureStateInfo_descriptor_,
      AirTemperatureStateInfo::default_instance_,
      AirTemperatureStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureStateInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(AirTemperatureStateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTemperatureStateInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5fair_5ftemperature_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlAirTemperatureMessage_descriptor_, &CtrlAirTemperatureMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirTemperatureCtrlInfo_descriptor_, &AirTemperatureCtrlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirTemperatureStateInfo_descriptor_, &AirTemperatureStateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5fair_5ftemperature_2eproto() {
  delete CtrlAirTemperatureMessage::default_instance_;
  delete CtrlAirTemperatureMessage_reflection_;
  delete AirTemperatureCtrlInfo::default_instance_;
  delete AirTemperatureCtrlInfo_reflection_;
  delete AirTemperatureStateInfo::default_instance_;
  delete AirTemperatureStateInfo_reflection_;
}

void protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ctrl_5fcommon_5fparam_5ftbox_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032ctrl_air_temperature.proto\032\034ctrl_commo"
    "n_param_tbox.proto\"\301\001\n\031CtrlAirTemperatur"
    "eMessage\022*\n\014common_param\030\001 \001(\0132\024.CtrlCom"
    "monParamTbox\022:\n\031air_temperature_ctrl_inf"
    "o\030\002 \001(\0132\027.AirTemperatureCtrlInfo\022<\n\032air_"
    "temperature_state_info\030\003 \001(\0132\030.AirTemper"
    "atureStateInfo\"A\n\026AirTemperatureCtrlInfo"
    "\022\027\n\017set_temperature\030\001 \001(\005\022\016\n\006result\030\002 \001("
    "\005\"L\n\027AirTemperatureStateInfo\022\027\n\017set_temp"
    "erature\030\001 \001(\005\022\030\n\020real_temperature\030\002 \001(\005B"
    "6\n\034com.mx.server.remote.v2.beanB\026CtrlAir"
    "TemperatureBean", 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_air_temperature.proto", &protobuf_RegisterTypes);
  CtrlAirTemperatureMessage::default_instance_ = new CtrlAirTemperatureMessage();
  AirTemperatureCtrlInfo::default_instance_ = new AirTemperatureCtrlInfo();
  AirTemperatureStateInfo::default_instance_ = new AirTemperatureStateInfo();
  CtrlAirTemperatureMessage::default_instance_->InitAsDefaultInstance();
  AirTemperatureCtrlInfo::default_instance_->InitAsDefaultInstance();
  AirTemperatureStateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5fair_5ftemperature_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5fair_5ftemperature_2eproto {
  StaticDescriptorInitializer_ctrl_5fair_5ftemperature_2eproto() {
    protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  }
} static_descriptor_initializer_ctrl_5fair_5ftemperature_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlAirTemperatureMessage::kCommonParamFieldNumber;
const int CtrlAirTemperatureMessage::kAirTemperatureCtrlInfoFieldNumber;
const int CtrlAirTemperatureMessage::kAirTemperatureStateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlAirTemperatureMessage::CtrlAirTemperatureMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlAirTemperatureMessage)
}

void CtrlAirTemperatureMessage::InitAsDefaultInstance() {
  common_param_ = const_cast< ::CtrlCommonParamTbox*>(&::CtrlCommonParamTbox::default_instance());
  air_temperature_ctrl_info_ = const_cast< ::AirTemperatureCtrlInfo*>(&::AirTemperatureCtrlInfo::default_instance());
  air_temperature_state_info_ = const_cast< ::AirTemperatureStateInfo*>(&::AirTemperatureStateInfo::default_instance());
}

CtrlAirTemperatureMessage::CtrlAirTemperatureMessage(const CtrlAirTemperatureMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlAirTemperatureMessage)
}

void CtrlAirTemperatureMessage::SharedCtor() {
  _cached_size_ = 0;
  common_param_ = NULL;
  air_temperature_ctrl_info_ = NULL;
  air_temperature_state_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlAirTemperatureMessage::~CtrlAirTemperatureMessage() {
  // @@protoc_insertion_point(destructor:CtrlAirTemperatureMessage)
  SharedDtor();
}

void CtrlAirTemperatureMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_param_;
    delete air_temperature_ctrl_info_;
    delete air_temperature_state_info_;
  }
}

void CtrlAirTemperatureMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlAirTemperatureMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlAirTemperatureMessage_descriptor_;
}

const CtrlAirTemperatureMessage& CtrlAirTemperatureMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  return *default_instance_;
}

CtrlAirTemperatureMessage* CtrlAirTemperatureMessage::default_instance_ = NULL;

CtrlAirTemperatureMessage* CtrlAirTemperatureMessage::New(::google::protobuf::Arena* arena) const {
  CtrlAirTemperatureMessage* n = new CtrlAirTemperatureMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlAirTemperatureMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlAirTemperatureMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_common_param()) {
      if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
    }
    if (has_air_temperature_ctrl_info()) {
      if (air_temperature_ctrl_info_ != NULL) air_temperature_ctrl_info_->::AirTemperatureCtrlInfo::Clear();
    }
    if (has_air_temperature_state_info()) {
      if (air_temperature_state_info_ != NULL) air_temperature_state_info_->::AirTemperatureStateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlAirTemperatureMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlAirTemperatureMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CtrlCommonParamTbox common_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_air_temperature_ctrl_info;
        break;
      }

      // optional .AirTemperatureCtrlInfo air_temperature_ctrl_info = 2;
      case 2: {
        if (tag == 18) {
         parse_air_temperature_ctrl_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_air_temperature_ctrl_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_air_temperature_state_info;
        break;
      }

      // optional .AirTemperatureStateInfo air_temperature_state_info = 3;
      case 3: {
        if (tag == 26) {
         parse_air_temperature_state_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_air_temperature_state_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlAirTemperatureMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlAirTemperatureMessage)
  return false;
#undef DO_
}

void CtrlAirTemperatureMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlAirTemperatureMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_param_, output);
  }

  // optional .AirTemperatureCtrlInfo air_temperature_ctrl_info = 2;
  if (has_air_temperature_ctrl_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->air_temperature_ctrl_info_, output);
  }

  // optional .AirTemperatureStateInfo air_temperature_state_info = 3;
  if (has_air_temperature_state_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->air_temperature_state_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlAirTemperatureMessage)
}

::google::protobuf::uint8* CtrlAirTemperatureMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlAirTemperatureMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_param_, false, target);
  }

  // optional .AirTemperatureCtrlInfo air_temperature_ctrl_info = 2;
  if (has_air_temperature_ctrl_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->air_temperature_ctrl_info_, false, target);
  }

  // optional .AirTemperatureStateInfo air_temperature_state_info = 3;
  if (has_air_temperature_state_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->air_temperature_state_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlAirTemperatureMessage)
  return target;
}

int CtrlAirTemperatureMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlAirTemperatureMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CtrlCommonParamTbox common_param = 1;
    if (has_common_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->common_param_);
    }

    // optional .AirTemperatureCtrlInfo air_temperature_ctrl_info = 2;
    if (has_air_temperature_ctrl_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->air_temperature_ctrl_info_);
    }

    // optional .AirTemperatureStateInfo air_temperature_state_info = 3;
    if (has_air_temperature_state_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->air_temperature_state_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlAirTemperatureMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlAirTemperatureMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlAirTemperatureMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlAirTemperatureMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlAirTemperatureMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlAirTemperatureMessage)
    MergeFrom(*source);
  }
}

void CtrlAirTemperatureMessage::MergeFrom(const CtrlAirTemperatureMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlAirTemperatureMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_param()) {
      mutable_common_param()->::CtrlCommonParamTbox::MergeFrom(from.common_param());
    }
    if (from.has_air_temperature_ctrl_info()) {
      mutable_air_temperature_ctrl_info()->::AirTemperatureCtrlInfo::MergeFrom(from.air_temperature_ctrl_info());
    }
    if (from.has_air_temperature_state_info()) {
      mutable_air_temperature_state_info()->::AirTemperatureStateInfo::MergeFrom(from.air_temperature_state_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlAirTemperatureMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlAirTemperatureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlAirTemperatureMessage::CopyFrom(const CtrlAirTemperatureMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlAirTemperatureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlAirTemperatureMessage::IsInitialized() const {

  return true;
}

void CtrlAirTemperatureMessage::Swap(CtrlAirTemperatureMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlAirTemperatureMessage::InternalSwap(CtrlAirTemperatureMessage* other) {
  std::swap(common_param_, other->common_param_);
  std::swap(air_temperature_ctrl_info_, other->air_temperature_ctrl_info_);
  std::swap(air_temperature_state_info_, other->air_temperature_state_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlAirTemperatureMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlAirTemperatureMessage_descriptor_;
  metadata.reflection = CtrlAirTemperatureMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlAirTemperatureMessage

// optional .CtrlCommonParamTbox common_param = 1;
bool CtrlAirTemperatureMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlAirTemperatureMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlAirTemperatureMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlAirTemperatureMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
const ::CtrlCommonParamTbox& CtrlAirTemperatureMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlAirTemperatureMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
::CtrlCommonParamTbox* CtrlAirTemperatureMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirTemperatureMessage.common_param)
  return common_param_;
}
::CtrlCommonParamTbox* CtrlAirTemperatureMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlAirTemperatureMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
void CtrlAirTemperatureMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirTemperatureMessage.common_param)
}

// optional .AirTemperatureCtrlInfo air_temperature_ctrl_info = 2;
bool CtrlAirTemperatureMessage::has_air_temperature_ctrl_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlAirTemperatureMessage::set_has_air_temperature_ctrl_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlAirTemperatureMessage::clear_has_air_temperature_ctrl_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlAirTemperatureMessage::clear_air_temperature_ctrl_info() {
  if (air_temperature_ctrl_info_ != NULL) air_temperature_ctrl_info_->::AirTemperatureCtrlInfo::Clear();
  clear_has_air_temperature_ctrl_info();
}
const ::AirTemperatureCtrlInfo& CtrlAirTemperatureMessage::air_temperature_ctrl_info() const {
  // @@protoc_insertion_point(field_get:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
  return air_temperature_ctrl_info_ != NULL ? *air_temperature_ctrl_info_ : *default_instance_->air_temperature_ctrl_info_;
}
::AirTemperatureCtrlInfo* CtrlAirTemperatureMessage::mutable_air_temperature_ctrl_info() {
  set_has_air_temperature_ctrl_info();
  if (air_temperature_ctrl_info_ == NULL) {
    air_temperature_ctrl_info_ = new ::AirTemperatureCtrlInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
  return air_temperature_ctrl_info_;
}
::AirTemperatureCtrlInfo* CtrlAirTemperatureMessage::release_air_temperature_ctrl_info() {
  // @@protoc_insertion_point(field_release:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
  clear_has_air_temperature_ctrl_info();
  ::AirTemperatureCtrlInfo* temp = air_temperature_ctrl_info_;
  air_temperature_ctrl_info_ = NULL;
  return temp;
}
void CtrlAirTemperatureMessage::set_allocated_air_temperature_ctrl_info(::AirTemperatureCtrlInfo* air_temperature_ctrl_info) {
  delete air_temperature_ctrl_info_;
  air_temperature_ctrl_info_ = air_temperature_ctrl_info;
  if (air_temperature_ctrl_info) {
    set_has_air_temperature_ctrl_info();
  } else {
    clear_has_air_temperature_ctrl_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
}

// optional .AirTemperatureStateInfo air_temperature_state_info = 3;
bool CtrlAirTemperatureMessage::has_air_temperature_state_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlAirTemperatureMessage::set_has_air_temperature_state_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlAirTemperatureMessage::clear_has_air_temperature_state_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlAirTemperatureMessage::clear_air_temperature_state_info() {
  if (air_temperature_state_info_ != NULL) air_temperature_state_info_->::AirTemperatureStateInfo::Clear();
  clear_has_air_temperature_state_info();
}
const ::AirTemperatureStateInfo& CtrlAirTemperatureMessage::air_temperature_state_info() const {
  // @@protoc_insertion_point(field_get:CtrlAirTemperatureMessage.air_temperature_state_info)
  return air_temperature_state_info_ != NULL ? *air_temperature_state_info_ : *default_instance_->air_temperature_state_info_;
}
::AirTemperatureStateInfo* CtrlAirTemperatureMessage::mutable_air_temperature_state_info() {
  set_has_air_temperature_state_info();
  if (air_temperature_state_info_ == NULL) {
    air_temperature_state_info_ = new ::AirTemperatureStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirTemperatureMessage.air_temperature_state_info)
  return air_temperature_state_info_;
}
::AirTemperatureStateInfo* CtrlAirTemperatureMessage::release_air_temperature_state_info() {
  // @@protoc_insertion_point(field_release:CtrlAirTemperatureMessage.air_temperature_state_info)
  clear_has_air_temperature_state_info();
  ::AirTemperatureStateInfo* temp = air_temperature_state_info_;
  air_temperature_state_info_ = NULL;
  return temp;
}
void CtrlAirTemperatureMessage::set_allocated_air_temperature_state_info(::AirTemperatureStateInfo* air_temperature_state_info) {
  delete air_temperature_state_info_;
  air_temperature_state_info_ = air_temperature_state_info;
  if (air_temperature_state_info) {
    set_has_air_temperature_state_info();
  } else {
    clear_has_air_temperature_state_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirTemperatureMessage.air_temperature_state_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirTemperatureCtrlInfo::kSetTemperatureFieldNumber;
const int AirTemperatureCtrlInfo::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirTemperatureCtrlInfo::AirTemperatureCtrlInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AirTemperatureCtrlInfo)
}

void AirTemperatureCtrlInfo::InitAsDefaultInstance() {
}

AirTemperatureCtrlInfo::AirTemperatureCtrlInfo(const AirTemperatureCtrlInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AirTemperatureCtrlInfo)
}

void AirTemperatureCtrlInfo::SharedCtor() {
  _cached_size_ = 0;
  set_temperature_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AirTemperatureCtrlInfo::~AirTemperatureCtrlInfo() {
  // @@protoc_insertion_point(destructor:AirTemperatureCtrlInfo)
  SharedDtor();
}

void AirTemperatureCtrlInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AirTemperatureCtrlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirTemperatureCtrlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirTemperatureCtrlInfo_descriptor_;
}

const AirTemperatureCtrlInfo& AirTemperatureCtrlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  return *default_instance_;
}

AirTemperatureCtrlInfo* AirTemperatureCtrlInfo::default_instance_ = NULL;

AirTemperatureCtrlInfo* AirTemperatureCtrlInfo::New(::google::protobuf::Arena* arena) const {
  AirTemperatureCtrlInfo* n = new AirTemperatureCtrlInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirTemperatureCtrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AirTemperatureCtrlInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AirTemperatureCtrlInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AirTemperatureCtrlInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(set_temperature_, result_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AirTemperatureCtrlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AirTemperatureCtrlInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 set_temperature = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_temperature_)));
          set_has_set_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AirTemperatureCtrlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AirTemperatureCtrlInfo)
  return false;
#undef DO_
}

void AirTemperatureCtrlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AirTemperatureCtrlInfo)
  // optional int32 set_temperature = 1;
  if (has_set_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->set_temperature(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AirTemperatureCtrlInfo)
}

::google::protobuf::uint8* AirTemperatureCtrlInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirTemperatureCtrlInfo)
  // optional int32 set_temperature = 1;
  if (has_set_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->set_temperature(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirTemperatureCtrlInfo)
  return target;
}

int AirTemperatureCtrlInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AirTemperatureCtrlInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 set_temperature = 1;
    if (has_set_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_temperature());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirTemperatureCtrlInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AirTemperatureCtrlInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirTemperatureCtrlInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirTemperatureCtrlInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AirTemperatureCtrlInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AirTemperatureCtrlInfo)
    MergeFrom(*source);
  }
}

void AirTemperatureCtrlInfo::MergeFrom(const AirTemperatureCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AirTemperatureCtrlInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_temperature()) {
      set_set_temperature(from.set_temperature());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AirTemperatureCtrlInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AirTemperatureCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirTemperatureCtrlInfo::CopyFrom(const AirTemperatureCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirTemperatureCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirTemperatureCtrlInfo::IsInitialized() const {

  return true;
}

void AirTemperatureCtrlInfo::Swap(AirTemperatureCtrlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirTemperatureCtrlInfo::InternalSwap(AirTemperatureCtrlInfo* other) {
  std::swap(set_temperature_, other->set_temperature_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirTemperatureCtrlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirTemperatureCtrlInfo_descriptor_;
  metadata.reflection = AirTemperatureCtrlInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirTemperatureCtrlInfo

// optional int32 set_temperature = 1;
bool AirTemperatureCtrlInfo::has_set_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AirTemperatureCtrlInfo::set_has_set_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
void AirTemperatureCtrlInfo::clear_has_set_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
void AirTemperatureCtrlInfo::clear_set_temperature() {
  set_temperature_ = 0;
  clear_has_set_temperature();
}
 ::google::protobuf::int32 AirTemperatureCtrlInfo::set_temperature() const {
  // @@protoc_insertion_point(field_get:AirTemperatureCtrlInfo.set_temperature)
  return set_temperature_;
}
 void AirTemperatureCtrlInfo::set_set_temperature(::google::protobuf::int32 value) {
  set_has_set_temperature();
  set_temperature_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureCtrlInfo.set_temperature)
}

// optional int32 result = 2;
bool AirTemperatureCtrlInfo::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AirTemperatureCtrlInfo::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void AirTemperatureCtrlInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void AirTemperatureCtrlInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 AirTemperatureCtrlInfo::result() const {
  // @@protoc_insertion_point(field_get:AirTemperatureCtrlInfo.result)
  return result_;
}
 void AirTemperatureCtrlInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureCtrlInfo.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirTemperatureStateInfo::kSetTemperatureFieldNumber;
const int AirTemperatureStateInfo::kRealTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirTemperatureStateInfo::AirTemperatureStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AirTemperatureStateInfo)
}

void AirTemperatureStateInfo::InitAsDefaultInstance() {
}

AirTemperatureStateInfo::AirTemperatureStateInfo(const AirTemperatureStateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AirTemperatureStateInfo)
}

void AirTemperatureStateInfo::SharedCtor() {
  _cached_size_ = 0;
  set_temperature_ = 0;
  real_temperature_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AirTemperatureStateInfo::~AirTemperatureStateInfo() {
  // @@protoc_insertion_point(destructor:AirTemperatureStateInfo)
  SharedDtor();
}

void AirTemperatureStateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AirTemperatureStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirTemperatureStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirTemperatureStateInfo_descriptor_;
}

const AirTemperatureStateInfo& AirTemperatureStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  return *default_instance_;
}

AirTemperatureStateInfo* AirTemperatureStateInfo::default_instance_ = NULL;

AirTemperatureStateInfo* AirTemperatureStateInfo::New(::google::protobuf::Arena* arena) const {
  AirTemperatureStateInfo* n = new AirTemperatureStateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirTemperatureStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AirTemperatureStateInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AirTemperatureStateInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AirTemperatureStateInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(set_temperature_, real_temperature_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AirTemperatureStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AirTemperatureStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 set_temperature = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_temperature_)));
          set_has_set_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_real_temperature;
        break;
      }

      // optional int32 real_temperature = 2;
      case 2: {
        if (tag == 16) {
         parse_real_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_temperature_)));
          set_has_real_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AirTemperatureStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AirTemperatureStateInfo)
  return false;
#undef DO_
}

void AirTemperatureStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AirTemperatureStateInfo)
  // optional int32 set_temperature = 1;
  if (has_set_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->set_temperature(), output);
  }

  // optional int32 real_temperature = 2;
  if (has_real_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->real_temperature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AirTemperatureStateInfo)
}

::google::protobuf::uint8* AirTemperatureStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirTemperatureStateInfo)
  // optional int32 set_temperature = 1;
  if (has_set_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->set_temperature(), target);
  }

  // optional int32 real_temperature = 2;
  if (has_real_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->real_temperature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirTemperatureStateInfo)
  return target;
}

int AirTemperatureStateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AirTemperatureStateInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 set_temperature = 1;
    if (has_set_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_temperature());
    }

    // optional int32 real_temperature = 2;
    if (has_real_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_temperature());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirTemperatureStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AirTemperatureStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirTemperatureStateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirTemperatureStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AirTemperatureStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AirTemperatureStateInfo)
    MergeFrom(*source);
  }
}

void AirTemperatureStateInfo::MergeFrom(const AirTemperatureStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AirTemperatureStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_temperature()) {
      set_set_temperature(from.set_temperature());
    }
    if (from.has_real_temperature()) {
      set_real_temperature(from.real_temperature());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AirTemperatureStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AirTemperatureStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirTemperatureStateInfo::CopyFrom(const AirTemperatureStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirTemperatureStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirTemperatureStateInfo::IsInitialized() const {

  return true;
}

void AirTemperatureStateInfo::Swap(AirTemperatureStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirTemperatureStateInfo::InternalSwap(AirTemperatureStateInfo* other) {
  std::swap(set_temperature_, other->set_temperature_);
  std::swap(real_temperature_, other->real_temperature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirTemperatureStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirTemperatureStateInfo_descriptor_;
  metadata.reflection = AirTemperatureStateInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirTemperatureStateInfo

// optional int32 set_temperature = 1;
bool AirTemperatureStateInfo::has_set_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AirTemperatureStateInfo::set_has_set_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
void AirTemperatureStateInfo::clear_has_set_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
void AirTemperatureStateInfo::clear_set_temperature() {
  set_temperature_ = 0;
  clear_has_set_temperature();
}
 ::google::protobuf::int32 AirTemperatureStateInfo::set_temperature() const {
  // @@protoc_insertion_point(field_get:AirTemperatureStateInfo.set_temperature)
  return set_temperature_;
}
 void AirTemperatureStateInfo::set_set_temperature(::google::protobuf::int32 value) {
  set_has_set_temperature();
  set_temperature_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureStateInfo.set_temperature)
}

// optional int32 real_temperature = 2;
bool AirTemperatureStateInfo::has_real_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AirTemperatureStateInfo::set_has_real_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
void AirTemperatureStateInfo::clear_has_real_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
void AirTemperatureStateInfo::clear_real_temperature() {
  real_temperature_ = 0;
  clear_has_real_temperature();
}
 ::google::protobuf::int32 AirTemperatureStateInfo::real_temperature() const {
  // @@protoc_insertion_point(field_get:AirTemperatureStateInfo.real_temperature)
  return real_temperature_;
}
 void AirTemperatureStateInfo::set_real_temperature(::google::protobuf::int32 value) {
  set_has_real_temperature();
  real_temperature_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureStateInfo.real_temperature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
