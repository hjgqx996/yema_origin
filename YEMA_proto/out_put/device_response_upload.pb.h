// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_response_upload.proto

#ifndef PROTOBUF_device_5fresponse_5fupload_2eproto__INCLUDED
#define PROTOBUF_device_5fresponse_5fupload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "device_upload_common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_device_5fresponse_5fupload_2eproto();
void protobuf_AssignDesc_device_5fresponse_5fupload_2eproto();
void protobuf_ShutdownFile_device_5fresponse_5fupload_2eproto();

class DeviceResponseUploadMessage;

// ===================================================================

class DeviceResponseUploadMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceResponseUploadMessage) */ {
 public:
  DeviceResponseUploadMessage();
  virtual ~DeviceResponseUploadMessage();

  DeviceResponseUploadMessage(const DeviceResponseUploadMessage& from);

  inline DeviceResponseUploadMessage& operator=(const DeviceResponseUploadMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceResponseUploadMessage& default_instance();

  void Swap(DeviceResponseUploadMessage* other);

  // implements Message ----------------------------------------------

  inline DeviceResponseUploadMessage* New() const { return New(NULL); }

  DeviceResponseUploadMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceResponseUploadMessage& from);
  void MergeFrom(const DeviceResponseUploadMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceResponseUploadMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DeviceUploadCommonMessage device_upload_common = 1;
  bool has_device_upload_common() const;
  void clear_device_upload_common();
  static const int kDeviceUploadCommonFieldNumber = 1;
  const ::DeviceUploadCommonMessage& device_upload_common() const;
  ::DeviceUploadCommonMessage* mutable_device_upload_common();
  ::DeviceUploadCommonMessage* release_device_upload_common();
  void set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common);

  // optional uint32 resp_code = 2;
  bool has_resp_code() const;
  void clear_resp_code();
  static const int kRespCodeFieldNumber = 2;
  ::google::protobuf::uint32 resp_code() const;
  void set_resp_code(::google::protobuf::uint32 value);

  // optional string full_name = 4;
  bool has_full_name() const;
  void clear_full_name();
  static const int kFullNameFieldNumber = 4;
  const ::std::string& full_name() const;
  void set_full_name(const ::std::string& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  ::std::string* mutable_full_name();
  ::std::string* release_full_name();
  void set_allocated_full_name(::std::string* full_name);

  // optional string params = 6;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 6;
  const ::std::string& params() const;
  void set_params(const ::std::string& value);
  void set_params(const char* value);
  void set_params(const char* value, size_t size);
  ::std::string* mutable_params();
  ::std::string* release_params();
  void set_allocated_params(::std::string* params);

  // optional string upload_url = 8;
  bool has_upload_url() const;
  void clear_upload_url();
  static const int kUploadUrlFieldNumber = 8;
  const ::std::string& upload_url() const;
  void set_upload_url(const ::std::string& value);
  void set_upload_url(const char* value);
  void set_upload_url(const char* value, size_t size);
  ::std::string* mutable_upload_url();
  ::std::string* release_upload_url();
  void set_allocated_upload_url(::std::string* upload_url);

  // @@protoc_insertion_point(class_scope:DeviceResponseUploadMessage)
 private:
  inline void set_has_device_upload_common();
  inline void clear_has_device_upload_common();
  inline void set_has_resp_code();
  inline void clear_has_resp_code();
  inline void set_has_full_name();
  inline void clear_has_full_name();
  inline void set_has_params();
  inline void clear_has_params();
  inline void set_has_upload_url();
  inline void clear_has_upload_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DeviceUploadCommonMessage* device_upload_common_;
  ::google::protobuf::internal::ArenaStringPtr full_name_;
  ::google::protobuf::internal::ArenaStringPtr params_;
  ::google::protobuf::internal::ArenaStringPtr upload_url_;
  ::google::protobuf::uint32 resp_code_;
  friend void  protobuf_AddDesc_device_5fresponse_5fupload_2eproto();
  friend void protobuf_AssignDesc_device_5fresponse_5fupload_2eproto();
  friend void protobuf_ShutdownFile_device_5fresponse_5fupload_2eproto();

  void InitAsDefaultInstance();
  static DeviceResponseUploadMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceResponseUploadMessage

// optional .DeviceUploadCommonMessage device_upload_common = 1;
inline bool DeviceResponseUploadMessage::has_device_upload_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceResponseUploadMessage::set_has_device_upload_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceResponseUploadMessage::clear_has_device_upload_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceResponseUploadMessage::clear_device_upload_common() {
  if (device_upload_common_ != NULL) device_upload_common_->::DeviceUploadCommonMessage::Clear();
  clear_has_device_upload_common();
}
inline const ::DeviceUploadCommonMessage& DeviceResponseUploadMessage::device_upload_common() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.device_upload_common)
  return device_upload_common_ != NULL ? *device_upload_common_ : *default_instance_->device_upload_common_;
}
inline ::DeviceUploadCommonMessage* DeviceResponseUploadMessage::mutable_device_upload_common() {
  set_has_device_upload_common();
  if (device_upload_common_ == NULL) {
    device_upload_common_ = new ::DeviceUploadCommonMessage;
  }
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.device_upload_common)
  return device_upload_common_;
}
inline ::DeviceUploadCommonMessage* DeviceResponseUploadMessage::release_device_upload_common() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.device_upload_common)
  clear_has_device_upload_common();
  ::DeviceUploadCommonMessage* temp = device_upload_common_;
  device_upload_common_ = NULL;
  return temp;
}
inline void DeviceResponseUploadMessage::set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common) {
  delete device_upload_common_;
  device_upload_common_ = device_upload_common;
  if (device_upload_common) {
    set_has_device_upload_common();
  } else {
    clear_has_device_upload_common();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.device_upload_common)
}

// optional uint32 resp_code = 2;
inline bool DeviceResponseUploadMessage::has_resp_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceResponseUploadMessage::set_has_resp_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceResponseUploadMessage::clear_has_resp_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceResponseUploadMessage::clear_resp_code() {
  resp_code_ = 0u;
  clear_has_resp_code();
}
inline ::google::protobuf::uint32 DeviceResponseUploadMessage::resp_code() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.resp_code)
  return resp_code_;
}
inline void DeviceResponseUploadMessage::set_resp_code(::google::protobuf::uint32 value) {
  set_has_resp_code();
  resp_code_ = value;
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.resp_code)
}

// optional string full_name = 4;
inline bool DeviceResponseUploadMessage::has_full_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceResponseUploadMessage::set_has_full_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceResponseUploadMessage::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceResponseUploadMessage::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_name();
}
inline const ::std::string& DeviceResponseUploadMessage::full_name() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.full_name)
  return full_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceResponseUploadMessage::set_full_name(const ::std::string& value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.full_name)
}
inline void DeviceResponseUploadMessage::set_full_name(const char* value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceResponseUploadMessage.full_name)
}
inline void DeviceResponseUploadMessage::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceResponseUploadMessage.full_name)
}
inline ::std::string* DeviceResponseUploadMessage::mutable_full_name() {
  set_has_full_name();
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceResponseUploadMessage::release_full_name() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.full_name)
  clear_has_full_name();
  return full_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceResponseUploadMessage::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    set_has_full_name();
  } else {
    clear_has_full_name();
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.full_name)
}

// optional string params = 6;
inline bool DeviceResponseUploadMessage::has_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceResponseUploadMessage::set_has_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceResponseUploadMessage::clear_has_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceResponseUploadMessage::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
inline const ::std::string& DeviceResponseUploadMessage::params() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.params)
  return params_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceResponseUploadMessage::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.params)
}
inline void DeviceResponseUploadMessage::set_params(const char* value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceResponseUploadMessage.params)
}
inline void DeviceResponseUploadMessage::set_params(const char* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceResponseUploadMessage.params)
}
inline ::std::string* DeviceResponseUploadMessage::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceResponseUploadMessage::release_params() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.params)
  clear_has_params();
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceResponseUploadMessage::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.params)
}

// optional string upload_url = 8;
inline bool DeviceResponseUploadMessage::has_upload_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceResponseUploadMessage::set_has_upload_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceResponseUploadMessage::clear_has_upload_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceResponseUploadMessage::clear_upload_url() {
  upload_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_url();
}
inline const ::std::string& DeviceResponseUploadMessage::upload_url() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.upload_url)
  return upload_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceResponseUploadMessage::set_upload_url(const ::std::string& value) {
  set_has_upload_url();
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.upload_url)
}
inline void DeviceResponseUploadMessage::set_upload_url(const char* value) {
  set_has_upload_url();
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceResponseUploadMessage.upload_url)
}
inline void DeviceResponseUploadMessage::set_upload_url(const char* value, size_t size) {
  set_has_upload_url();
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceResponseUploadMessage.upload_url)
}
inline ::std::string* DeviceResponseUploadMessage::mutable_upload_url() {
  set_has_upload_url();
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.upload_url)
  return upload_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceResponseUploadMessage::release_upload_url() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.upload_url)
  clear_has_upload_url();
  return upload_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceResponseUploadMessage::set_allocated_upload_url(::std::string* upload_url) {
  if (upload_url != NULL) {
    set_has_upload_url();
  } else {
    clear_has_upload_url();
  }
  upload_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_url);
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.upload_url)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_5fresponse_5fupload_2eproto__INCLUDED
