// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_diagnosis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_diagnosis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlDiagnosisMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlDiagnosisMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiagnosisTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiagnosisTypeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DiagnosisType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5fdiagnosis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5fdiagnosis_2eproto() {
  protobuf_AddDesc_ctrl_5fdiagnosis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_diagnosis.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlDiagnosisMessage_descriptor_ = file->message_type(0);
  static const int CtrlDiagnosisMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlDiagnosisMessage, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlDiagnosisMessage, diagnosis_type_info_),
  };
  CtrlDiagnosisMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlDiagnosisMessage_descriptor_,
      CtrlDiagnosisMessage::default_instance_,
      CtrlDiagnosisMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlDiagnosisMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlDiagnosisMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlDiagnosisMessage, _internal_metadata_),
      -1);
  DiagnosisTypeInfo_descriptor_ = file->message_type(1);
  static const int DiagnosisTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosisTypeInfo, diagnosis_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosisTypeInfo, err_code_),
  };
  DiagnosisTypeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DiagnosisTypeInfo_descriptor_,
      DiagnosisTypeInfo::default_instance_,
      DiagnosisTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosisTypeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(DiagnosisTypeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosisTypeInfo, _internal_metadata_),
      -1);
  DiagnosisType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5fdiagnosis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlDiagnosisMessage_descriptor_, &CtrlDiagnosisMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DiagnosisTypeInfo_descriptor_, &DiagnosisTypeInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5fdiagnosis_2eproto() {
  delete CtrlDiagnosisMessage::default_instance_;
  delete CtrlDiagnosisMessage_reflection_;
  delete DiagnosisTypeInfo::default_instance_;
  delete DiagnosisTypeInfo_reflection_;
}

void protobuf_AddDesc_ctrl_5fdiagnosis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5fdiagnosis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ctrl_diagnosis.proto\"[\n\024CtrlDiagnosisM"
    "essage\022\022\n\nrequest_id\030\001 \001(\006\022/\n\023diagnosis_"
    "type_info\030\002 \003(\0132\022.DiagnosisTypeInfo\"M\n\021D"
    "iagnosisTypeInfo\022&\n\016diagnosis_type\030\001 \001(\016"
    "2\016.DiagnosisType\022\020\n\010err_code\030\002 \003(\r*\320\003\n\rD"
    "iagnosisType\022\022\n\rDIAG_TYPE_ALL\020\377\001\022\021\n\rDIAG"
    "_TYPE_AFS\020\001\022\021\n\rDIAG_TYPE_SAS\020\002\022\021\n\rDIAG_T"
    "YPE_APA\020\003\022\021\n\rDIAG_TYPE_SRS\020\004\022\021\n\rDIAG_TYP"
    "E_BCM\020\005\022\020\n\014DIAG_TYPE_IC\020\006\022\022\n\016DIAG_TYPE_P"
    "EPS\020\007\022\020\n\014DIAG_TYPE_AC\020\010\022\022\n\016DIAG_TYPE_TPM"
    "S\020\t\022\021\n\rDIAG_TYPE_DVD\020\n\022\021\n\rDIAG_TYPE_PRM\020"
    "\013\022\021\n\rDIAG_TYPE_SCM\020\014\022\022\n\016DIAG_TYPE_TBOX\020\r"
    "\022\021\n\rDIAG_TYPE_NVS\020\016\022\021\n\rDIAG_TYPE_HUD\020\017\022\021"
    "\n\rDIAG_TYPE_AVM\020\020\022\021\n\rDIAG_TYPE_LDW\020\021\022\021\n\r"
    "DIAG_TYPE_BSD\020\022\022\020\n\014DIAG_TYPE_DR\020\023\022\020\n\014DIA"
    "G_TYPE_GW\020\024\022\033\n\027DIAG_TYPE_AC_COMPRESSOR\020\025"
    "\022\023\n\017DIAG_TYPE_MP5CP\020\026B1\n\034com.mx.server.r"
    "emote.v2.beanB\021CtrlDiagnosisBean", 712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_diagnosis.proto", &protobuf_RegisterTypes);
  CtrlDiagnosisMessage::default_instance_ = new CtrlDiagnosisMessage();
  DiagnosisTypeInfo::default_instance_ = new DiagnosisTypeInfo();
  CtrlDiagnosisMessage::default_instance_->InitAsDefaultInstance();
  DiagnosisTypeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5fdiagnosis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5fdiagnosis_2eproto {
  StaticDescriptorInitializer_ctrl_5fdiagnosis_2eproto() {
    protobuf_AddDesc_ctrl_5fdiagnosis_2eproto();
  }
} static_descriptor_initializer_ctrl_5fdiagnosis_2eproto_;
const ::google::protobuf::EnumDescriptor* DiagnosisType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiagnosisType_descriptor_;
}
bool DiagnosisType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlDiagnosisMessage::kRequestIdFieldNumber;
const int CtrlDiagnosisMessage::kDiagnosisTypeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlDiagnosisMessage::CtrlDiagnosisMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlDiagnosisMessage)
}

void CtrlDiagnosisMessage::InitAsDefaultInstance() {
}

CtrlDiagnosisMessage::CtrlDiagnosisMessage(const CtrlDiagnosisMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlDiagnosisMessage)
}

void CtrlDiagnosisMessage::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlDiagnosisMessage::~CtrlDiagnosisMessage() {
  // @@protoc_insertion_point(destructor:CtrlDiagnosisMessage)
  SharedDtor();
}

void CtrlDiagnosisMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CtrlDiagnosisMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlDiagnosisMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlDiagnosisMessage_descriptor_;
}

const CtrlDiagnosisMessage& CtrlDiagnosisMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fdiagnosis_2eproto();
  return *default_instance_;
}

CtrlDiagnosisMessage* CtrlDiagnosisMessage::default_instance_ = NULL;

CtrlDiagnosisMessage* CtrlDiagnosisMessage::New(::google::protobuf::Arena* arena) const {
  CtrlDiagnosisMessage* n = new CtrlDiagnosisMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlDiagnosisMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlDiagnosisMessage)
  request_id_ = GOOGLE_ULONGLONG(0);
  diagnosis_type_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlDiagnosisMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlDiagnosisMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diagnosis_type_info;
        break;
      }

      // repeated .DiagnosisTypeInfo diagnosis_type_info = 2;
      case 2: {
        if (tag == 18) {
         parse_diagnosis_type_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_diagnosis_type_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_diagnosis_type_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_diagnosis_type_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlDiagnosisMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlDiagnosisMessage)
  return false;
#undef DO_
}

void CtrlDiagnosisMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlDiagnosisMessage)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // repeated .DiagnosisTypeInfo diagnosis_type_info = 2;
  for (unsigned int i = 0, n = this->diagnosis_type_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->diagnosis_type_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlDiagnosisMessage)
}

::google::protobuf::uint8* CtrlDiagnosisMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlDiagnosisMessage)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // repeated .DiagnosisTypeInfo diagnosis_type_info = 2;
  for (unsigned int i = 0, n = this->diagnosis_type_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->diagnosis_type_info(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlDiagnosisMessage)
  return target;
}

int CtrlDiagnosisMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlDiagnosisMessage)
  int total_size = 0;

  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    total_size += 1 + 8;
  }

  // repeated .DiagnosisTypeInfo diagnosis_type_info = 2;
  total_size += 1 * this->diagnosis_type_info_size();
  for (int i = 0; i < this->diagnosis_type_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diagnosis_type_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlDiagnosisMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlDiagnosisMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlDiagnosisMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlDiagnosisMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlDiagnosisMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlDiagnosisMessage)
    MergeFrom(*source);
  }
}

void CtrlDiagnosisMessage::MergeFrom(const CtrlDiagnosisMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlDiagnosisMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  diagnosis_type_info_.MergeFrom(from.diagnosis_type_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlDiagnosisMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlDiagnosisMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlDiagnosisMessage::CopyFrom(const CtrlDiagnosisMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlDiagnosisMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlDiagnosisMessage::IsInitialized() const {

  return true;
}

void CtrlDiagnosisMessage::Swap(CtrlDiagnosisMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlDiagnosisMessage::InternalSwap(CtrlDiagnosisMessage* other) {
  std::swap(request_id_, other->request_id_);
  diagnosis_type_info_.UnsafeArenaSwap(&other->diagnosis_type_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlDiagnosisMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlDiagnosisMessage_descriptor_;
  metadata.reflection = CtrlDiagnosisMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlDiagnosisMessage

// optional fixed64 request_id = 1;
bool CtrlDiagnosisMessage::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlDiagnosisMessage::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlDiagnosisMessage::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlDiagnosisMessage::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
 ::google::protobuf::uint64 CtrlDiagnosisMessage::request_id() const {
  // @@protoc_insertion_point(field_get:CtrlDiagnosisMessage.request_id)
  return request_id_;
}
 void CtrlDiagnosisMessage::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:CtrlDiagnosisMessage.request_id)
}

// repeated .DiagnosisTypeInfo diagnosis_type_info = 2;
int CtrlDiagnosisMessage::diagnosis_type_info_size() const {
  return diagnosis_type_info_.size();
}
void CtrlDiagnosisMessage::clear_diagnosis_type_info() {
  diagnosis_type_info_.Clear();
}
const ::DiagnosisTypeInfo& CtrlDiagnosisMessage::diagnosis_type_info(int index) const {
  // @@protoc_insertion_point(field_get:CtrlDiagnosisMessage.diagnosis_type_info)
  return diagnosis_type_info_.Get(index);
}
::DiagnosisTypeInfo* CtrlDiagnosisMessage::mutable_diagnosis_type_info(int index) {
  // @@protoc_insertion_point(field_mutable:CtrlDiagnosisMessage.diagnosis_type_info)
  return diagnosis_type_info_.Mutable(index);
}
::DiagnosisTypeInfo* CtrlDiagnosisMessage::add_diagnosis_type_info() {
  // @@protoc_insertion_point(field_add:CtrlDiagnosisMessage.diagnosis_type_info)
  return diagnosis_type_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::DiagnosisTypeInfo >*
CtrlDiagnosisMessage::mutable_diagnosis_type_info() {
  // @@protoc_insertion_point(field_mutable_list:CtrlDiagnosisMessage.diagnosis_type_info)
  return &diagnosis_type_info_;
}
const ::google::protobuf::RepeatedPtrField< ::DiagnosisTypeInfo >&
CtrlDiagnosisMessage::diagnosis_type_info() const {
  // @@protoc_insertion_point(field_list:CtrlDiagnosisMessage.diagnosis_type_info)
  return diagnosis_type_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosisTypeInfo::kDiagnosisTypeFieldNumber;
const int DiagnosisTypeInfo::kErrCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosisTypeInfo::DiagnosisTypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DiagnosisTypeInfo)
}

void DiagnosisTypeInfo::InitAsDefaultInstance() {
}

DiagnosisTypeInfo::DiagnosisTypeInfo(const DiagnosisTypeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DiagnosisTypeInfo)
}

void DiagnosisTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  diagnosis_type_ = 255;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiagnosisTypeInfo::~DiagnosisTypeInfo() {
  // @@protoc_insertion_point(destructor:DiagnosisTypeInfo)
  SharedDtor();
}

void DiagnosisTypeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiagnosisTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagnosisTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiagnosisTypeInfo_descriptor_;
}

const DiagnosisTypeInfo& DiagnosisTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fdiagnosis_2eproto();
  return *default_instance_;
}

DiagnosisTypeInfo* DiagnosisTypeInfo::default_instance_ = NULL;

DiagnosisTypeInfo* DiagnosisTypeInfo::New(::google::protobuf::Arena* arena) const {
  DiagnosisTypeInfo* n = new DiagnosisTypeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiagnosisTypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DiagnosisTypeInfo)
  diagnosis_type_ = 255;
  err_code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DiagnosisTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DiagnosisTypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DiagnosisType diagnosis_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DiagnosisType_IsValid(value)) {
            set_diagnosis_type(static_cast< ::DiagnosisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_err_code;
        break;
      }

      // repeated uint32 err_code = 2;
      case 2: {
        if (tag == 16) {
         parse_err_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_err_code())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_err_code())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_err_code;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DiagnosisTypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DiagnosisTypeInfo)
  return false;
#undef DO_
}

void DiagnosisTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DiagnosisTypeInfo)
  // optional .DiagnosisType diagnosis_type = 1;
  if (has_diagnosis_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->diagnosis_type(), output);
  }

  // repeated uint32 err_code = 2;
  for (int i = 0; i < this->err_code_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->err_code(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DiagnosisTypeInfo)
}

::google::protobuf::uint8* DiagnosisTypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiagnosisTypeInfo)
  // optional .DiagnosisType diagnosis_type = 1;
  if (has_diagnosis_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->diagnosis_type(), target);
  }

  // repeated uint32 err_code = 2;
  for (int i = 0; i < this->err_code_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->err_code(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiagnosisTypeInfo)
  return target;
}

int DiagnosisTypeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DiagnosisTypeInfo)
  int total_size = 0;

  // optional .DiagnosisType diagnosis_type = 1;
  if (has_diagnosis_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->diagnosis_type());
  }

  // repeated uint32 err_code = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->err_code_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->err_code(i));
    }
    total_size += 1 * this->err_code_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagnosisTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DiagnosisTypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DiagnosisTypeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DiagnosisTypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DiagnosisTypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DiagnosisTypeInfo)
    MergeFrom(*source);
  }
}

void DiagnosisTypeInfo::MergeFrom(const DiagnosisTypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DiagnosisTypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  err_code_.MergeFrom(from.err_code_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diagnosis_type()) {
      set_diagnosis_type(from.diagnosis_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DiagnosisTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DiagnosisTypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosisTypeInfo::CopyFrom(const DiagnosisTypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DiagnosisTypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosisTypeInfo::IsInitialized() const {

  return true;
}

void DiagnosisTypeInfo::Swap(DiagnosisTypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosisTypeInfo::InternalSwap(DiagnosisTypeInfo* other) {
  std::swap(diagnosis_type_, other->diagnosis_type_);
  err_code_.UnsafeArenaSwap(&other->err_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiagnosisTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiagnosisTypeInfo_descriptor_;
  metadata.reflection = DiagnosisTypeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiagnosisTypeInfo

// optional .DiagnosisType diagnosis_type = 1;
bool DiagnosisTypeInfo::has_diagnosis_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DiagnosisTypeInfo::set_has_diagnosis_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DiagnosisTypeInfo::clear_has_diagnosis_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DiagnosisTypeInfo::clear_diagnosis_type() {
  diagnosis_type_ = 255;
  clear_has_diagnosis_type();
}
 ::DiagnosisType DiagnosisTypeInfo::diagnosis_type() const {
  // @@protoc_insertion_point(field_get:DiagnosisTypeInfo.diagnosis_type)
  return static_cast< ::DiagnosisType >(diagnosis_type_);
}
 void DiagnosisTypeInfo::set_diagnosis_type(::DiagnosisType value) {
  assert(::DiagnosisType_IsValid(value));
  set_has_diagnosis_type();
  diagnosis_type_ = value;
  // @@protoc_insertion_point(field_set:DiagnosisTypeInfo.diagnosis_type)
}

// repeated uint32 err_code = 2;
int DiagnosisTypeInfo::err_code_size() const {
  return err_code_.size();
}
void DiagnosisTypeInfo::clear_err_code() {
  err_code_.Clear();
}
 ::google::protobuf::uint32 DiagnosisTypeInfo::err_code(int index) const {
  // @@protoc_insertion_point(field_get:DiagnosisTypeInfo.err_code)
  return err_code_.Get(index);
}
 void DiagnosisTypeInfo::set_err_code(int index, ::google::protobuf::uint32 value) {
  err_code_.Set(index, value);
  // @@protoc_insertion_point(field_set:DiagnosisTypeInfo.err_code)
}
 void DiagnosisTypeInfo::add_err_code(::google::protobuf::uint32 value) {
  err_code_.Add(value);
  // @@protoc_insertion_point(field_add:DiagnosisTypeInfo.err_code)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DiagnosisTypeInfo::err_code() const {
  // @@protoc_insertion_point(field_list:DiagnosisTypeInfo.err_code)
  return err_code_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DiagnosisTypeInfo::mutable_err_code() {
  // @@protoc_insertion_point(field_mutable_list:DiagnosisTypeInfo.err_code)
  return &err_code_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
