// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location_offset_info.proto

#ifndef PROTOBUF_location_5foffset_5finfo_2eproto__INCLUDED
#define PROTOBUF_location_5foffset_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_location_5foffset_5finfo_2eproto();
void protobuf_AssignDesc_location_5foffset_5finfo_2eproto();
void protobuf_ShutdownFile_location_5foffset_5finfo_2eproto();

class LocationOffsetData;
class LocationOffsetInfo;

// ===================================================================

class LocationOffsetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LocationOffsetInfo) */ {
 public:
  LocationOffsetInfo();
  virtual ~LocationOffsetInfo();

  LocationOffsetInfo(const LocationOffsetInfo& from);

  inline LocationOffsetInfo& operator=(const LocationOffsetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationOffsetInfo& default_instance();

  void Swap(LocationOffsetInfo* other);

  // implements Message ----------------------------------------------

  inline LocationOffsetInfo* New() const { return New(NULL); }

  LocationOffsetInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocationOffsetInfo& from);
  void MergeFrom(const LocationOffsetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocationOffsetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LocationOffsetData locationOffsetData = 1;
  int locationoffsetdata_size() const;
  void clear_locationoffsetdata();
  static const int kLocationOffsetDataFieldNumber = 1;
  const ::LocationOffsetData& locationoffsetdata(int index) const;
  ::LocationOffsetData* mutable_locationoffsetdata(int index);
  ::LocationOffsetData* add_locationoffsetdata();
  ::google::protobuf::RepeatedPtrField< ::LocationOffsetData >*
      mutable_locationoffsetdata();
  const ::google::protobuf::RepeatedPtrField< ::LocationOffsetData >&
      locationoffsetdata() const;

  // @@protoc_insertion_point(class_scope:LocationOffsetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::LocationOffsetData > locationoffsetdata_;
  friend void  protobuf_AddDesc_location_5foffset_5finfo_2eproto();
  friend void protobuf_AssignDesc_location_5foffset_5finfo_2eproto();
  friend void protobuf_ShutdownFile_location_5foffset_5finfo_2eproto();

  void InitAsDefaultInstance();
  static LocationOffsetInfo* default_instance_;
};
// -------------------------------------------------------------------

class LocationOffsetData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LocationOffsetData) */ {
 public:
  LocationOffsetData();
  virtual ~LocationOffsetData();

  LocationOffsetData(const LocationOffsetData& from);

  inline LocationOffsetData& operator=(const LocationOffsetData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationOffsetData& default_instance();

  void Swap(LocationOffsetData* other);

  // implements Message ----------------------------------------------

  inline LocationOffsetData* New() const { return New(NULL); }

  LocationOffsetData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocationOffsetData& from);
  void MergeFrom(const LocationOffsetData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocationOffsetData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 offsetLon = 1;
  bool has_offsetlon() const;
  void clear_offsetlon();
  static const int kOffsetLonFieldNumber = 1;
  ::google::protobuf::int32 offsetlon() const;
  void set_offsetlon(::google::protobuf::int32 value);

  // required int32 offsetLat = 2;
  bool has_offsetlat() const;
  void clear_offsetlat();
  static const int kOffsetLatFieldNumber = 2;
  ::google::protobuf::int32 offsetlat() const;
  void set_offsetlat(::google::protobuf::int32 value);

  // required int32 offsetDir = 3;
  bool has_offsetdir() const;
  void clear_offsetdir();
  static const int kOffsetDirFieldNumber = 3;
  ::google::protobuf::int32 offsetdir() const;
  void set_offsetdir(::google::protobuf::int32 value);

  // required int32 offsetSpeed = 4;
  bool has_offsetspeed() const;
  void clear_offsetspeed();
  static const int kOffsetSpeedFieldNumber = 4;
  ::google::protobuf::int32 offsetspeed() const;
  void set_offsetspeed(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(LocationOffsetData)
  // @@protoc_insertion_point(class_scope:LocationOffsetData)
 private:
  inline void set_has_offsetlon();
  inline void clear_has_offsetlon();
  inline void set_has_offsetlat();
  inline void clear_has_offsetlat();
  inline void set_has_offsetdir();
  inline void clear_has_offsetdir();
  inline void set_has_offsetspeed();
  inline void clear_has_offsetspeed();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offsetlon_;
  ::google::protobuf::int32 offsetlat_;
  ::google::protobuf::int32 offsetdir_;
  ::google::protobuf::int32 offsetspeed_;
  friend void  protobuf_AddDesc_location_5foffset_5finfo_2eproto();
  friend void protobuf_AssignDesc_location_5foffset_5finfo_2eproto();
  friend void protobuf_ShutdownFile_location_5foffset_5finfo_2eproto();

  void InitAsDefaultInstance();
  static LocationOffsetData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LocationOffsetInfo

// repeated .LocationOffsetData locationOffsetData = 1;
inline int LocationOffsetInfo::locationoffsetdata_size() const {
  return locationoffsetdata_.size();
}
inline void LocationOffsetInfo::clear_locationoffsetdata() {
  locationoffsetdata_.Clear();
}
inline const ::LocationOffsetData& LocationOffsetInfo::locationoffsetdata(int index) const {
  // @@protoc_insertion_point(field_get:LocationOffsetInfo.locationOffsetData)
  return locationoffsetdata_.Get(index);
}
inline ::LocationOffsetData* LocationOffsetInfo::mutable_locationoffsetdata(int index) {
  // @@protoc_insertion_point(field_mutable:LocationOffsetInfo.locationOffsetData)
  return locationoffsetdata_.Mutable(index);
}
inline ::LocationOffsetData* LocationOffsetInfo::add_locationoffsetdata() {
  // @@protoc_insertion_point(field_add:LocationOffsetInfo.locationOffsetData)
  return locationoffsetdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::LocationOffsetData >*
LocationOffsetInfo::mutable_locationoffsetdata() {
  // @@protoc_insertion_point(field_mutable_list:LocationOffsetInfo.locationOffsetData)
  return &locationoffsetdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::LocationOffsetData >&
LocationOffsetInfo::locationoffsetdata() const {
  // @@protoc_insertion_point(field_list:LocationOffsetInfo.locationOffsetData)
  return locationoffsetdata_;
}

// -------------------------------------------------------------------

// LocationOffsetData

// required int32 offsetLon = 1;
inline bool LocationOffsetData::has_offsetlon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocationOffsetData::set_has_offsetlon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocationOffsetData::clear_has_offsetlon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocationOffsetData::clear_offsetlon() {
  offsetlon_ = 0;
  clear_has_offsetlon();
}
inline ::google::protobuf::int32 LocationOffsetData::offsetlon() const {
  // @@protoc_insertion_point(field_get:LocationOffsetData.offsetLon)
  return offsetlon_;
}
inline void LocationOffsetData::set_offsetlon(::google::protobuf::int32 value) {
  set_has_offsetlon();
  offsetlon_ = value;
  // @@protoc_insertion_point(field_set:LocationOffsetData.offsetLon)
}

// required int32 offsetLat = 2;
inline bool LocationOffsetData::has_offsetlat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocationOffsetData::set_has_offsetlat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocationOffsetData::clear_has_offsetlat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocationOffsetData::clear_offsetlat() {
  offsetlat_ = 0;
  clear_has_offsetlat();
}
inline ::google::protobuf::int32 LocationOffsetData::offsetlat() const {
  // @@protoc_insertion_point(field_get:LocationOffsetData.offsetLat)
  return offsetlat_;
}
inline void LocationOffsetData::set_offsetlat(::google::protobuf::int32 value) {
  set_has_offsetlat();
  offsetlat_ = value;
  // @@protoc_insertion_point(field_set:LocationOffsetData.offsetLat)
}

// required int32 offsetDir = 3;
inline bool LocationOffsetData::has_offsetdir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LocationOffsetData::set_has_offsetdir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LocationOffsetData::clear_has_offsetdir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LocationOffsetData::clear_offsetdir() {
  offsetdir_ = 0;
  clear_has_offsetdir();
}
inline ::google::protobuf::int32 LocationOffsetData::offsetdir() const {
  // @@protoc_insertion_point(field_get:LocationOffsetData.offsetDir)
  return offsetdir_;
}
inline void LocationOffsetData::set_offsetdir(::google::protobuf::int32 value) {
  set_has_offsetdir();
  offsetdir_ = value;
  // @@protoc_insertion_point(field_set:LocationOffsetData.offsetDir)
}

// required int32 offsetSpeed = 4;
inline bool LocationOffsetData::has_offsetspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LocationOffsetData::set_has_offsetspeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LocationOffsetData::clear_has_offsetspeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LocationOffsetData::clear_offsetspeed() {
  offsetspeed_ = 0;
  clear_has_offsetspeed();
}
inline ::google::protobuf::int32 LocationOffsetData::offsetspeed() const {
  // @@protoc_insertion_point(field_get:LocationOffsetData.offsetSpeed)
  return offsetspeed_;
}
inline void LocationOffsetData::set_offsetspeed(::google::protobuf::int32 value) {
  set_has_offsetspeed();
  offsetspeed_ = value;
  // @@protoc_insertion_point(field_set:LocationOffsetData.offsetSpeed)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_location_5foffset_5finfo_2eproto__INCLUDED
