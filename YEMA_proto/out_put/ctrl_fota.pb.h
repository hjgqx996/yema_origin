// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_fota.proto

#ifndef PROTOBUF_ctrl_5ffota_2eproto__INCLUDED
#define PROTOBUF_ctrl_5ffota_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ctrl_5ffota_2eproto();
void protobuf_AssignDesc_ctrl_5ffota_2eproto();
void protobuf_ShutdownFile_ctrl_5ffota_2eproto();

class CtrlFotaData;

// ===================================================================

class CtrlFotaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CtrlFotaData) */ {
 public:
  CtrlFotaData();
  virtual ~CtrlFotaData();

  CtrlFotaData(const CtrlFotaData& from);

  inline CtrlFotaData& operator=(const CtrlFotaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlFotaData& default_instance();

  void Swap(CtrlFotaData* other);

  // implements Message ----------------------------------------------

  inline CtrlFotaData* New() const { return New(NULL); }

  CtrlFotaData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlFotaData& from);
  void MergeFrom(const CtrlFotaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlFotaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 termType = 1;
  bool has_termtype() const;
  void clear_termtype();
  static const int kTermTypeFieldNumber = 1;
  ::google::protobuf::uint32 termtype() const;
  void set_termtype(::google::protobuf::uint32 value);

  // optional string apnName = 2;
  bool has_apnname() const;
  void clear_apnname();
  static const int kApnNameFieldNumber = 2;
  const ::std::string& apnname() const;
  void set_apnname(const ::std::string& value);
  void set_apnname(const char* value);
  void set_apnname(const char* value, size_t size);
  ::std::string* mutable_apnname();
  ::std::string* release_apnname();
  void set_allocated_apnname(::std::string* apnname);

  // optional string username = 3;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 4;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string svrUrl = 5;
  bool has_svrurl() const;
  void clear_svrurl();
  static const int kSvrUrlFieldNumber = 5;
  const ::std::string& svrurl() const;
  void set_svrurl(const ::std::string& value);
  void set_svrurl(const char* value);
  void set_svrurl(const char* value, size_t size);
  ::std::string* mutable_svrurl();
  ::std::string* release_svrurl();
  void set_allocated_svrurl(::std::string* svrurl);

  // optional uint32 svrPort = 6;
  bool has_svrport() const;
  void clear_svrport();
  static const int kSvrPortFieldNumber = 6;
  ::google::protobuf::uint32 svrport() const;
  void set_svrport(::google::protobuf::uint32 value);

  // optional string manufacturerId = 7;
  bool has_manufacturerid() const;
  void clear_manufacturerid();
  static const int kManufacturerIdFieldNumber = 7;
  const ::std::string& manufacturerid() const;
  void set_manufacturerid(const ::std::string& value);
  void set_manufacturerid(const char* value);
  void set_manufacturerid(const char* value, size_t size);
  ::std::string* mutable_manufacturerid();
  ::std::string* release_manufacturerid();
  void set_allocated_manufacturerid(::std::string* manufacturerid);

  // optional string hardwareVersion = 8;
  bool has_hardwareversion() const;
  void clear_hardwareversion();
  static const int kHardwareVersionFieldNumber = 8;
  const ::std::string& hardwareversion() const;
  void set_hardwareversion(const ::std::string& value);
  void set_hardwareversion(const char* value);
  void set_hardwareversion(const char* value, size_t size);
  ::std::string* mutable_hardwareversion();
  ::std::string* release_hardwareversion();
  void set_allocated_hardwareversion(::std::string* hardwareversion);

  // optional string firmwareVersion = 9;
  bool has_firmwareversion() const;
  void clear_firmwareversion();
  static const int kFirmwareVersionFieldNumber = 9;
  const ::std::string& firmwareversion() const;
  void set_firmwareversion(const ::std::string& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  ::std::string* mutable_firmwareversion();
  ::std::string* release_firmwareversion();
  void set_allocated_firmwareversion(::std::string* firmwareversion);

  // optional string upgradePath = 10;
  bool has_upgradepath() const;
  void clear_upgradepath();
  static const int kUpgradePathFieldNumber = 10;
  const ::std::string& upgradepath() const;
  void set_upgradepath(const ::std::string& value);
  void set_upgradepath(const char* value);
  void set_upgradepath(const char* value, size_t size);
  ::std::string* mutable_upgradepath();
  ::std::string* release_upgradepath();
  void set_allocated_upgradepath(::std::string* upgradepath);

  // optional uint32 timeout = 11;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 timeout() const;
  void set_timeout(::google::protobuf::uint32 value);

  // required string sign = 12;
  bool has_sign() const;
  void clear_sign();
  static const int kSignFieldNumber = 12;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // required string requestId = 13;
  bool has_requestid() const;
  void clear_requestid();
  static const int kRequestIdFieldNumber = 13;
  const ::std::string& requestid() const;
  void set_requestid(const ::std::string& value);
  void set_requestid(const char* value);
  void set_requestid(const char* value, size_t size);
  ::std::string* mutable_requestid();
  ::std::string* release_requestid();
  void set_allocated_requestid(::std::string* requestid);

  // optional int32 respCode = 14;
  bool has_respcode() const;
  void clear_respcode();
  static const int kRespCodeFieldNumber = 14;
  ::google::protobuf::int32 respcode() const;
  void set_respcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CtrlFotaData)
 private:
  inline void set_has_termtype();
  inline void clear_has_termtype();
  inline void set_has_apnname();
  inline void clear_has_apnname();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_svrurl();
  inline void clear_has_svrurl();
  inline void set_has_svrport();
  inline void clear_has_svrport();
  inline void set_has_manufacturerid();
  inline void clear_has_manufacturerid();
  inline void set_has_hardwareversion();
  inline void clear_has_hardwareversion();
  inline void set_has_firmwareversion();
  inline void clear_has_firmwareversion();
  inline void set_has_upgradepath();
  inline void clear_has_upgradepath();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_requestid();
  inline void clear_has_requestid();
  inline void set_has_respcode();
  inline void clear_has_respcode();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr apnname_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::uint32 termtype_;
  ::google::protobuf::uint32 svrport_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr svrurl_;
  ::google::protobuf::internal::ArenaStringPtr manufacturerid_;
  ::google::protobuf::internal::ArenaStringPtr hardwareversion_;
  ::google::protobuf::internal::ArenaStringPtr firmwareversion_;
  ::google::protobuf::internal::ArenaStringPtr upgradepath_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::uint32 timeout_;
  ::google::protobuf::int32 respcode_;
  ::google::protobuf::internal::ArenaStringPtr requestid_;
  friend void  protobuf_AddDesc_ctrl_5ffota_2eproto();
  friend void protobuf_AssignDesc_ctrl_5ffota_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5ffota_2eproto();

  void InitAsDefaultInstance();
  static CtrlFotaData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlFotaData

// required uint32 termType = 1;
inline bool CtrlFotaData::has_termtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CtrlFotaData::set_has_termtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CtrlFotaData::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CtrlFotaData::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
inline ::google::protobuf::uint32 CtrlFotaData::termtype() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.termType)
  return termtype_;
}
inline void CtrlFotaData::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.termType)
}

// optional string apnName = 2;
inline bool CtrlFotaData::has_apnname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CtrlFotaData::set_has_apnname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CtrlFotaData::clear_has_apnname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CtrlFotaData::clear_apnname() {
  apnname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apnname();
}
inline const ::std::string& CtrlFotaData::apnname() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.apnName)
  return apnname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_apnname(const ::std::string& value) {
  set_has_apnname();
  apnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.apnName)
}
inline void CtrlFotaData::set_apnname(const char* value) {
  set_has_apnname();
  apnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.apnName)
}
inline void CtrlFotaData::set_apnname(const char* value, size_t size) {
  set_has_apnname();
  apnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.apnName)
}
inline ::std::string* CtrlFotaData::mutable_apnname() {
  set_has_apnname();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.apnName)
  return apnname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_apnname() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.apnName)
  clear_has_apnname();
  return apnname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_apnname(::std::string* apnname) {
  if (apnname != NULL) {
    set_has_apnname();
  } else {
    clear_has_apnname();
  }
  apnname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apnname);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.apnName)
}

// optional string username = 3;
inline bool CtrlFotaData::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CtrlFotaData::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CtrlFotaData::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CtrlFotaData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& CtrlFotaData::username() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.username)
}
inline void CtrlFotaData::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.username)
}
inline void CtrlFotaData::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.username)
}
inline ::std::string* CtrlFotaData::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_username() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.username)
}

// optional string password = 4;
inline bool CtrlFotaData::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CtrlFotaData::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CtrlFotaData::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CtrlFotaData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CtrlFotaData::password() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.password)
}
inline void CtrlFotaData::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.password)
}
inline void CtrlFotaData::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.password)
}
inline ::std::string* CtrlFotaData::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_password() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.password)
}

// optional string svrUrl = 5;
inline bool CtrlFotaData::has_svrurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CtrlFotaData::set_has_svrurl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CtrlFotaData::clear_has_svrurl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CtrlFotaData::clear_svrurl() {
  svrurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svrurl();
}
inline const ::std::string& CtrlFotaData::svrurl() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.svrUrl)
  return svrurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_svrurl(const ::std::string& value) {
  set_has_svrurl();
  svrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.svrUrl)
}
inline void CtrlFotaData::set_svrurl(const char* value) {
  set_has_svrurl();
  svrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.svrUrl)
}
inline void CtrlFotaData::set_svrurl(const char* value, size_t size) {
  set_has_svrurl();
  svrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.svrUrl)
}
inline ::std::string* CtrlFotaData::mutable_svrurl() {
  set_has_svrurl();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.svrUrl)
  return svrurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_svrurl() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.svrUrl)
  clear_has_svrurl();
  return svrurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_svrurl(::std::string* svrurl) {
  if (svrurl != NULL) {
    set_has_svrurl();
  } else {
    clear_has_svrurl();
  }
  svrurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), svrurl);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.svrUrl)
}

// optional uint32 svrPort = 6;
inline bool CtrlFotaData::has_svrport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CtrlFotaData::set_has_svrport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CtrlFotaData::clear_has_svrport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CtrlFotaData::clear_svrport() {
  svrport_ = 0u;
  clear_has_svrport();
}
inline ::google::protobuf::uint32 CtrlFotaData::svrport() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.svrPort)
  return svrport_;
}
inline void CtrlFotaData::set_svrport(::google::protobuf::uint32 value) {
  set_has_svrport();
  svrport_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.svrPort)
}

// optional string manufacturerId = 7;
inline bool CtrlFotaData::has_manufacturerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CtrlFotaData::set_has_manufacturerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CtrlFotaData::clear_has_manufacturerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CtrlFotaData::clear_manufacturerid() {
  manufacturerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturerid();
}
inline const ::std::string& CtrlFotaData::manufacturerid() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.manufacturerId)
  return manufacturerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_manufacturerid(const ::std::string& value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.manufacturerId)
}
inline void CtrlFotaData::set_manufacturerid(const char* value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.manufacturerId)
}
inline void CtrlFotaData::set_manufacturerid(const char* value, size_t size) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.manufacturerId)
}
inline ::std::string* CtrlFotaData::mutable_manufacturerid() {
  set_has_manufacturerid();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.manufacturerId)
  return manufacturerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_manufacturerid() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.manufacturerId)
  clear_has_manufacturerid();
  return manufacturerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_manufacturerid(::std::string* manufacturerid) {
  if (manufacturerid != NULL) {
    set_has_manufacturerid();
  } else {
    clear_has_manufacturerid();
  }
  manufacturerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturerid);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.manufacturerId)
}

// optional string hardwareVersion = 8;
inline bool CtrlFotaData::has_hardwareversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CtrlFotaData::set_has_hardwareversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CtrlFotaData::clear_has_hardwareversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CtrlFotaData::clear_hardwareversion() {
  hardwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardwareversion();
}
inline const ::std::string& CtrlFotaData::hardwareversion() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.hardwareVersion)
  return hardwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_hardwareversion(const ::std::string& value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.hardwareVersion)
}
inline void CtrlFotaData::set_hardwareversion(const char* value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.hardwareVersion)
}
inline void CtrlFotaData::set_hardwareversion(const char* value, size_t size) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.hardwareVersion)
}
inline ::std::string* CtrlFotaData::mutable_hardwareversion() {
  set_has_hardwareversion();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.hardwareVersion)
  return hardwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_hardwareversion() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.hardwareVersion)
  clear_has_hardwareversion();
  return hardwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_hardwareversion(::std::string* hardwareversion) {
  if (hardwareversion != NULL) {
    set_has_hardwareversion();
  } else {
    clear_has_hardwareversion();
  }
  hardwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardwareversion);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.hardwareVersion)
}

// optional string firmwareVersion = 9;
inline bool CtrlFotaData::has_firmwareversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CtrlFotaData::set_has_firmwareversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CtrlFotaData::clear_has_firmwareversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CtrlFotaData::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firmwareversion();
}
inline const ::std::string& CtrlFotaData::firmwareversion() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.firmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_firmwareversion(const ::std::string& value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.firmwareVersion)
}
inline void CtrlFotaData::set_firmwareversion(const char* value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.firmwareVersion)
}
inline void CtrlFotaData::set_firmwareversion(const char* value, size_t size) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.firmwareVersion)
}
inline ::std::string* CtrlFotaData::mutable_firmwareversion() {
  set_has_firmwareversion();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.firmwareVersion)
  clear_has_firmwareversion();
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    set_has_firmwareversion();
  } else {
    clear_has_firmwareversion();
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.firmwareVersion)
}

// optional string upgradePath = 10;
inline bool CtrlFotaData::has_upgradepath() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CtrlFotaData::set_has_upgradepath() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CtrlFotaData::clear_has_upgradepath() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CtrlFotaData::clear_upgradepath() {
  upgradepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upgradepath();
}
inline const ::std::string& CtrlFotaData::upgradepath() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.upgradePath)
  return upgradepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_upgradepath(const ::std::string& value) {
  set_has_upgradepath();
  upgradepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.upgradePath)
}
inline void CtrlFotaData::set_upgradepath(const char* value) {
  set_has_upgradepath();
  upgradepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.upgradePath)
}
inline void CtrlFotaData::set_upgradepath(const char* value, size_t size) {
  set_has_upgradepath();
  upgradepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.upgradePath)
}
inline ::std::string* CtrlFotaData::mutable_upgradepath() {
  set_has_upgradepath();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.upgradePath)
  return upgradepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_upgradepath() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.upgradePath)
  clear_has_upgradepath();
  return upgradepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_upgradepath(::std::string* upgradepath) {
  if (upgradepath != NULL) {
    set_has_upgradepath();
  } else {
    clear_has_upgradepath();
  }
  upgradepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upgradepath);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.upgradePath)
}

// optional uint32 timeout = 11;
inline bool CtrlFotaData::has_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CtrlFotaData::set_has_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CtrlFotaData::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CtrlFotaData::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
inline ::google::protobuf::uint32 CtrlFotaData::timeout() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.timeout)
  return timeout_;
}
inline void CtrlFotaData::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.timeout)
}

// required string sign = 12;
inline bool CtrlFotaData::has_sign() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CtrlFotaData::set_has_sign() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CtrlFotaData::clear_has_sign() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CtrlFotaData::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
inline const ::std::string& CtrlFotaData::sign() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.sign)
  return sign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.sign)
}
inline void CtrlFotaData::set_sign(const char* value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.sign)
}
inline void CtrlFotaData::set_sign(const char* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.sign)
}
inline ::std::string* CtrlFotaData::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_sign() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.sign)
  clear_has_sign();
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.sign)
}

// required string requestId = 13;
inline bool CtrlFotaData::has_requestid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CtrlFotaData::set_has_requestid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CtrlFotaData::clear_has_requestid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CtrlFotaData::clear_requestid() {
  requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requestid();
}
inline const ::std::string& CtrlFotaData::requestid() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.requestId)
  return requestid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_requestid(const ::std::string& value) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.requestId)
}
inline void CtrlFotaData::set_requestid(const char* value) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.requestId)
}
inline void CtrlFotaData::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.requestId)
}
inline ::std::string* CtrlFotaData::mutable_requestid() {
  set_has_requestid();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.requestId)
  return requestid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlFotaData::release_requestid() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.requestId)
  clear_has_requestid();
  return requestid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlFotaData::set_allocated_requestid(::std::string* requestid) {
  if (requestid != NULL) {
    set_has_requestid();
  } else {
    clear_has_requestid();
  }
  requestid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestid);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.requestId)
}

// optional int32 respCode = 14;
inline bool CtrlFotaData::has_respcode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CtrlFotaData::set_has_respcode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CtrlFotaData::clear_has_respcode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CtrlFotaData::clear_respcode() {
  respcode_ = 0;
  clear_has_respcode();
}
inline ::google::protobuf::int32 CtrlFotaData::respcode() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.respCode)
  return respcode_;
}
inline void CtrlFotaData::set_respcode(::google::protobuf::int32 value) {
  set_has_respcode();
  respcode_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.respCode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ctrl_5ffota_2eproto__INCLUDED
