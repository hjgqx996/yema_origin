// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_fota.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_fota.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlFotaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlFotaData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5ffota_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5ffota_2eproto() {
  protobuf_AddDesc_ctrl_5ffota_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_fota.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlFotaData_descriptor_ = file->message_type(0);
  static const int CtrlFotaData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, apnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, svrurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, svrport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, manufacturerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, hardwareversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, firmwareversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, upgradepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, respcode_),
  };
  CtrlFotaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlFotaData_descriptor_,
      CtrlFotaData::default_instance_,
      CtrlFotaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlFotaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlFotaData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5ffota_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlFotaData_descriptor_, &CtrlFotaData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5ffota_2eproto() {
  delete CtrlFotaData::default_instance_;
  delete CtrlFotaData_reflection_;
}

void protobuf_AddDesc_ctrl_5ffota_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5ffota_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ctrl_fota.proto\"\231\002\n\014CtrlFotaData\022\020\n\010te"
    "rmType\030\001 \002(\r\022\017\n\007apnName\030\002 \001(\t\022\020\n\010usernam"
    "e\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\016\n\006svrUrl\030\005 \001("
    "\t\022\017\n\007svrPort\030\006 \001(\r\022\026\n\016manufacturerId\030\007 \001"
    "(\t\022\027\n\017hardwareVersion\030\010 \001(\t\022\027\n\017firmwareV"
    "ersion\030\t \001(\t\022\023\n\013upgradePath\030\n \001(\t\022\017\n\007tim"
    "eout\030\013 \001(\r\022\014\n\004sign\030\014 \002(\t\022\021\n\trequestId\030\r "
    "\002(\t\022\020\n\010respCode\030\016 \001(\005B\'\n\022com.mx.ota.mess"
    "ageB\017CtrlFotaMessageH\001", 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_fota.proto", &protobuf_RegisterTypes);
  CtrlFotaData::default_instance_ = new CtrlFotaData();
  CtrlFotaData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5ffota_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5ffota_2eproto {
  StaticDescriptorInitializer_ctrl_5ffota_2eproto() {
    protobuf_AddDesc_ctrl_5ffota_2eproto();
  }
} static_descriptor_initializer_ctrl_5ffota_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlFotaData::kTermTypeFieldNumber;
const int CtrlFotaData::kApnNameFieldNumber;
const int CtrlFotaData::kUsernameFieldNumber;
const int CtrlFotaData::kPasswordFieldNumber;
const int CtrlFotaData::kSvrUrlFieldNumber;
const int CtrlFotaData::kSvrPortFieldNumber;
const int CtrlFotaData::kManufacturerIdFieldNumber;
const int CtrlFotaData::kHardwareVersionFieldNumber;
const int CtrlFotaData::kFirmwareVersionFieldNumber;
const int CtrlFotaData::kUpgradePathFieldNumber;
const int CtrlFotaData::kTimeoutFieldNumber;
const int CtrlFotaData::kSignFieldNumber;
const int CtrlFotaData::kRequestIdFieldNumber;
const int CtrlFotaData::kRespCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlFotaData::CtrlFotaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlFotaData)
}

void CtrlFotaData::InitAsDefaultInstance() {
}

CtrlFotaData::CtrlFotaData(const CtrlFotaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlFotaData)
}

void CtrlFotaData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  termtype_ = 0u;
  apnname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svrurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svrport_ = 0u;
  manufacturerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgradepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  respcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlFotaData::~CtrlFotaData() {
  // @@protoc_insertion_point(destructor:CtrlFotaData)
  SharedDtor();
}

void CtrlFotaData::SharedDtor() {
  apnname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  svrurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upgradepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CtrlFotaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlFotaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlFotaData_descriptor_;
}

const CtrlFotaData& CtrlFotaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5ffota_2eproto();
  return *default_instance_;
}

CtrlFotaData* CtrlFotaData::default_instance_ = NULL;

CtrlFotaData* CtrlFotaData::New(::google::protobuf::Arena* arena) const {
  CtrlFotaData* n = new CtrlFotaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlFotaData::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlFotaData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CtrlFotaData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlFotaData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(termtype_, svrport_);
    if (has_apnname()) {
      apnname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_svrurl()) {
      svrurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_manufacturerid()) {
      manufacturerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hardwareversion()) {
      hardwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(timeout_, respcode_);
    if (has_firmwareversion()) {
      firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_upgradepath()) {
      upgradepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_sign()) {
      sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_requestid()) {
      requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlFotaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlFotaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 termType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_apnName;
        break;
      }

      // optional string apnName = 2;
      case 2: {
        if (tag == 18) {
         parse_apnName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apnname().data(), this->apnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.apnName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_svrUrl;
        break;
      }

      // optional string svrUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_svrUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svrurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->svrurl().data(), this->svrurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.svrUrl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_svrPort;
        break;
      }

      // optional uint32 svrPort = 6;
      case 6: {
        if (tag == 48) {
         parse_svrPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrport_)));
          set_has_svrport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_manufacturerId;
        break;
      }

      // optional string manufacturerId = 7;
      case 7: {
        if (tag == 58) {
         parse_manufacturerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturerid().data(), this->manufacturerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.manufacturerId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_hardwareVersion;
        break;
      }

      // optional string hardwareVersion = 8;
      case 8: {
        if (tag == 66) {
         parse_hardwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardwareversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardwareversion().data(), this->hardwareversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.hardwareVersion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_firmwareVersion;
        break;
      }

      // optional string firmwareVersion = 9;
      case 9: {
        if (tag == 74) {
         parse_firmwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firmwareversion().data(), this->firmwareversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.firmwareVersion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_upgradePath;
        break;
      }

      // optional string upgradePath = 10;
      case 10: {
        if (tag == 82) {
         parse_upgradePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upgradepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upgradepath().data(), this->upgradepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.upgradePath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 11;
      case 11: {
        if (tag == 88) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sign;
        break;
      }

      // required string sign = 12;
      case 12: {
        if (tag == 98) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_requestId;
        break;
      }

      // required string requestId = 13;
      case 13: {
        if (tag == 106) {
         parse_requestId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CtrlFotaData.requestId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_respCode;
        break;
      }

      // optional int32 respCode = 14;
      case 14: {
        if (tag == 112) {
         parse_respCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respcode_)));
          set_has_respcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlFotaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlFotaData)
  return false;
#undef DO_
}

void CtrlFotaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlFotaData)
  // required uint32 termType = 1;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->termtype(), output);
  }

  // optional string apnName = 2;
  if (has_apnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apnname().data(), this->apnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.apnName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->apnname(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional string svrUrl = 5;
  if (has_svrurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svrurl().data(), this->svrurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.svrUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->svrurl(), output);
  }

  // optional uint32 svrPort = 6;
  if (has_svrport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->svrport(), output);
  }

  // optional string manufacturerId = 7;
  if (has_manufacturerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturerid().data(), this->manufacturerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.manufacturerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->manufacturerid(), output);
  }

  // optional string hardwareVersion = 8;
  if (has_hardwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareversion().data(), this->hardwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.hardwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hardwareversion(), output);
  }

  // optional string firmwareVersion = 9;
  if (has_firmwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.firmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->firmwareversion(), output);
  }

  // optional string upgradePath = 10;
  if (has_upgradepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upgradepath().data(), this->upgradepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.upgradePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->upgradepath(), output);
  }

  // optional uint32 timeout = 11;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->timeout(), output);
  }

  // required string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sign(), output);
  }

  // required string requestId = 13;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.requestId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->requestid(), output);
  }

  // optional int32 respCode = 14;
  if (has_respcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->respcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlFotaData)
}

::google::protobuf::uint8* CtrlFotaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlFotaData)
  // required uint32 termType = 1;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->termtype(), target);
  }

  // optional string apnName = 2;
  if (has_apnname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apnname().data(), this->apnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.apnName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apnname(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional string svrUrl = 5;
  if (has_svrurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->svrurl().data(), this->svrurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.svrUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->svrurl(), target);
  }

  // optional uint32 svrPort = 6;
  if (has_svrport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->svrport(), target);
  }

  // optional string manufacturerId = 7;
  if (has_manufacturerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturerid().data(), this->manufacturerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.manufacturerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->manufacturerid(), target);
  }

  // optional string hardwareVersion = 8;
  if (has_hardwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareversion().data(), this->hardwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.hardwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->hardwareversion(), target);
  }

  // optional string firmwareVersion = 9;
  if (has_firmwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.firmwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->firmwareversion(), target);
  }

  // optional string upgradePath = 10;
  if (has_upgradepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upgradepath().data(), this->upgradepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.upgradePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->upgradepath(), target);
  }

  // optional uint32 timeout = 11;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->timeout(), target);
  }

  // required string sign = 12;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sign(), target);
  }

  // required string requestId = 13;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CtrlFotaData.requestId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->requestid(), target);
  }

  // optional int32 respCode = 14;
  if (has_respcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->respcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlFotaData)
  return target;
}

int CtrlFotaData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CtrlFotaData)
  int total_size = 0;

  if (has_termtype()) {
    // required uint32 termType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->termtype());
  }

  if (has_sign()) {
    // required string sign = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());
  }

  if (has_requestid()) {
    // required string requestId = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestid());
  }

  return total_size;
}
int CtrlFotaData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlFotaData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00001801) ^ 0x00001801) == 0) {  // All required fields are present.
    // required uint32 termType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->termtype());

    // required string sign = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());

    // required string requestId = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string apnName = 2;
    if (has_apnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apnname());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string svrUrl = 5;
    if (has_svrurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svrurl());
    }

    // optional uint32 svrPort = 6;
    if (has_svrport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrport());
    }

    // optional string manufacturerId = 7;
    if (has_manufacturerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturerid());
    }

    // optional string hardwareVersion = 8;
    if (has_hardwareversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardwareversion());
    }

  }
  if (_has_bits_[8 / 32] & 9984u) {
    // optional string firmwareVersion = 9;
    if (has_firmwareversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firmwareversion());
    }

    // optional string upgradePath = 10;
    if (has_upgradepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upgradepath());
    }

    // optional uint32 timeout = 11;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional int32 respCode = 14;
    if (has_respcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->respcode());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlFotaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlFotaData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlFotaData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlFotaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlFotaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlFotaData)
    MergeFrom(*source);
  }
}

void CtrlFotaData::MergeFrom(const CtrlFotaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlFotaData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_apnname()) {
      set_has_apnname();
      apnname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apnname_);
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (from.has_svrurl()) {
      set_has_svrurl();
      svrurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.svrurl_);
    }
    if (from.has_svrport()) {
      set_svrport(from.svrport());
    }
    if (from.has_manufacturerid()) {
      set_has_manufacturerid();
      manufacturerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturerid_);
    }
    if (from.has_hardwareversion()) {
      set_has_hardwareversion();
      hardwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardwareversion_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_firmwareversion()) {
      set_has_firmwareversion();
      firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
    }
    if (from.has_upgradepath()) {
      set_has_upgradepath();
      upgradepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upgradepath_);
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_sign()) {
      set_has_sign();
      sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
    }
    if (from.has_requestid()) {
      set_has_requestid();
      requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
    }
    if (from.has_respcode()) {
      set_respcode(from.respcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlFotaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlFotaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlFotaData::CopyFrom(const CtrlFotaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlFotaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlFotaData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001801) != 0x00001801) return false;

  return true;
}

void CtrlFotaData::Swap(CtrlFotaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlFotaData::InternalSwap(CtrlFotaData* other) {
  std::swap(termtype_, other->termtype_);
  apnname_.Swap(&other->apnname_);
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  svrurl_.Swap(&other->svrurl_);
  std::swap(svrport_, other->svrport_);
  manufacturerid_.Swap(&other->manufacturerid_);
  hardwareversion_.Swap(&other->hardwareversion_);
  firmwareversion_.Swap(&other->firmwareversion_);
  upgradepath_.Swap(&other->upgradepath_);
  std::swap(timeout_, other->timeout_);
  sign_.Swap(&other->sign_);
  requestid_.Swap(&other->requestid_);
  std::swap(respcode_, other->respcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlFotaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlFotaData_descriptor_;
  metadata.reflection = CtrlFotaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlFotaData

// required uint32 termType = 1;
bool CtrlFotaData::has_termtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlFotaData::set_has_termtype() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlFotaData::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlFotaData::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
 ::google::protobuf::uint32 CtrlFotaData::termtype() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.termType)
  return termtype_;
}
 void CtrlFotaData::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.termType)
}

// optional string apnName = 2;
bool CtrlFotaData::has_apnname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlFotaData::set_has_apnname() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlFotaData::clear_has_apnname() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlFotaData::clear_apnname() {
  apnname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apnname();
}
 const ::std::string& CtrlFotaData::apnname() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.apnName)
  return apnname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_apnname(const ::std::string& value) {
  set_has_apnname();
  apnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.apnName)
}
 void CtrlFotaData::set_apnname(const char* value) {
  set_has_apnname();
  apnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.apnName)
}
 void CtrlFotaData::set_apnname(const char* value, size_t size) {
  set_has_apnname();
  apnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.apnName)
}
 ::std::string* CtrlFotaData::mutable_apnname() {
  set_has_apnname();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.apnName)
  return apnname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_apnname() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.apnName)
  clear_has_apnname();
  return apnname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_apnname(::std::string* apnname) {
  if (apnname != NULL) {
    set_has_apnname();
  } else {
    clear_has_apnname();
  }
  apnname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apnname);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.apnName)
}

// optional string username = 3;
bool CtrlFotaData::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlFotaData::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlFotaData::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlFotaData::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& CtrlFotaData::username() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.username)
}
 void CtrlFotaData::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.username)
}
 void CtrlFotaData::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.username)
}
 ::std::string* CtrlFotaData::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_username() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.username)
}

// optional string password = 4;
bool CtrlFotaData::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CtrlFotaData::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
void CtrlFotaData::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
void CtrlFotaData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CtrlFotaData::password() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.password)
}
 void CtrlFotaData::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.password)
}
 void CtrlFotaData::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.password)
}
 ::std::string* CtrlFotaData::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_password() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.password)
}

// optional string svrUrl = 5;
bool CtrlFotaData::has_svrurl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CtrlFotaData::set_has_svrurl() {
  _has_bits_[0] |= 0x00000010u;
}
void CtrlFotaData::clear_has_svrurl() {
  _has_bits_[0] &= ~0x00000010u;
}
void CtrlFotaData::clear_svrurl() {
  svrurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_svrurl();
}
 const ::std::string& CtrlFotaData::svrurl() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.svrUrl)
  return svrurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_svrurl(const ::std::string& value) {
  set_has_svrurl();
  svrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.svrUrl)
}
 void CtrlFotaData::set_svrurl(const char* value) {
  set_has_svrurl();
  svrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.svrUrl)
}
 void CtrlFotaData::set_svrurl(const char* value, size_t size) {
  set_has_svrurl();
  svrurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.svrUrl)
}
 ::std::string* CtrlFotaData::mutable_svrurl() {
  set_has_svrurl();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.svrUrl)
  return svrurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_svrurl() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.svrUrl)
  clear_has_svrurl();
  return svrurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_svrurl(::std::string* svrurl) {
  if (svrurl != NULL) {
    set_has_svrurl();
  } else {
    clear_has_svrurl();
  }
  svrurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), svrurl);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.svrUrl)
}

// optional uint32 svrPort = 6;
bool CtrlFotaData::has_svrport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CtrlFotaData::set_has_svrport() {
  _has_bits_[0] |= 0x00000020u;
}
void CtrlFotaData::clear_has_svrport() {
  _has_bits_[0] &= ~0x00000020u;
}
void CtrlFotaData::clear_svrport() {
  svrport_ = 0u;
  clear_has_svrport();
}
 ::google::protobuf::uint32 CtrlFotaData::svrport() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.svrPort)
  return svrport_;
}
 void CtrlFotaData::set_svrport(::google::protobuf::uint32 value) {
  set_has_svrport();
  svrport_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.svrPort)
}

// optional string manufacturerId = 7;
bool CtrlFotaData::has_manufacturerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CtrlFotaData::set_has_manufacturerid() {
  _has_bits_[0] |= 0x00000040u;
}
void CtrlFotaData::clear_has_manufacturerid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CtrlFotaData::clear_manufacturerid() {
  manufacturerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturerid();
}
 const ::std::string& CtrlFotaData::manufacturerid() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.manufacturerId)
  return manufacturerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_manufacturerid(const ::std::string& value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.manufacturerId)
}
 void CtrlFotaData::set_manufacturerid(const char* value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.manufacturerId)
}
 void CtrlFotaData::set_manufacturerid(const char* value, size_t size) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.manufacturerId)
}
 ::std::string* CtrlFotaData::mutable_manufacturerid() {
  set_has_manufacturerid();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.manufacturerId)
  return manufacturerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_manufacturerid() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.manufacturerId)
  clear_has_manufacturerid();
  return manufacturerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_manufacturerid(::std::string* manufacturerid) {
  if (manufacturerid != NULL) {
    set_has_manufacturerid();
  } else {
    clear_has_manufacturerid();
  }
  manufacturerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturerid);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.manufacturerId)
}

// optional string hardwareVersion = 8;
bool CtrlFotaData::has_hardwareversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CtrlFotaData::set_has_hardwareversion() {
  _has_bits_[0] |= 0x00000080u;
}
void CtrlFotaData::clear_has_hardwareversion() {
  _has_bits_[0] &= ~0x00000080u;
}
void CtrlFotaData::clear_hardwareversion() {
  hardwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardwareversion();
}
 const ::std::string& CtrlFotaData::hardwareversion() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.hardwareVersion)
  return hardwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_hardwareversion(const ::std::string& value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.hardwareVersion)
}
 void CtrlFotaData::set_hardwareversion(const char* value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.hardwareVersion)
}
 void CtrlFotaData::set_hardwareversion(const char* value, size_t size) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.hardwareVersion)
}
 ::std::string* CtrlFotaData::mutable_hardwareversion() {
  set_has_hardwareversion();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.hardwareVersion)
  return hardwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_hardwareversion() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.hardwareVersion)
  clear_has_hardwareversion();
  return hardwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_hardwareversion(::std::string* hardwareversion) {
  if (hardwareversion != NULL) {
    set_has_hardwareversion();
  } else {
    clear_has_hardwareversion();
  }
  hardwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardwareversion);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.hardwareVersion)
}

// optional string firmwareVersion = 9;
bool CtrlFotaData::has_firmwareversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CtrlFotaData::set_has_firmwareversion() {
  _has_bits_[0] |= 0x00000100u;
}
void CtrlFotaData::clear_has_firmwareversion() {
  _has_bits_[0] &= ~0x00000100u;
}
void CtrlFotaData::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firmwareversion();
}
 const ::std::string& CtrlFotaData::firmwareversion() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.firmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_firmwareversion(const ::std::string& value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.firmwareVersion)
}
 void CtrlFotaData::set_firmwareversion(const char* value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.firmwareVersion)
}
 void CtrlFotaData::set_firmwareversion(const char* value, size_t size) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.firmwareVersion)
}
 ::std::string* CtrlFotaData::mutable_firmwareversion() {
  set_has_firmwareversion();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.firmwareVersion)
  clear_has_firmwareversion();
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    set_has_firmwareversion();
  } else {
    clear_has_firmwareversion();
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.firmwareVersion)
}

// optional string upgradePath = 10;
bool CtrlFotaData::has_upgradepath() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CtrlFotaData::set_has_upgradepath() {
  _has_bits_[0] |= 0x00000200u;
}
void CtrlFotaData::clear_has_upgradepath() {
  _has_bits_[0] &= ~0x00000200u;
}
void CtrlFotaData::clear_upgradepath() {
  upgradepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upgradepath();
}
 const ::std::string& CtrlFotaData::upgradepath() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.upgradePath)
  return upgradepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_upgradepath(const ::std::string& value) {
  set_has_upgradepath();
  upgradepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.upgradePath)
}
 void CtrlFotaData::set_upgradepath(const char* value) {
  set_has_upgradepath();
  upgradepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.upgradePath)
}
 void CtrlFotaData::set_upgradepath(const char* value, size_t size) {
  set_has_upgradepath();
  upgradepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.upgradePath)
}
 ::std::string* CtrlFotaData::mutable_upgradepath() {
  set_has_upgradepath();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.upgradePath)
  return upgradepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_upgradepath() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.upgradePath)
  clear_has_upgradepath();
  return upgradepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_upgradepath(::std::string* upgradepath) {
  if (upgradepath != NULL) {
    set_has_upgradepath();
  } else {
    clear_has_upgradepath();
  }
  upgradepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upgradepath);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.upgradePath)
}

// optional uint32 timeout = 11;
bool CtrlFotaData::has_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CtrlFotaData::set_has_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
void CtrlFotaData::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
void CtrlFotaData::clear_timeout() {
  timeout_ = 0u;
  clear_has_timeout();
}
 ::google::protobuf::uint32 CtrlFotaData::timeout() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.timeout)
  return timeout_;
}
 void CtrlFotaData::set_timeout(::google::protobuf::uint32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.timeout)
}

// required string sign = 12;
bool CtrlFotaData::has_sign() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CtrlFotaData::set_has_sign() {
  _has_bits_[0] |= 0x00000800u;
}
void CtrlFotaData::clear_has_sign() {
  _has_bits_[0] &= ~0x00000800u;
}
void CtrlFotaData::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sign();
}
 const ::std::string& CtrlFotaData::sign() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.sign)
  return sign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_sign(const ::std::string& value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.sign)
}
 void CtrlFotaData::set_sign(const char* value) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.sign)
}
 void CtrlFotaData::set_sign(const char* value, size_t size) {
  set_has_sign();
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.sign)
}
 ::std::string* CtrlFotaData::mutable_sign() {
  set_has_sign();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_sign() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.sign)
  clear_has_sign();
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.sign)
}

// required string requestId = 13;
bool CtrlFotaData::has_requestid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CtrlFotaData::set_has_requestid() {
  _has_bits_[0] |= 0x00001000u;
}
void CtrlFotaData::clear_has_requestid() {
  _has_bits_[0] &= ~0x00001000u;
}
void CtrlFotaData::clear_requestid() {
  requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requestid();
}
 const ::std::string& CtrlFotaData::requestid() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.requestId)
  return requestid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_requestid(const ::std::string& value) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CtrlFotaData.requestId)
}
 void CtrlFotaData::set_requestid(const char* value) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CtrlFotaData.requestId)
}
 void CtrlFotaData::set_requestid(const char* value, size_t size) {
  set_has_requestid();
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CtrlFotaData.requestId)
}
 ::std::string* CtrlFotaData::mutable_requestid() {
  set_has_requestid();
  // @@protoc_insertion_point(field_mutable:CtrlFotaData.requestId)
  return requestid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CtrlFotaData::release_requestid() {
  // @@protoc_insertion_point(field_release:CtrlFotaData.requestId)
  clear_has_requestid();
  return requestid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CtrlFotaData::set_allocated_requestid(::std::string* requestid) {
  if (requestid != NULL) {
    set_has_requestid();
  } else {
    clear_has_requestid();
  }
  requestid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestid);
  // @@protoc_insertion_point(field_set_allocated:CtrlFotaData.requestId)
}

// optional int32 respCode = 14;
bool CtrlFotaData::has_respcode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CtrlFotaData::set_has_respcode() {
  _has_bits_[0] |= 0x00002000u;
}
void CtrlFotaData::clear_has_respcode() {
  _has_bits_[0] &= ~0x00002000u;
}
void CtrlFotaData::clear_respcode() {
  respcode_ = 0;
  clear_has_respcode();
}
 ::google::protobuf::int32 CtrlFotaData::respcode() const {
  // @@protoc_insertion_point(field_get:CtrlFotaData.respCode)
  return respcode_;
}
 void CtrlFotaData::set_respcode(::google::protobuf::int32 value) {
  set_has_respcode();
  respcode_ = value;
  // @@protoc_insertion_point(field_set:CtrlFotaData.respCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
