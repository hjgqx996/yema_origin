// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_oil_mass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "state_oil_mass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StateOilMassMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateOilMassMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_state_5foil_5fmass_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_state_5foil_5fmass_2eproto() {
  protobuf_AddDesc_state_5foil_5fmass_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "state_oil_mass.proto");
  GOOGLE_CHECK(file != NULL);
  StateOilMassMessage_descriptor_ = file->message_type(0);
  static const int StateOilMassMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateOilMassMessage, oil_mass_),
  };
  StateOilMassMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StateOilMassMessage_descriptor_,
      StateOilMassMessage::default_instance_,
      StateOilMassMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateOilMassMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(StateOilMassMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateOilMassMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_state_5foil_5fmass_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateOilMassMessage_descriptor_, &StateOilMassMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_state_5foil_5fmass_2eproto() {
  delete StateOilMassMessage::default_instance_;
  delete StateOilMassMessage_reflection_;
}

void protobuf_AddDesc_state_5foil_5fmass_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_state_5foil_5fmass_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024state_oil_mass.proto\"\'\n\023StateOilMassMe"
    "ssage\022\020\n\010oil_mass\030\001 \001(\001B6\n\"com.mx.server"
    ".remote.v2.bean.stateB\020StateOilMassBean", 119);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "state_oil_mass.proto", &protobuf_RegisterTypes);
  StateOilMassMessage::default_instance_ = new StateOilMassMessage();
  StateOilMassMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_state_5foil_5fmass_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_state_5foil_5fmass_2eproto {
  StaticDescriptorInitializer_state_5foil_5fmass_2eproto() {
    protobuf_AddDesc_state_5foil_5fmass_2eproto();
  }
} static_descriptor_initializer_state_5foil_5fmass_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateOilMassMessage::kOilMassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateOilMassMessage::StateOilMassMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StateOilMassMessage)
}

void StateOilMassMessage::InitAsDefaultInstance() {
}

StateOilMassMessage::StateOilMassMessage(const StateOilMassMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StateOilMassMessage)
}

void StateOilMassMessage::SharedCtor() {
  _cached_size_ = 0;
  oil_mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateOilMassMessage::~StateOilMassMessage() {
  // @@protoc_insertion_point(destructor:StateOilMassMessage)
  SharedDtor();
}

void StateOilMassMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateOilMassMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateOilMassMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateOilMassMessage_descriptor_;
}

const StateOilMassMessage& StateOilMassMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_5foil_5fmass_2eproto();
  return *default_instance_;
}

StateOilMassMessage* StateOilMassMessage::default_instance_ = NULL;

StateOilMassMessage* StateOilMassMessage::New(::google::protobuf::Arena* arena) const {
  StateOilMassMessage* n = new StateOilMassMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateOilMassMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StateOilMassMessage)
  oil_mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StateOilMassMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StateOilMassMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double oil_mass = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oil_mass_)));
          set_has_oil_mass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StateOilMassMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StateOilMassMessage)
  return false;
#undef DO_
}

void StateOilMassMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StateOilMassMessage)
  // optional double oil_mass = 1;
  if (has_oil_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->oil_mass(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StateOilMassMessage)
}

::google::protobuf::uint8* StateOilMassMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StateOilMassMessage)
  // optional double oil_mass = 1;
  if (has_oil_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->oil_mass(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateOilMassMessage)
  return target;
}

int StateOilMassMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StateOilMassMessage)
  int total_size = 0;

  // optional double oil_mass = 1;
  if (has_oil_mass()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateOilMassMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StateOilMassMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StateOilMassMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StateOilMassMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StateOilMassMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StateOilMassMessage)
    MergeFrom(*source);
  }
}

void StateOilMassMessage::MergeFrom(const StateOilMassMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StateOilMassMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oil_mass()) {
      set_oil_mass(from.oil_mass());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StateOilMassMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StateOilMassMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateOilMassMessage::CopyFrom(const StateOilMassMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateOilMassMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateOilMassMessage::IsInitialized() const {

  return true;
}

void StateOilMassMessage::Swap(StateOilMassMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateOilMassMessage::InternalSwap(StateOilMassMessage* other) {
  std::swap(oil_mass_, other->oil_mass_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateOilMassMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateOilMassMessage_descriptor_;
  metadata.reflection = StateOilMassMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StateOilMassMessage

// optional double oil_mass = 1;
bool StateOilMassMessage::has_oil_mass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StateOilMassMessage::set_has_oil_mass() {
  _has_bits_[0] |= 0x00000001u;
}
void StateOilMassMessage::clear_has_oil_mass() {
  _has_bits_[0] &= ~0x00000001u;
}
void StateOilMassMessage::clear_oil_mass() {
  oil_mass_ = 0;
  clear_has_oil_mass();
}
 double StateOilMassMessage::oil_mass() const {
  // @@protoc_insertion_point(field_get:StateOilMassMessage.oil_mass)
  return oil_mass_;
}
 void StateOilMassMessage::set_oil_mass(double value) {
  set_has_oil_mass();
  oil_mass_ = value;
  // @@protoc_insertion_point(field_set:StateOilMassMessage.oil_mass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
