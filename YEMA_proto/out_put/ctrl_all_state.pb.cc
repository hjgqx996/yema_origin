// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_all_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_all_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlAllStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlAllStateMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5fall_5fstate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5fall_5fstate_2eproto() {
  protobuf_AddDesc_ctrl_5fall_5fstate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_all_state.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlAllStateMessage_descriptor_ = file->message_type(0);
  static const int CtrlAllStateMessage_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, common_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, air_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, chair_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, charge_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, doors_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, ekey_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, electromotor_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, engine_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, light_horn_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, windows_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, oil_mass_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, battery_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, lighting_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, mileage_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, tyre_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, other_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, private_information_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, top_windows_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, trunk_doors_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, air_temperature_message_),
  };
  CtrlAllStateMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlAllStateMessage_descriptor_,
      CtrlAllStateMessage::default_instance_,
      CtrlAllStateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlAllStateMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAllStateMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5fall_5fstate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlAllStateMessage_descriptor_, &CtrlAllStateMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5fall_5fstate_2eproto() {
  delete CtrlAllStateMessage::default_instance_;
  delete CtrlAllStateMessage_reflection_;
}

void protobuf_AddDesc_ctrl_5fall_5fstate_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5fall_5fstate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ctrl_5fair_2eproto();
  ::protobuf_AddDesc_ctrl_5fchair_2eproto();
  ::protobuf_AddDesc_ctrl_5fcharge_2eproto();
  ::protobuf_AddDesc_ctrl_5fdoors_2eproto();
  ::protobuf_AddDesc_ctrl_5fekey_2eproto();
  ::protobuf_AddDesc_ctrl_5felectromotor_2eproto();
  ::protobuf_AddDesc_ctrl_5fengine_2eproto();
  ::protobuf_AddDesc_ctrl_5flight_5fhorn_2eproto();
  ::protobuf_AddDesc_ctrl_5fwindows_2eproto();
  ::protobuf_AddDesc_ctrl_5fprivate_5finformation_2eproto();
  ::protobuf_AddDesc_state_5foil_5fmass_2eproto();
  ::protobuf_AddDesc_state_5fbattery_2eproto();
  ::protobuf_AddDesc_state_5flighting_2eproto();
  ::protobuf_AddDesc_state_5fmileage_2eproto();
  ::protobuf_AddDesc_state_5ftyre_2eproto();
  ::protobuf_AddDesc_state_5fother_2eproto();
  ::protobuf_AddDesc_ctrl_5fcommon_5fparam_5ftbox_2eproto();
  ::protobuf_AddDesc_ctrl_5ftop_5fwindows_2eproto();
  ::protobuf_AddDesc_ctrl_5ftrunk_5fdoors_2eproto();
  ::protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ctrl_all_state.proto\032\016ctrl_air.proto\032\020"
    "ctrl_chair.proto\032\021ctrl_charge.proto\032\020ctr"
    "l_doors.proto\032\017ctrl_ekey.proto\032\027ctrl_ele"
    "ctromotor.proto\032\021ctrl_engine.proto\032\025ctrl"
    "_light_horn.proto\032\022ctrl_windows.proto\032\036c"
    "trl_private_information.proto\032\024state_oil"
    "_mass.proto\032\023state_battery.proto\032\024state_"
    "lighting.proto\032\023state_mileage.proto\032\020sta"
    "te_tyre.proto\032\021state_other.proto\032\034ctrl_c"
    "ommon_param_tbox.proto\032\026ctrl_top_windows"
    ".proto\032\026ctrl_trunk_doors.proto\032\032ctrl_air"
    "_temperature.proto\"\307\007\n\023CtrlAllStateMessa"
    "ge\022*\n\014common_param\030\001 \001(\0132\024.CtrlCommonPar"
    "amTbox\022$\n\013air_message\030\002 \001(\0132\017.CtrlAirMes"
    "sage\022(\n\rchair_message\030\003 \001(\0132\021.CtrlChairM"
    "essage\022*\n\016charge_message\030\004 \001(\0132\022.CtrlCha"
    "rgeMessage\022(\n\rdoors_message\030\005 \001(\0132\021.Ctrl"
    "DoorsMessage\022&\n\014ekey_message\030\006 \001(\0132\020.Ctr"
    "lEkeyMessage\0226\n\024electromotor_message\030\007 \001"
    "(\0132\030.CtrlElectromotorMessage\022*\n\016engine_m"
    "essage\030\010 \001(\0132\022.CtrlEngineMessage\0221\n\022ligh"
    "t_horn_message\030\t \001(\0132\025.CtrlLightHornMess"
    "age\022,\n\017windows_message\030\n \001(\0132\023.CtrlWindo"
    "wsMessage\022,\n\016oil_mass_state\030\013 \001(\0132\024.Stat"
    "eOilMassMessage\022+\n\rbattery_state\030\014 \001(\0132\024"
    ".StateBatteryMessage\022-\n\016lighting_state\030\r"
    " \001(\0132\025.StateLightingMessage\022+\n\rmileage_s"
    "tate\030\016 \001(\0132\024.StateMileageMessage\022%\n\ntyre"
    "_state\030\017 \001(\0132\021.StateTyreMessage\022\'\n\013other"
    "_state\030\020 \001(\0132\022.StateOtherMessage\022C\n\033priv"
    "ate_information_message\030\021 \001(\0132\036.CtrlPriv"
    "ateInformationMessage\0223\n\023top_windows_mes"
    "sage\030\022 \001(\0132\026.CtrlTopWindowsMessage\0223\n\023tr"
    "unk_doors_message\030\023 \001(\0132\026.CtrlTrunkDoors"
    "Message\022;\n\027air_temperature_message\030\024 \001(\013"
    "2\032.CtrlAirTemperatureMessageB0\n\034com.mx.s"
    "erver.remote.v2.beanB\020CtrlAllStateBean", 1478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_all_state.proto", &protobuf_RegisterTypes);
  CtrlAllStateMessage::default_instance_ = new CtrlAllStateMessage();
  CtrlAllStateMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5fall_5fstate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5fall_5fstate_2eproto {
  StaticDescriptorInitializer_ctrl_5fall_5fstate_2eproto() {
    protobuf_AddDesc_ctrl_5fall_5fstate_2eproto();
  }
} static_descriptor_initializer_ctrl_5fall_5fstate_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlAllStateMessage::kCommonParamFieldNumber;
const int CtrlAllStateMessage::kAirMessageFieldNumber;
const int CtrlAllStateMessage::kChairMessageFieldNumber;
const int CtrlAllStateMessage::kChargeMessageFieldNumber;
const int CtrlAllStateMessage::kDoorsMessageFieldNumber;
const int CtrlAllStateMessage::kEkeyMessageFieldNumber;
const int CtrlAllStateMessage::kElectromotorMessageFieldNumber;
const int CtrlAllStateMessage::kEngineMessageFieldNumber;
const int CtrlAllStateMessage::kLightHornMessageFieldNumber;
const int CtrlAllStateMessage::kWindowsMessageFieldNumber;
const int CtrlAllStateMessage::kOilMassStateFieldNumber;
const int CtrlAllStateMessage::kBatteryStateFieldNumber;
const int CtrlAllStateMessage::kLightingStateFieldNumber;
const int CtrlAllStateMessage::kMileageStateFieldNumber;
const int CtrlAllStateMessage::kTyreStateFieldNumber;
const int CtrlAllStateMessage::kOtherStateFieldNumber;
const int CtrlAllStateMessage::kPrivateInformationMessageFieldNumber;
const int CtrlAllStateMessage::kTopWindowsMessageFieldNumber;
const int CtrlAllStateMessage::kTrunkDoorsMessageFieldNumber;
const int CtrlAllStateMessage::kAirTemperatureMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlAllStateMessage::CtrlAllStateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlAllStateMessage)
}

void CtrlAllStateMessage::InitAsDefaultInstance() {
  common_param_ = const_cast< ::CtrlCommonParamTbox*>(&::CtrlCommonParamTbox::default_instance());
  air_message_ = const_cast< ::CtrlAirMessage*>(&::CtrlAirMessage::default_instance());
  chair_message_ = const_cast< ::CtrlChairMessage*>(&::CtrlChairMessage::default_instance());
  charge_message_ = const_cast< ::CtrlChargeMessage*>(&::CtrlChargeMessage::default_instance());
  doors_message_ = const_cast< ::CtrlDoorsMessage*>(&::CtrlDoorsMessage::default_instance());
  ekey_message_ = const_cast< ::CtrlEkeyMessage*>(&::CtrlEkeyMessage::default_instance());
  electromotor_message_ = const_cast< ::CtrlElectromotorMessage*>(&::CtrlElectromotorMessage::default_instance());
  engine_message_ = const_cast< ::CtrlEngineMessage*>(&::CtrlEngineMessage::default_instance());
  light_horn_message_ = const_cast< ::CtrlLightHornMessage*>(&::CtrlLightHornMessage::default_instance());
  windows_message_ = const_cast< ::CtrlWindowsMessage*>(&::CtrlWindowsMessage::default_instance());
  oil_mass_state_ = const_cast< ::StateOilMassMessage*>(&::StateOilMassMessage::default_instance());
  battery_state_ = const_cast< ::StateBatteryMessage*>(&::StateBatteryMessage::default_instance());
  lighting_state_ = const_cast< ::StateLightingMessage*>(&::StateLightingMessage::default_instance());
  mileage_state_ = const_cast< ::StateMileageMessage*>(&::StateMileageMessage::default_instance());
  tyre_state_ = const_cast< ::StateTyreMessage*>(&::StateTyreMessage::default_instance());
  other_state_ = const_cast< ::StateOtherMessage*>(&::StateOtherMessage::default_instance());
  private_information_message_ = const_cast< ::CtrlPrivateInformationMessage*>(&::CtrlPrivateInformationMessage::default_instance());
  top_windows_message_ = const_cast< ::CtrlTopWindowsMessage*>(&::CtrlTopWindowsMessage::default_instance());
  trunk_doors_message_ = const_cast< ::CtrlTrunkDoorsMessage*>(&::CtrlTrunkDoorsMessage::default_instance());
  air_temperature_message_ = const_cast< ::CtrlAirTemperatureMessage*>(&::CtrlAirTemperatureMessage::default_instance());
}

CtrlAllStateMessage::CtrlAllStateMessage(const CtrlAllStateMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlAllStateMessage)
}

void CtrlAllStateMessage::SharedCtor() {
  _cached_size_ = 0;
  common_param_ = NULL;
  air_message_ = NULL;
  chair_message_ = NULL;
  charge_message_ = NULL;
  doors_message_ = NULL;
  ekey_message_ = NULL;
  electromotor_message_ = NULL;
  engine_message_ = NULL;
  light_horn_message_ = NULL;
  windows_message_ = NULL;
  oil_mass_state_ = NULL;
  battery_state_ = NULL;
  lighting_state_ = NULL;
  mileage_state_ = NULL;
  tyre_state_ = NULL;
  other_state_ = NULL;
  private_information_message_ = NULL;
  top_windows_message_ = NULL;
  trunk_doors_message_ = NULL;
  air_temperature_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlAllStateMessage::~CtrlAllStateMessage() {
  // @@protoc_insertion_point(destructor:CtrlAllStateMessage)
  SharedDtor();
}

void CtrlAllStateMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_param_;
    delete air_message_;
    delete chair_message_;
    delete charge_message_;
    delete doors_message_;
    delete ekey_message_;
    delete electromotor_message_;
    delete engine_message_;
    delete light_horn_message_;
    delete windows_message_;
    delete oil_mass_state_;
    delete battery_state_;
    delete lighting_state_;
    delete mileage_state_;
    delete tyre_state_;
    delete other_state_;
    delete private_information_message_;
    delete top_windows_message_;
    delete trunk_doors_message_;
    delete air_temperature_message_;
  }
}

void CtrlAllStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlAllStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlAllStateMessage_descriptor_;
}

const CtrlAllStateMessage& CtrlAllStateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fall_5fstate_2eproto();
  return *default_instance_;
}

CtrlAllStateMessage* CtrlAllStateMessage::default_instance_ = NULL;

CtrlAllStateMessage* CtrlAllStateMessage::New(::google::protobuf::Arena* arena) const {
  CtrlAllStateMessage* n = new CtrlAllStateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlAllStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlAllStateMessage)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_common_param()) {
      if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
    }
    if (has_air_message()) {
      if (air_message_ != NULL) air_message_->::CtrlAirMessage::Clear();
    }
    if (has_chair_message()) {
      if (chair_message_ != NULL) chair_message_->::CtrlChairMessage::Clear();
    }
    if (has_charge_message()) {
      if (charge_message_ != NULL) charge_message_->::CtrlChargeMessage::Clear();
    }
    if (has_doors_message()) {
      if (doors_message_ != NULL) doors_message_->::CtrlDoorsMessage::Clear();
    }
    if (has_ekey_message()) {
      if (ekey_message_ != NULL) ekey_message_->::CtrlEkeyMessage::Clear();
    }
    if (has_electromotor_message()) {
      if (electromotor_message_ != NULL) electromotor_message_->::CtrlElectromotorMessage::Clear();
    }
    if (has_engine_message()) {
      if (engine_message_ != NULL) engine_message_->::CtrlEngineMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_light_horn_message()) {
      if (light_horn_message_ != NULL) light_horn_message_->::CtrlLightHornMessage::Clear();
    }
    if (has_windows_message()) {
      if (windows_message_ != NULL) windows_message_->::CtrlWindowsMessage::Clear();
    }
    if (has_oil_mass_state()) {
      if (oil_mass_state_ != NULL) oil_mass_state_->::StateOilMassMessage::Clear();
    }
    if (has_battery_state()) {
      if (battery_state_ != NULL) battery_state_->::StateBatteryMessage::Clear();
    }
    if (has_lighting_state()) {
      if (lighting_state_ != NULL) lighting_state_->::StateLightingMessage::Clear();
    }
    if (has_mileage_state()) {
      if (mileage_state_ != NULL) mileage_state_->::StateMileageMessage::Clear();
    }
    if (has_tyre_state()) {
      if (tyre_state_ != NULL) tyre_state_->::StateTyreMessage::Clear();
    }
    if (has_other_state()) {
      if (other_state_ != NULL) other_state_->::StateOtherMessage::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 983040u) {
    if (has_private_information_message()) {
      if (private_information_message_ != NULL) private_information_message_->::CtrlPrivateInformationMessage::Clear();
    }
    if (has_top_windows_message()) {
      if (top_windows_message_ != NULL) top_windows_message_->::CtrlTopWindowsMessage::Clear();
    }
    if (has_trunk_doors_message()) {
      if (trunk_doors_message_ != NULL) trunk_doors_message_->::CtrlTrunkDoorsMessage::Clear();
    }
    if (has_air_temperature_message()) {
      if (air_temperature_message_ != NULL) air_temperature_message_->::CtrlAirTemperatureMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlAllStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlAllStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CtrlCommonParamTbox common_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_air_message;
        break;
      }

      // optional .CtrlAirMessage air_message = 2;
      case 2: {
        if (tag == 18) {
         parse_air_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_air_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chair_message;
        break;
      }

      // optional .CtrlChairMessage chair_message = 3;
      case 3: {
        if (tag == 26) {
         parse_chair_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chair_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_charge_message;
        break;
      }

      // optional .CtrlChargeMessage charge_message = 4;
      case 4: {
        if (tag == 34) {
         parse_charge_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charge_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_doors_message;
        break;
      }

      // optional .CtrlDoorsMessage doors_message = 5;
      case 5: {
        if (tag == 42) {
         parse_doors_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doors_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ekey_message;
        break;
      }

      // optional .CtrlEkeyMessage ekey_message = 6;
      case 6: {
        if (tag == 50) {
         parse_ekey_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ekey_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_electromotor_message;
        break;
      }

      // optional .CtrlElectromotorMessage electromotor_message = 7;
      case 7: {
        if (tag == 58) {
         parse_electromotor_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_electromotor_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_engine_message;
        break;
      }

      // optional .CtrlEngineMessage engine_message = 8;
      case 8: {
        if (tag == 66) {
         parse_engine_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engine_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_light_horn_message;
        break;
      }

      // optional .CtrlLightHornMessage light_horn_message = 9;
      case 9: {
        if (tag == 74) {
         parse_light_horn_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light_horn_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_windows_message;
        break;
      }

      // optional .CtrlWindowsMessage windows_message = 10;
      case 10: {
        if (tag == 82) {
         parse_windows_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_windows_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_oil_mass_state;
        break;
      }

      // optional .StateOilMassMessage oil_mass_state = 11;
      case 11: {
        if (tag == 90) {
         parse_oil_mass_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oil_mass_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_battery_state;
        break;
      }

      // optional .StateBatteryMessage battery_state = 12;
      case 12: {
        if (tag == 98) {
         parse_battery_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battery_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_lighting_state;
        break;
      }

      // optional .StateLightingMessage lighting_state = 13;
      case 13: {
        if (tag == 106) {
         parse_lighting_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lighting_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_mileage_state;
        break;
      }

      // optional .StateMileageMessage mileage_state = 14;
      case 14: {
        if (tag == 114) {
         parse_mileage_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mileage_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_tyre_state;
        break;
      }

      // optional .StateTyreMessage tyre_state = 15;
      case 15: {
        if (tag == 122) {
         parse_tyre_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tyre_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_other_state;
        break;
      }

      // optional .StateOtherMessage other_state = 16;
      case 16: {
        if (tag == 130) {
         parse_other_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_private_information_message;
        break;
      }

      // optional .CtrlPrivateInformationMessage private_information_message = 17;
      case 17: {
        if (tag == 138) {
         parse_private_information_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_information_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_top_windows_message;
        break;
      }

      // optional .CtrlTopWindowsMessage top_windows_message = 18;
      case 18: {
        if (tag == 146) {
         parse_top_windows_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_windows_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_trunk_doors_message;
        break;
      }

      // optional .CtrlTrunkDoorsMessage trunk_doors_message = 19;
      case 19: {
        if (tag == 154) {
         parse_trunk_doors_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trunk_doors_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_air_temperature_message;
        break;
      }

      // optional .CtrlAirTemperatureMessage air_temperature_message = 20;
      case 20: {
        if (tag == 162) {
         parse_air_temperature_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_air_temperature_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlAllStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlAllStateMessage)
  return false;
#undef DO_
}

void CtrlAllStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlAllStateMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_param_, output);
  }

  // optional .CtrlAirMessage air_message = 2;
  if (has_air_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->air_message_, output);
  }

  // optional .CtrlChairMessage chair_message = 3;
  if (has_chair_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->chair_message_, output);
  }

  // optional .CtrlChargeMessage charge_message = 4;
  if (has_charge_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->charge_message_, output);
  }

  // optional .CtrlDoorsMessage doors_message = 5;
  if (has_doors_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->doors_message_, output);
  }

  // optional .CtrlEkeyMessage ekey_message = 6;
  if (has_ekey_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ekey_message_, output);
  }

  // optional .CtrlElectromotorMessage electromotor_message = 7;
  if (has_electromotor_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->electromotor_message_, output);
  }

  // optional .CtrlEngineMessage engine_message = 8;
  if (has_engine_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->engine_message_, output);
  }

  // optional .CtrlLightHornMessage light_horn_message = 9;
  if (has_light_horn_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->light_horn_message_, output);
  }

  // optional .CtrlWindowsMessage windows_message = 10;
  if (has_windows_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->windows_message_, output);
  }

  // optional .StateOilMassMessage oil_mass_state = 11;
  if (has_oil_mass_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->oil_mass_state_, output);
  }

  // optional .StateBatteryMessage battery_state = 12;
  if (has_battery_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->battery_state_, output);
  }

  // optional .StateLightingMessage lighting_state = 13;
  if (has_lighting_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->lighting_state_, output);
  }

  // optional .StateMileageMessage mileage_state = 14;
  if (has_mileage_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->mileage_state_, output);
  }

  // optional .StateTyreMessage tyre_state = 15;
  if (has_tyre_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->tyre_state_, output);
  }

  // optional .StateOtherMessage other_state = 16;
  if (has_other_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->other_state_, output);
  }

  // optional .CtrlPrivateInformationMessage private_information_message = 17;
  if (has_private_information_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->private_information_message_, output);
  }

  // optional .CtrlTopWindowsMessage top_windows_message = 18;
  if (has_top_windows_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->top_windows_message_, output);
  }

  // optional .CtrlTrunkDoorsMessage trunk_doors_message = 19;
  if (has_trunk_doors_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->trunk_doors_message_, output);
  }

  // optional .CtrlAirTemperatureMessage air_temperature_message = 20;
  if (has_air_temperature_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->air_temperature_message_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlAllStateMessage)
}

::google::protobuf::uint8* CtrlAllStateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlAllStateMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_param_, false, target);
  }

  // optional .CtrlAirMessage air_message = 2;
  if (has_air_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->air_message_, false, target);
  }

  // optional .CtrlChairMessage chair_message = 3;
  if (has_chair_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->chair_message_, false, target);
  }

  // optional .CtrlChargeMessage charge_message = 4;
  if (has_charge_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->charge_message_, false, target);
  }

  // optional .CtrlDoorsMessage doors_message = 5;
  if (has_doors_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->doors_message_, false, target);
  }

  // optional .CtrlEkeyMessage ekey_message = 6;
  if (has_ekey_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->ekey_message_, false, target);
  }

  // optional .CtrlElectromotorMessage electromotor_message = 7;
  if (has_electromotor_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->electromotor_message_, false, target);
  }

  // optional .CtrlEngineMessage engine_message = 8;
  if (has_engine_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->engine_message_, false, target);
  }

  // optional .CtrlLightHornMessage light_horn_message = 9;
  if (has_light_horn_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->light_horn_message_, false, target);
  }

  // optional .CtrlWindowsMessage windows_message = 10;
  if (has_windows_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->windows_message_, false, target);
  }

  // optional .StateOilMassMessage oil_mass_state = 11;
  if (has_oil_mass_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->oil_mass_state_, false, target);
  }

  // optional .StateBatteryMessage battery_state = 12;
  if (has_battery_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->battery_state_, false, target);
  }

  // optional .StateLightingMessage lighting_state = 13;
  if (has_lighting_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->lighting_state_, false, target);
  }

  // optional .StateMileageMessage mileage_state = 14;
  if (has_mileage_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->mileage_state_, false, target);
  }

  // optional .StateTyreMessage tyre_state = 15;
  if (has_tyre_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->tyre_state_, false, target);
  }

  // optional .StateOtherMessage other_state = 16;
  if (has_other_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->other_state_, false, target);
  }

  // optional .CtrlPrivateInformationMessage private_information_message = 17;
  if (has_private_information_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->private_information_message_, false, target);
  }

  // optional .CtrlTopWindowsMessage top_windows_message = 18;
  if (has_top_windows_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->top_windows_message_, false, target);
  }

  // optional .CtrlTrunkDoorsMessage trunk_doors_message = 19;
  if (has_trunk_doors_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->trunk_doors_message_, false, target);
  }

  // optional .CtrlAirTemperatureMessage air_temperature_message = 20;
  if (has_air_temperature_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->air_temperature_message_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlAllStateMessage)
  return target;
}

int CtrlAllStateMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlAllStateMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .CtrlCommonParamTbox common_param = 1;
    if (has_common_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->common_param_);
    }

    // optional .CtrlAirMessage air_message = 2;
    if (has_air_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->air_message_);
    }

    // optional .CtrlChairMessage chair_message = 3;
    if (has_chair_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chair_message_);
    }

    // optional .CtrlChargeMessage charge_message = 4;
    if (has_charge_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->charge_message_);
    }

    // optional .CtrlDoorsMessage doors_message = 5;
    if (has_doors_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->doors_message_);
    }

    // optional .CtrlEkeyMessage ekey_message = 6;
    if (has_ekey_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ekey_message_);
    }

    // optional .CtrlElectromotorMessage electromotor_message = 7;
    if (has_electromotor_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->electromotor_message_);
    }

    // optional .CtrlEngineMessage engine_message = 8;
    if (has_engine_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engine_message_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .CtrlLightHornMessage light_horn_message = 9;
    if (has_light_horn_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->light_horn_message_);
    }

    // optional .CtrlWindowsMessage windows_message = 10;
    if (has_windows_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->windows_message_);
    }

    // optional .StateOilMassMessage oil_mass_state = 11;
    if (has_oil_mass_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->oil_mass_state_);
    }

    // optional .StateBatteryMessage battery_state = 12;
    if (has_battery_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->battery_state_);
    }

    // optional .StateLightingMessage lighting_state = 13;
    if (has_lighting_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lighting_state_);
    }

    // optional .StateMileageMessage mileage_state = 14;
    if (has_mileage_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mileage_state_);
    }

    // optional .StateTyreMessage tyre_state = 15;
    if (has_tyre_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tyre_state_);
    }

    // optional .StateOtherMessage other_state = 16;
    if (has_other_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->other_state_);
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional .CtrlPrivateInformationMessage private_information_message = 17;
    if (has_private_information_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->private_information_message_);
    }

    // optional .CtrlTopWindowsMessage top_windows_message = 18;
    if (has_top_windows_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->top_windows_message_);
    }

    // optional .CtrlTrunkDoorsMessage trunk_doors_message = 19;
    if (has_trunk_doors_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trunk_doors_message_);
    }

    // optional .CtrlAirTemperatureMessage air_temperature_message = 20;
    if (has_air_temperature_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->air_temperature_message_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlAllStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlAllStateMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlAllStateMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlAllStateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlAllStateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlAllStateMessage)
    MergeFrom(*source);
  }
}

void CtrlAllStateMessage::MergeFrom(const CtrlAllStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlAllStateMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_param()) {
      mutable_common_param()->::CtrlCommonParamTbox::MergeFrom(from.common_param());
    }
    if (from.has_air_message()) {
      mutable_air_message()->::CtrlAirMessage::MergeFrom(from.air_message());
    }
    if (from.has_chair_message()) {
      mutable_chair_message()->::CtrlChairMessage::MergeFrom(from.chair_message());
    }
    if (from.has_charge_message()) {
      mutable_charge_message()->::CtrlChargeMessage::MergeFrom(from.charge_message());
    }
    if (from.has_doors_message()) {
      mutable_doors_message()->::CtrlDoorsMessage::MergeFrom(from.doors_message());
    }
    if (from.has_ekey_message()) {
      mutable_ekey_message()->::CtrlEkeyMessage::MergeFrom(from.ekey_message());
    }
    if (from.has_electromotor_message()) {
      mutable_electromotor_message()->::CtrlElectromotorMessage::MergeFrom(from.electromotor_message());
    }
    if (from.has_engine_message()) {
      mutable_engine_message()->::CtrlEngineMessage::MergeFrom(from.engine_message());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_light_horn_message()) {
      mutable_light_horn_message()->::CtrlLightHornMessage::MergeFrom(from.light_horn_message());
    }
    if (from.has_windows_message()) {
      mutable_windows_message()->::CtrlWindowsMessage::MergeFrom(from.windows_message());
    }
    if (from.has_oil_mass_state()) {
      mutable_oil_mass_state()->::StateOilMassMessage::MergeFrom(from.oil_mass_state());
    }
    if (from.has_battery_state()) {
      mutable_battery_state()->::StateBatteryMessage::MergeFrom(from.battery_state());
    }
    if (from.has_lighting_state()) {
      mutable_lighting_state()->::StateLightingMessage::MergeFrom(from.lighting_state());
    }
    if (from.has_mileage_state()) {
      mutable_mileage_state()->::StateMileageMessage::MergeFrom(from.mileage_state());
    }
    if (from.has_tyre_state()) {
      mutable_tyre_state()->::StateTyreMessage::MergeFrom(from.tyre_state());
    }
    if (from.has_other_state()) {
      mutable_other_state()->::StateOtherMessage::MergeFrom(from.other_state());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_private_information_message()) {
      mutable_private_information_message()->::CtrlPrivateInformationMessage::MergeFrom(from.private_information_message());
    }
    if (from.has_top_windows_message()) {
      mutable_top_windows_message()->::CtrlTopWindowsMessage::MergeFrom(from.top_windows_message());
    }
    if (from.has_trunk_doors_message()) {
      mutable_trunk_doors_message()->::CtrlTrunkDoorsMessage::MergeFrom(from.trunk_doors_message());
    }
    if (from.has_air_temperature_message()) {
      mutable_air_temperature_message()->::CtrlAirTemperatureMessage::MergeFrom(from.air_temperature_message());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlAllStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlAllStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlAllStateMessage::CopyFrom(const CtrlAllStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlAllStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlAllStateMessage::IsInitialized() const {

  return true;
}

void CtrlAllStateMessage::Swap(CtrlAllStateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlAllStateMessage::InternalSwap(CtrlAllStateMessage* other) {
  std::swap(common_param_, other->common_param_);
  std::swap(air_message_, other->air_message_);
  std::swap(chair_message_, other->chair_message_);
  std::swap(charge_message_, other->charge_message_);
  std::swap(doors_message_, other->doors_message_);
  std::swap(ekey_message_, other->ekey_message_);
  std::swap(electromotor_message_, other->electromotor_message_);
  std::swap(engine_message_, other->engine_message_);
  std::swap(light_horn_message_, other->light_horn_message_);
  std::swap(windows_message_, other->windows_message_);
  std::swap(oil_mass_state_, other->oil_mass_state_);
  std::swap(battery_state_, other->battery_state_);
  std::swap(lighting_state_, other->lighting_state_);
  std::swap(mileage_state_, other->mileage_state_);
  std::swap(tyre_state_, other->tyre_state_);
  std::swap(other_state_, other->other_state_);
  std::swap(private_information_message_, other->private_information_message_);
  std::swap(top_windows_message_, other->top_windows_message_);
  std::swap(trunk_doors_message_, other->trunk_doors_message_);
  std::swap(air_temperature_message_, other->air_temperature_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlAllStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlAllStateMessage_descriptor_;
  metadata.reflection = CtrlAllStateMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlAllStateMessage

// optional .CtrlCommonParamTbox common_param = 1;
bool CtrlAllStateMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlAllStateMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlAllStateMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlAllStateMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
const ::CtrlCommonParamTbox& CtrlAllStateMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
::CtrlCommonParamTbox* CtrlAllStateMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.common_param)
  return common_param_;
}
::CtrlCommonParamTbox* CtrlAllStateMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.common_param)
}

// optional .CtrlAirMessage air_message = 2;
bool CtrlAllStateMessage::has_air_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlAllStateMessage::set_has_air_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlAllStateMessage::clear_has_air_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlAllStateMessage::clear_air_message() {
  if (air_message_ != NULL) air_message_->::CtrlAirMessage::Clear();
  clear_has_air_message();
}
const ::CtrlAirMessage& CtrlAllStateMessage::air_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.air_message)
  return air_message_ != NULL ? *air_message_ : *default_instance_->air_message_;
}
::CtrlAirMessage* CtrlAllStateMessage::mutable_air_message() {
  set_has_air_message();
  if (air_message_ == NULL) {
    air_message_ = new ::CtrlAirMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.air_message)
  return air_message_;
}
::CtrlAirMessage* CtrlAllStateMessage::release_air_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.air_message)
  clear_has_air_message();
  ::CtrlAirMessage* temp = air_message_;
  air_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_air_message(::CtrlAirMessage* air_message) {
  delete air_message_;
  air_message_ = air_message;
  if (air_message) {
    set_has_air_message();
  } else {
    clear_has_air_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.air_message)
}

// optional .CtrlChairMessage chair_message = 3;
bool CtrlAllStateMessage::has_chair_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlAllStateMessage::set_has_chair_message() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlAllStateMessage::clear_has_chair_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlAllStateMessage::clear_chair_message() {
  if (chair_message_ != NULL) chair_message_->::CtrlChairMessage::Clear();
  clear_has_chair_message();
}
const ::CtrlChairMessage& CtrlAllStateMessage::chair_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.chair_message)
  return chair_message_ != NULL ? *chair_message_ : *default_instance_->chair_message_;
}
::CtrlChairMessage* CtrlAllStateMessage::mutable_chair_message() {
  set_has_chair_message();
  if (chair_message_ == NULL) {
    chair_message_ = new ::CtrlChairMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.chair_message)
  return chair_message_;
}
::CtrlChairMessage* CtrlAllStateMessage::release_chair_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.chair_message)
  clear_has_chair_message();
  ::CtrlChairMessage* temp = chair_message_;
  chair_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_chair_message(::CtrlChairMessage* chair_message) {
  delete chair_message_;
  chair_message_ = chair_message;
  if (chair_message) {
    set_has_chair_message();
  } else {
    clear_has_chair_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.chair_message)
}

// optional .CtrlChargeMessage charge_message = 4;
bool CtrlAllStateMessage::has_charge_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CtrlAllStateMessage::set_has_charge_message() {
  _has_bits_[0] |= 0x00000008u;
}
void CtrlAllStateMessage::clear_has_charge_message() {
  _has_bits_[0] &= ~0x00000008u;
}
void CtrlAllStateMessage::clear_charge_message() {
  if (charge_message_ != NULL) charge_message_->::CtrlChargeMessage::Clear();
  clear_has_charge_message();
}
const ::CtrlChargeMessage& CtrlAllStateMessage::charge_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.charge_message)
  return charge_message_ != NULL ? *charge_message_ : *default_instance_->charge_message_;
}
::CtrlChargeMessage* CtrlAllStateMessage::mutable_charge_message() {
  set_has_charge_message();
  if (charge_message_ == NULL) {
    charge_message_ = new ::CtrlChargeMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.charge_message)
  return charge_message_;
}
::CtrlChargeMessage* CtrlAllStateMessage::release_charge_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.charge_message)
  clear_has_charge_message();
  ::CtrlChargeMessage* temp = charge_message_;
  charge_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_charge_message(::CtrlChargeMessage* charge_message) {
  delete charge_message_;
  charge_message_ = charge_message;
  if (charge_message) {
    set_has_charge_message();
  } else {
    clear_has_charge_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.charge_message)
}

// optional .CtrlDoorsMessage doors_message = 5;
bool CtrlAllStateMessage::has_doors_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CtrlAllStateMessage::set_has_doors_message() {
  _has_bits_[0] |= 0x00000010u;
}
void CtrlAllStateMessage::clear_has_doors_message() {
  _has_bits_[0] &= ~0x00000010u;
}
void CtrlAllStateMessage::clear_doors_message() {
  if (doors_message_ != NULL) doors_message_->::CtrlDoorsMessage::Clear();
  clear_has_doors_message();
}
const ::CtrlDoorsMessage& CtrlAllStateMessage::doors_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.doors_message)
  return doors_message_ != NULL ? *doors_message_ : *default_instance_->doors_message_;
}
::CtrlDoorsMessage* CtrlAllStateMessage::mutable_doors_message() {
  set_has_doors_message();
  if (doors_message_ == NULL) {
    doors_message_ = new ::CtrlDoorsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.doors_message)
  return doors_message_;
}
::CtrlDoorsMessage* CtrlAllStateMessage::release_doors_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.doors_message)
  clear_has_doors_message();
  ::CtrlDoorsMessage* temp = doors_message_;
  doors_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_doors_message(::CtrlDoorsMessage* doors_message) {
  delete doors_message_;
  doors_message_ = doors_message;
  if (doors_message) {
    set_has_doors_message();
  } else {
    clear_has_doors_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.doors_message)
}

// optional .CtrlEkeyMessage ekey_message = 6;
bool CtrlAllStateMessage::has_ekey_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CtrlAllStateMessage::set_has_ekey_message() {
  _has_bits_[0] |= 0x00000020u;
}
void CtrlAllStateMessage::clear_has_ekey_message() {
  _has_bits_[0] &= ~0x00000020u;
}
void CtrlAllStateMessage::clear_ekey_message() {
  if (ekey_message_ != NULL) ekey_message_->::CtrlEkeyMessage::Clear();
  clear_has_ekey_message();
}
const ::CtrlEkeyMessage& CtrlAllStateMessage::ekey_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.ekey_message)
  return ekey_message_ != NULL ? *ekey_message_ : *default_instance_->ekey_message_;
}
::CtrlEkeyMessage* CtrlAllStateMessage::mutable_ekey_message() {
  set_has_ekey_message();
  if (ekey_message_ == NULL) {
    ekey_message_ = new ::CtrlEkeyMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.ekey_message)
  return ekey_message_;
}
::CtrlEkeyMessage* CtrlAllStateMessage::release_ekey_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.ekey_message)
  clear_has_ekey_message();
  ::CtrlEkeyMessage* temp = ekey_message_;
  ekey_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_ekey_message(::CtrlEkeyMessage* ekey_message) {
  delete ekey_message_;
  ekey_message_ = ekey_message;
  if (ekey_message) {
    set_has_ekey_message();
  } else {
    clear_has_ekey_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.ekey_message)
}

// optional .CtrlElectromotorMessage electromotor_message = 7;
bool CtrlAllStateMessage::has_electromotor_message() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CtrlAllStateMessage::set_has_electromotor_message() {
  _has_bits_[0] |= 0x00000040u;
}
void CtrlAllStateMessage::clear_has_electromotor_message() {
  _has_bits_[0] &= ~0x00000040u;
}
void CtrlAllStateMessage::clear_electromotor_message() {
  if (electromotor_message_ != NULL) electromotor_message_->::CtrlElectromotorMessage::Clear();
  clear_has_electromotor_message();
}
const ::CtrlElectromotorMessage& CtrlAllStateMessage::electromotor_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.electromotor_message)
  return electromotor_message_ != NULL ? *electromotor_message_ : *default_instance_->electromotor_message_;
}
::CtrlElectromotorMessage* CtrlAllStateMessage::mutable_electromotor_message() {
  set_has_electromotor_message();
  if (electromotor_message_ == NULL) {
    electromotor_message_ = new ::CtrlElectromotorMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.electromotor_message)
  return electromotor_message_;
}
::CtrlElectromotorMessage* CtrlAllStateMessage::release_electromotor_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.electromotor_message)
  clear_has_electromotor_message();
  ::CtrlElectromotorMessage* temp = electromotor_message_;
  electromotor_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_electromotor_message(::CtrlElectromotorMessage* electromotor_message) {
  delete electromotor_message_;
  electromotor_message_ = electromotor_message;
  if (electromotor_message) {
    set_has_electromotor_message();
  } else {
    clear_has_electromotor_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.electromotor_message)
}

// optional .CtrlEngineMessage engine_message = 8;
bool CtrlAllStateMessage::has_engine_message() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CtrlAllStateMessage::set_has_engine_message() {
  _has_bits_[0] |= 0x00000080u;
}
void CtrlAllStateMessage::clear_has_engine_message() {
  _has_bits_[0] &= ~0x00000080u;
}
void CtrlAllStateMessage::clear_engine_message() {
  if (engine_message_ != NULL) engine_message_->::CtrlEngineMessage::Clear();
  clear_has_engine_message();
}
const ::CtrlEngineMessage& CtrlAllStateMessage::engine_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.engine_message)
  return engine_message_ != NULL ? *engine_message_ : *default_instance_->engine_message_;
}
::CtrlEngineMessage* CtrlAllStateMessage::mutable_engine_message() {
  set_has_engine_message();
  if (engine_message_ == NULL) {
    engine_message_ = new ::CtrlEngineMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.engine_message)
  return engine_message_;
}
::CtrlEngineMessage* CtrlAllStateMessage::release_engine_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.engine_message)
  clear_has_engine_message();
  ::CtrlEngineMessage* temp = engine_message_;
  engine_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_engine_message(::CtrlEngineMessage* engine_message) {
  delete engine_message_;
  engine_message_ = engine_message;
  if (engine_message) {
    set_has_engine_message();
  } else {
    clear_has_engine_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.engine_message)
}

// optional .CtrlLightHornMessage light_horn_message = 9;
bool CtrlAllStateMessage::has_light_horn_message() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CtrlAllStateMessage::set_has_light_horn_message() {
  _has_bits_[0] |= 0x00000100u;
}
void CtrlAllStateMessage::clear_has_light_horn_message() {
  _has_bits_[0] &= ~0x00000100u;
}
void CtrlAllStateMessage::clear_light_horn_message() {
  if (light_horn_message_ != NULL) light_horn_message_->::CtrlLightHornMessage::Clear();
  clear_has_light_horn_message();
}
const ::CtrlLightHornMessage& CtrlAllStateMessage::light_horn_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.light_horn_message)
  return light_horn_message_ != NULL ? *light_horn_message_ : *default_instance_->light_horn_message_;
}
::CtrlLightHornMessage* CtrlAllStateMessage::mutable_light_horn_message() {
  set_has_light_horn_message();
  if (light_horn_message_ == NULL) {
    light_horn_message_ = new ::CtrlLightHornMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.light_horn_message)
  return light_horn_message_;
}
::CtrlLightHornMessage* CtrlAllStateMessage::release_light_horn_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.light_horn_message)
  clear_has_light_horn_message();
  ::CtrlLightHornMessage* temp = light_horn_message_;
  light_horn_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_light_horn_message(::CtrlLightHornMessage* light_horn_message) {
  delete light_horn_message_;
  light_horn_message_ = light_horn_message;
  if (light_horn_message) {
    set_has_light_horn_message();
  } else {
    clear_has_light_horn_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.light_horn_message)
}

// optional .CtrlWindowsMessage windows_message = 10;
bool CtrlAllStateMessage::has_windows_message() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CtrlAllStateMessage::set_has_windows_message() {
  _has_bits_[0] |= 0x00000200u;
}
void CtrlAllStateMessage::clear_has_windows_message() {
  _has_bits_[0] &= ~0x00000200u;
}
void CtrlAllStateMessage::clear_windows_message() {
  if (windows_message_ != NULL) windows_message_->::CtrlWindowsMessage::Clear();
  clear_has_windows_message();
}
const ::CtrlWindowsMessage& CtrlAllStateMessage::windows_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.windows_message)
  return windows_message_ != NULL ? *windows_message_ : *default_instance_->windows_message_;
}
::CtrlWindowsMessage* CtrlAllStateMessage::mutable_windows_message() {
  set_has_windows_message();
  if (windows_message_ == NULL) {
    windows_message_ = new ::CtrlWindowsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.windows_message)
  return windows_message_;
}
::CtrlWindowsMessage* CtrlAllStateMessage::release_windows_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.windows_message)
  clear_has_windows_message();
  ::CtrlWindowsMessage* temp = windows_message_;
  windows_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_windows_message(::CtrlWindowsMessage* windows_message) {
  delete windows_message_;
  windows_message_ = windows_message;
  if (windows_message) {
    set_has_windows_message();
  } else {
    clear_has_windows_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.windows_message)
}

// optional .StateOilMassMessage oil_mass_state = 11;
bool CtrlAllStateMessage::has_oil_mass_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CtrlAllStateMessage::set_has_oil_mass_state() {
  _has_bits_[0] |= 0x00000400u;
}
void CtrlAllStateMessage::clear_has_oil_mass_state() {
  _has_bits_[0] &= ~0x00000400u;
}
void CtrlAllStateMessage::clear_oil_mass_state() {
  if (oil_mass_state_ != NULL) oil_mass_state_->::StateOilMassMessage::Clear();
  clear_has_oil_mass_state();
}
const ::StateOilMassMessage& CtrlAllStateMessage::oil_mass_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.oil_mass_state)
  return oil_mass_state_ != NULL ? *oil_mass_state_ : *default_instance_->oil_mass_state_;
}
::StateOilMassMessage* CtrlAllStateMessage::mutable_oil_mass_state() {
  set_has_oil_mass_state();
  if (oil_mass_state_ == NULL) {
    oil_mass_state_ = new ::StateOilMassMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.oil_mass_state)
  return oil_mass_state_;
}
::StateOilMassMessage* CtrlAllStateMessage::release_oil_mass_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.oil_mass_state)
  clear_has_oil_mass_state();
  ::StateOilMassMessage* temp = oil_mass_state_;
  oil_mass_state_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_oil_mass_state(::StateOilMassMessage* oil_mass_state) {
  delete oil_mass_state_;
  oil_mass_state_ = oil_mass_state;
  if (oil_mass_state) {
    set_has_oil_mass_state();
  } else {
    clear_has_oil_mass_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.oil_mass_state)
}

// optional .StateBatteryMessage battery_state = 12;
bool CtrlAllStateMessage::has_battery_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CtrlAllStateMessage::set_has_battery_state() {
  _has_bits_[0] |= 0x00000800u;
}
void CtrlAllStateMessage::clear_has_battery_state() {
  _has_bits_[0] &= ~0x00000800u;
}
void CtrlAllStateMessage::clear_battery_state() {
  if (battery_state_ != NULL) battery_state_->::StateBatteryMessage::Clear();
  clear_has_battery_state();
}
const ::StateBatteryMessage& CtrlAllStateMessage::battery_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.battery_state)
  return battery_state_ != NULL ? *battery_state_ : *default_instance_->battery_state_;
}
::StateBatteryMessage* CtrlAllStateMessage::mutable_battery_state() {
  set_has_battery_state();
  if (battery_state_ == NULL) {
    battery_state_ = new ::StateBatteryMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.battery_state)
  return battery_state_;
}
::StateBatteryMessage* CtrlAllStateMessage::release_battery_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.battery_state)
  clear_has_battery_state();
  ::StateBatteryMessage* temp = battery_state_;
  battery_state_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_battery_state(::StateBatteryMessage* battery_state) {
  delete battery_state_;
  battery_state_ = battery_state;
  if (battery_state) {
    set_has_battery_state();
  } else {
    clear_has_battery_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.battery_state)
}

// optional .StateLightingMessage lighting_state = 13;
bool CtrlAllStateMessage::has_lighting_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CtrlAllStateMessage::set_has_lighting_state() {
  _has_bits_[0] |= 0x00001000u;
}
void CtrlAllStateMessage::clear_has_lighting_state() {
  _has_bits_[0] &= ~0x00001000u;
}
void CtrlAllStateMessage::clear_lighting_state() {
  if (lighting_state_ != NULL) lighting_state_->::StateLightingMessage::Clear();
  clear_has_lighting_state();
}
const ::StateLightingMessage& CtrlAllStateMessage::lighting_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.lighting_state)
  return lighting_state_ != NULL ? *lighting_state_ : *default_instance_->lighting_state_;
}
::StateLightingMessage* CtrlAllStateMessage::mutable_lighting_state() {
  set_has_lighting_state();
  if (lighting_state_ == NULL) {
    lighting_state_ = new ::StateLightingMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.lighting_state)
  return lighting_state_;
}
::StateLightingMessage* CtrlAllStateMessage::release_lighting_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.lighting_state)
  clear_has_lighting_state();
  ::StateLightingMessage* temp = lighting_state_;
  lighting_state_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_lighting_state(::StateLightingMessage* lighting_state) {
  delete lighting_state_;
  lighting_state_ = lighting_state;
  if (lighting_state) {
    set_has_lighting_state();
  } else {
    clear_has_lighting_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.lighting_state)
}

// optional .StateMileageMessage mileage_state = 14;
bool CtrlAllStateMessage::has_mileage_state() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CtrlAllStateMessage::set_has_mileage_state() {
  _has_bits_[0] |= 0x00002000u;
}
void CtrlAllStateMessage::clear_has_mileage_state() {
  _has_bits_[0] &= ~0x00002000u;
}
void CtrlAllStateMessage::clear_mileage_state() {
  if (mileage_state_ != NULL) mileage_state_->::StateMileageMessage::Clear();
  clear_has_mileage_state();
}
const ::StateMileageMessage& CtrlAllStateMessage::mileage_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.mileage_state)
  return mileage_state_ != NULL ? *mileage_state_ : *default_instance_->mileage_state_;
}
::StateMileageMessage* CtrlAllStateMessage::mutable_mileage_state() {
  set_has_mileage_state();
  if (mileage_state_ == NULL) {
    mileage_state_ = new ::StateMileageMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.mileage_state)
  return mileage_state_;
}
::StateMileageMessage* CtrlAllStateMessage::release_mileage_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.mileage_state)
  clear_has_mileage_state();
  ::StateMileageMessage* temp = mileage_state_;
  mileage_state_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_mileage_state(::StateMileageMessage* mileage_state) {
  delete mileage_state_;
  mileage_state_ = mileage_state;
  if (mileage_state) {
    set_has_mileage_state();
  } else {
    clear_has_mileage_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.mileage_state)
}

// optional .StateTyreMessage tyre_state = 15;
bool CtrlAllStateMessage::has_tyre_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CtrlAllStateMessage::set_has_tyre_state() {
  _has_bits_[0] |= 0x00004000u;
}
void CtrlAllStateMessage::clear_has_tyre_state() {
  _has_bits_[0] &= ~0x00004000u;
}
void CtrlAllStateMessage::clear_tyre_state() {
  if (tyre_state_ != NULL) tyre_state_->::StateTyreMessage::Clear();
  clear_has_tyre_state();
}
const ::StateTyreMessage& CtrlAllStateMessage::tyre_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.tyre_state)
  return tyre_state_ != NULL ? *tyre_state_ : *default_instance_->tyre_state_;
}
::StateTyreMessage* CtrlAllStateMessage::mutable_tyre_state() {
  set_has_tyre_state();
  if (tyre_state_ == NULL) {
    tyre_state_ = new ::StateTyreMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.tyre_state)
  return tyre_state_;
}
::StateTyreMessage* CtrlAllStateMessage::release_tyre_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.tyre_state)
  clear_has_tyre_state();
  ::StateTyreMessage* temp = tyre_state_;
  tyre_state_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_tyre_state(::StateTyreMessage* tyre_state) {
  delete tyre_state_;
  tyre_state_ = tyre_state;
  if (tyre_state) {
    set_has_tyre_state();
  } else {
    clear_has_tyre_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.tyre_state)
}

// optional .StateOtherMessage other_state = 16;
bool CtrlAllStateMessage::has_other_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CtrlAllStateMessage::set_has_other_state() {
  _has_bits_[0] |= 0x00008000u;
}
void CtrlAllStateMessage::clear_has_other_state() {
  _has_bits_[0] &= ~0x00008000u;
}
void CtrlAllStateMessage::clear_other_state() {
  if (other_state_ != NULL) other_state_->::StateOtherMessage::Clear();
  clear_has_other_state();
}
const ::StateOtherMessage& CtrlAllStateMessage::other_state() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.other_state)
  return other_state_ != NULL ? *other_state_ : *default_instance_->other_state_;
}
::StateOtherMessage* CtrlAllStateMessage::mutable_other_state() {
  set_has_other_state();
  if (other_state_ == NULL) {
    other_state_ = new ::StateOtherMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.other_state)
  return other_state_;
}
::StateOtherMessage* CtrlAllStateMessage::release_other_state() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.other_state)
  clear_has_other_state();
  ::StateOtherMessage* temp = other_state_;
  other_state_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_other_state(::StateOtherMessage* other_state) {
  delete other_state_;
  other_state_ = other_state;
  if (other_state) {
    set_has_other_state();
  } else {
    clear_has_other_state();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.other_state)
}

// optional .CtrlPrivateInformationMessage private_information_message = 17;
bool CtrlAllStateMessage::has_private_information_message() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CtrlAllStateMessage::set_has_private_information_message() {
  _has_bits_[0] |= 0x00010000u;
}
void CtrlAllStateMessage::clear_has_private_information_message() {
  _has_bits_[0] &= ~0x00010000u;
}
void CtrlAllStateMessage::clear_private_information_message() {
  if (private_information_message_ != NULL) private_information_message_->::CtrlPrivateInformationMessage::Clear();
  clear_has_private_information_message();
}
const ::CtrlPrivateInformationMessage& CtrlAllStateMessage::private_information_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.private_information_message)
  return private_information_message_ != NULL ? *private_information_message_ : *default_instance_->private_information_message_;
}
::CtrlPrivateInformationMessage* CtrlAllStateMessage::mutable_private_information_message() {
  set_has_private_information_message();
  if (private_information_message_ == NULL) {
    private_information_message_ = new ::CtrlPrivateInformationMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.private_information_message)
  return private_information_message_;
}
::CtrlPrivateInformationMessage* CtrlAllStateMessage::release_private_information_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.private_information_message)
  clear_has_private_information_message();
  ::CtrlPrivateInformationMessage* temp = private_information_message_;
  private_information_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_private_information_message(::CtrlPrivateInformationMessage* private_information_message) {
  delete private_information_message_;
  private_information_message_ = private_information_message;
  if (private_information_message) {
    set_has_private_information_message();
  } else {
    clear_has_private_information_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.private_information_message)
}

// optional .CtrlTopWindowsMessage top_windows_message = 18;
bool CtrlAllStateMessage::has_top_windows_message() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CtrlAllStateMessage::set_has_top_windows_message() {
  _has_bits_[0] |= 0x00020000u;
}
void CtrlAllStateMessage::clear_has_top_windows_message() {
  _has_bits_[0] &= ~0x00020000u;
}
void CtrlAllStateMessage::clear_top_windows_message() {
  if (top_windows_message_ != NULL) top_windows_message_->::CtrlTopWindowsMessage::Clear();
  clear_has_top_windows_message();
}
const ::CtrlTopWindowsMessage& CtrlAllStateMessage::top_windows_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.top_windows_message)
  return top_windows_message_ != NULL ? *top_windows_message_ : *default_instance_->top_windows_message_;
}
::CtrlTopWindowsMessage* CtrlAllStateMessage::mutable_top_windows_message() {
  set_has_top_windows_message();
  if (top_windows_message_ == NULL) {
    top_windows_message_ = new ::CtrlTopWindowsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.top_windows_message)
  return top_windows_message_;
}
::CtrlTopWindowsMessage* CtrlAllStateMessage::release_top_windows_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.top_windows_message)
  clear_has_top_windows_message();
  ::CtrlTopWindowsMessage* temp = top_windows_message_;
  top_windows_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_top_windows_message(::CtrlTopWindowsMessage* top_windows_message) {
  delete top_windows_message_;
  top_windows_message_ = top_windows_message;
  if (top_windows_message) {
    set_has_top_windows_message();
  } else {
    clear_has_top_windows_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.top_windows_message)
}

// optional .CtrlTrunkDoorsMessage trunk_doors_message = 19;
bool CtrlAllStateMessage::has_trunk_doors_message() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CtrlAllStateMessage::set_has_trunk_doors_message() {
  _has_bits_[0] |= 0x00040000u;
}
void CtrlAllStateMessage::clear_has_trunk_doors_message() {
  _has_bits_[0] &= ~0x00040000u;
}
void CtrlAllStateMessage::clear_trunk_doors_message() {
  if (trunk_doors_message_ != NULL) trunk_doors_message_->::CtrlTrunkDoorsMessage::Clear();
  clear_has_trunk_doors_message();
}
const ::CtrlTrunkDoorsMessage& CtrlAllStateMessage::trunk_doors_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.trunk_doors_message)
  return trunk_doors_message_ != NULL ? *trunk_doors_message_ : *default_instance_->trunk_doors_message_;
}
::CtrlTrunkDoorsMessage* CtrlAllStateMessage::mutable_trunk_doors_message() {
  set_has_trunk_doors_message();
  if (trunk_doors_message_ == NULL) {
    trunk_doors_message_ = new ::CtrlTrunkDoorsMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.trunk_doors_message)
  return trunk_doors_message_;
}
::CtrlTrunkDoorsMessage* CtrlAllStateMessage::release_trunk_doors_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.trunk_doors_message)
  clear_has_trunk_doors_message();
  ::CtrlTrunkDoorsMessage* temp = trunk_doors_message_;
  trunk_doors_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_trunk_doors_message(::CtrlTrunkDoorsMessage* trunk_doors_message) {
  delete trunk_doors_message_;
  trunk_doors_message_ = trunk_doors_message;
  if (trunk_doors_message) {
    set_has_trunk_doors_message();
  } else {
    clear_has_trunk_doors_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.trunk_doors_message)
}

// optional .CtrlAirTemperatureMessage air_temperature_message = 20;
bool CtrlAllStateMessage::has_air_temperature_message() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CtrlAllStateMessage::set_has_air_temperature_message() {
  _has_bits_[0] |= 0x00080000u;
}
void CtrlAllStateMessage::clear_has_air_temperature_message() {
  _has_bits_[0] &= ~0x00080000u;
}
void CtrlAllStateMessage::clear_air_temperature_message() {
  if (air_temperature_message_ != NULL) air_temperature_message_->::CtrlAirTemperatureMessage::Clear();
  clear_has_air_temperature_message();
}
const ::CtrlAirTemperatureMessage& CtrlAllStateMessage::air_temperature_message() const {
  // @@protoc_insertion_point(field_get:CtrlAllStateMessage.air_temperature_message)
  return air_temperature_message_ != NULL ? *air_temperature_message_ : *default_instance_->air_temperature_message_;
}
::CtrlAirTemperatureMessage* CtrlAllStateMessage::mutable_air_temperature_message() {
  set_has_air_temperature_message();
  if (air_temperature_message_ == NULL) {
    air_temperature_message_ = new ::CtrlAirTemperatureMessage;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAllStateMessage.air_temperature_message)
  return air_temperature_message_;
}
::CtrlAirTemperatureMessage* CtrlAllStateMessage::release_air_temperature_message() {
  // @@protoc_insertion_point(field_release:CtrlAllStateMessage.air_temperature_message)
  clear_has_air_temperature_message();
  ::CtrlAirTemperatureMessage* temp = air_temperature_message_;
  air_temperature_message_ = NULL;
  return temp;
}
void CtrlAllStateMessage::set_allocated_air_temperature_message(::CtrlAirTemperatureMessage* air_temperature_message) {
  delete air_temperature_message_;
  air_temperature_message_ = air_temperature_message;
  if (air_temperature_message) {
    set_has_air_temperature_message();
  } else {
    clear_has_air_temperature_message();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAllStateMessage.air_temperature_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
