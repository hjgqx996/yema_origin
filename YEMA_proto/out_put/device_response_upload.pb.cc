// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_response_upload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "device_response_upload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DeviceResponseUploadMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceResponseUploadMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_device_5fresponse_5fupload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_device_5fresponse_5fupload_2eproto() {
  protobuf_AddDesc_device_5fresponse_5fupload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "device_response_upload.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceResponseUploadMessage_descriptor_ = file->message_type(0);
  static const int DeviceResponseUploadMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponseUploadMessage, device_upload_common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponseUploadMessage, resp_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponseUploadMessage, full_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponseUploadMessage, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponseUploadMessage, upload_url_),
  };
  DeviceResponseUploadMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceResponseUploadMessage_descriptor_,
      DeviceResponseUploadMessage::default_instance_,
      DeviceResponseUploadMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponseUploadMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeviceResponseUploadMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceResponseUploadMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_device_5fresponse_5fupload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceResponseUploadMessage_descriptor_, &DeviceResponseUploadMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_device_5fresponse_5fupload_2eproto() {
  delete DeviceResponseUploadMessage::default_instance_;
  delete DeviceResponseUploadMessage_reflection_;
}

void protobuf_AddDesc_device_5fresponse_5fupload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_device_5fresponse_5fupload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_device_5fupload_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034device_response_upload.proto\032\032device_u"
    "pload_common.proto\"\241\001\n\033DeviceResponseUpl"
    "oadMessage\0228\n\024device_upload_common\030\001 \001(\013"
    "2\032.DeviceUploadCommonMessage\022\021\n\tresp_cod"
    "e\030\002 \001(\r\022\021\n\tfull_name\030\004 \001(\t\022\016\n\006params\030\006 \001"
    "(\t\022\022\n\nupload_url\030\010 \001(\t", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "device_response_upload.proto", &protobuf_RegisterTypes);
  DeviceResponseUploadMessage::default_instance_ = new DeviceResponseUploadMessage();
  DeviceResponseUploadMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_device_5fresponse_5fupload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_device_5fresponse_5fupload_2eproto {
  StaticDescriptorInitializer_device_5fresponse_5fupload_2eproto() {
    protobuf_AddDesc_device_5fresponse_5fupload_2eproto();
  }
} static_descriptor_initializer_device_5fresponse_5fupload_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceResponseUploadMessage::kDeviceUploadCommonFieldNumber;
const int DeviceResponseUploadMessage::kRespCodeFieldNumber;
const int DeviceResponseUploadMessage::kFullNameFieldNumber;
const int DeviceResponseUploadMessage::kParamsFieldNumber;
const int DeviceResponseUploadMessage::kUploadUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceResponseUploadMessage::DeviceResponseUploadMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceResponseUploadMessage)
}

void DeviceResponseUploadMessage::InitAsDefaultInstance() {
  device_upload_common_ = const_cast< ::DeviceUploadCommonMessage*>(&::DeviceUploadCommonMessage::default_instance());
}

DeviceResponseUploadMessage::DeviceResponseUploadMessage(const DeviceResponseUploadMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceResponseUploadMessage)
}

void DeviceResponseUploadMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_upload_common_ = NULL;
  resp_code_ = 0u;
  full_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceResponseUploadMessage::~DeviceResponseUploadMessage() {
  // @@protoc_insertion_point(destructor:DeviceResponseUploadMessage)
  SharedDtor();
}

void DeviceResponseUploadMessage::SharedDtor() {
  full_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete device_upload_common_;
  }
}

void DeviceResponseUploadMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceResponseUploadMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceResponseUploadMessage_descriptor_;
}

const DeviceResponseUploadMessage& DeviceResponseUploadMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fresponse_5fupload_2eproto();
  return *default_instance_;
}

DeviceResponseUploadMessage* DeviceResponseUploadMessage::default_instance_ = NULL;

DeviceResponseUploadMessage* DeviceResponseUploadMessage::New(::google::protobuf::Arena* arena) const {
  DeviceResponseUploadMessage* n = new DeviceResponseUploadMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceResponseUploadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceResponseUploadMessage)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_device_upload_common()) {
      if (device_upload_common_ != NULL) device_upload_common_->::DeviceUploadCommonMessage::Clear();
    }
    resp_code_ = 0u;
    if (has_full_name()) {
      full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_params()) {
      params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_upload_url()) {
      upload_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeviceResponseUploadMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceResponseUploadMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceUploadCommonMessage device_upload_common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_upload_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resp_code;
        break;
      }

      // optional uint32 resp_code = 2;
      case 2: {
        if (tag == 16) {
         parse_resp_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resp_code_)));
          set_has_resp_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_full_name;
        break;
      }

      // optional string full_name = 4;
      case 4: {
        if (tag == 34) {
         parse_full_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->full_name().data(), this->full_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceResponseUploadMessage.full_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // optional string params = 6;
      case 6: {
        if (tag == 50) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceResponseUploadMessage.params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_upload_url;
        break;
      }

      // optional string upload_url = 8;
      case 8: {
        if (tag == 66) {
         parse_upload_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_url().data(), this->upload_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceResponseUploadMessage.upload_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceResponseUploadMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceResponseUploadMessage)
  return false;
#undef DO_
}

void DeviceResponseUploadMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceResponseUploadMessage)
  // optional .DeviceUploadCommonMessage device_upload_common = 1;
  if (has_device_upload_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->device_upload_common_, output);
  }

  // optional uint32 resp_code = 2;
  if (has_resp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resp_code(), output);
  }

  // optional string full_name = 4;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceResponseUploadMessage.full_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->full_name(), output);
  }

  // optional string params = 6;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceResponseUploadMessage.params");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->params(), output);
  }

  // optional string upload_url = 8;
  if (has_upload_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_url().data(), this->upload_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceResponseUploadMessage.upload_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->upload_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceResponseUploadMessage)
}

::google::protobuf::uint8* DeviceResponseUploadMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceResponseUploadMessage)
  // optional .DeviceUploadCommonMessage device_upload_common = 1;
  if (has_device_upload_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->device_upload_common_, false, target);
  }

  // optional uint32 resp_code = 2;
  if (has_resp_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resp_code(), target);
  }

  // optional string full_name = 4;
  if (has_full_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->full_name().data(), this->full_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceResponseUploadMessage.full_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->full_name(), target);
  }

  // optional string params = 6;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceResponseUploadMessage.params");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->params(), target);
  }

  // optional string upload_url = 8;
  if (has_upload_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_url().data(), this->upload_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceResponseUploadMessage.upload_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->upload_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceResponseUploadMessage)
  return target;
}

int DeviceResponseUploadMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceResponseUploadMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .DeviceUploadCommonMessage device_upload_common = 1;
    if (has_device_upload_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_upload_common_);
    }

    // optional uint32 resp_code = 2;
    if (has_resp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resp_code());
    }

    // optional string full_name = 4;
    if (has_full_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_name());
    }

    // optional string params = 6;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

    // optional string upload_url = 8;
    if (has_upload_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_url());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceResponseUploadMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceResponseUploadMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceResponseUploadMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceResponseUploadMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceResponseUploadMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceResponseUploadMessage)
    MergeFrom(*source);
  }
}

void DeviceResponseUploadMessage::MergeFrom(const DeviceResponseUploadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceResponseUploadMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_upload_common()) {
      mutable_device_upload_common()->::DeviceUploadCommonMessage::MergeFrom(from.device_upload_common());
    }
    if (from.has_resp_code()) {
      set_resp_code(from.resp_code());
    }
    if (from.has_full_name()) {
      set_has_full_name();
      full_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_name_);
    }
    if (from.has_params()) {
      set_has_params();
      params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
    }
    if (from.has_upload_url()) {
      set_has_upload_url();
      upload_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_url_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeviceResponseUploadMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceResponseUploadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceResponseUploadMessage::CopyFrom(const DeviceResponseUploadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceResponseUploadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceResponseUploadMessage::IsInitialized() const {

  return true;
}

void DeviceResponseUploadMessage::Swap(DeviceResponseUploadMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceResponseUploadMessage::InternalSwap(DeviceResponseUploadMessage* other) {
  std::swap(device_upload_common_, other->device_upload_common_);
  std::swap(resp_code_, other->resp_code_);
  full_name_.Swap(&other->full_name_);
  params_.Swap(&other->params_);
  upload_url_.Swap(&other->upload_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceResponseUploadMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceResponseUploadMessage_descriptor_;
  metadata.reflection = DeviceResponseUploadMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceResponseUploadMessage

// optional .DeviceUploadCommonMessage device_upload_common = 1;
bool DeviceResponseUploadMessage::has_device_upload_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceResponseUploadMessage::set_has_device_upload_common() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceResponseUploadMessage::clear_has_device_upload_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceResponseUploadMessage::clear_device_upload_common() {
  if (device_upload_common_ != NULL) device_upload_common_->::DeviceUploadCommonMessage::Clear();
  clear_has_device_upload_common();
}
const ::DeviceUploadCommonMessage& DeviceResponseUploadMessage::device_upload_common() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.device_upload_common)
  return device_upload_common_ != NULL ? *device_upload_common_ : *default_instance_->device_upload_common_;
}
::DeviceUploadCommonMessage* DeviceResponseUploadMessage::mutable_device_upload_common() {
  set_has_device_upload_common();
  if (device_upload_common_ == NULL) {
    device_upload_common_ = new ::DeviceUploadCommonMessage;
  }
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.device_upload_common)
  return device_upload_common_;
}
::DeviceUploadCommonMessage* DeviceResponseUploadMessage::release_device_upload_common() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.device_upload_common)
  clear_has_device_upload_common();
  ::DeviceUploadCommonMessage* temp = device_upload_common_;
  device_upload_common_ = NULL;
  return temp;
}
void DeviceResponseUploadMessage::set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common) {
  delete device_upload_common_;
  device_upload_common_ = device_upload_common;
  if (device_upload_common) {
    set_has_device_upload_common();
  } else {
    clear_has_device_upload_common();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.device_upload_common)
}

// optional uint32 resp_code = 2;
bool DeviceResponseUploadMessage::has_resp_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceResponseUploadMessage::set_has_resp_code() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceResponseUploadMessage::clear_has_resp_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceResponseUploadMessage::clear_resp_code() {
  resp_code_ = 0u;
  clear_has_resp_code();
}
 ::google::protobuf::uint32 DeviceResponseUploadMessage::resp_code() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.resp_code)
  return resp_code_;
}
 void DeviceResponseUploadMessage::set_resp_code(::google::protobuf::uint32 value) {
  set_has_resp_code();
  resp_code_ = value;
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.resp_code)
}

// optional string full_name = 4;
bool DeviceResponseUploadMessage::has_full_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceResponseUploadMessage::set_has_full_name() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceResponseUploadMessage::clear_has_full_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceResponseUploadMessage::clear_full_name() {
  full_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_name();
}
 const ::std::string& DeviceResponseUploadMessage::full_name() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.full_name)
  return full_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceResponseUploadMessage::set_full_name(const ::std::string& value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.full_name)
}
 void DeviceResponseUploadMessage::set_full_name(const char* value) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceResponseUploadMessage.full_name)
}
 void DeviceResponseUploadMessage::set_full_name(const char* value, size_t size) {
  set_has_full_name();
  full_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceResponseUploadMessage.full_name)
}
 ::std::string* DeviceResponseUploadMessage::mutable_full_name() {
  set_has_full_name();
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.full_name)
  return full_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceResponseUploadMessage::release_full_name() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.full_name)
  clear_has_full_name();
  return full_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceResponseUploadMessage::set_allocated_full_name(::std::string* full_name) {
  if (full_name != NULL) {
    set_has_full_name();
  } else {
    clear_has_full_name();
  }
  full_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_name);
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.full_name)
}

// optional string params = 6;
bool DeviceResponseUploadMessage::has_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceResponseUploadMessage::set_has_params() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceResponseUploadMessage::clear_has_params() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceResponseUploadMessage::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
 const ::std::string& DeviceResponseUploadMessage::params() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.params)
  return params_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceResponseUploadMessage::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.params)
}
 void DeviceResponseUploadMessage::set_params(const char* value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceResponseUploadMessage.params)
}
 void DeviceResponseUploadMessage::set_params(const char* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceResponseUploadMessage.params)
}
 ::std::string* DeviceResponseUploadMessage::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceResponseUploadMessage::release_params() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.params)
  clear_has_params();
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceResponseUploadMessage::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.params)
}

// optional string upload_url = 8;
bool DeviceResponseUploadMessage::has_upload_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceResponseUploadMessage::set_has_upload_url() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceResponseUploadMessage::clear_has_upload_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceResponseUploadMessage::clear_upload_url() {
  upload_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_url();
}
 const ::std::string& DeviceResponseUploadMessage::upload_url() const {
  // @@protoc_insertion_point(field_get:DeviceResponseUploadMessage.upload_url)
  return upload_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceResponseUploadMessage::set_upload_url(const ::std::string& value) {
  set_has_upload_url();
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceResponseUploadMessage.upload_url)
}
 void DeviceResponseUploadMessage::set_upload_url(const char* value) {
  set_has_upload_url();
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceResponseUploadMessage.upload_url)
}
 void DeviceResponseUploadMessage::set_upload_url(const char* value, size_t size) {
  set_has_upload_url();
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceResponseUploadMessage.upload_url)
}
 ::std::string* DeviceResponseUploadMessage::mutable_upload_url() {
  set_has_upload_url();
  // @@protoc_insertion_point(field_mutable:DeviceResponseUploadMessage.upload_url)
  return upload_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceResponseUploadMessage::release_upload_url() {
  // @@protoc_insertion_point(field_release:DeviceResponseUploadMessage.upload_url)
  clear_has_upload_url();
  return upload_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceResponseUploadMessage::set_allocated_upload_url(::std::string* upload_url) {
  if (upload_url != NULL) {
    set_has_upload_url();
  } else {
    clear_has_upload_url();
  }
  upload_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_url);
  // @@protoc_insertion_point(field_set_allocated:DeviceResponseUploadMessage.upload_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
