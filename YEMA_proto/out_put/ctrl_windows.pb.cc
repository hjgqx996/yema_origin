// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_windows.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_windows.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlWindowsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlWindowsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* WindowsCtrlInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WindowsCtrlInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WindowsStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WindowsStateInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WindowPos_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WindowStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5fwindows_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5fwindows_2eproto() {
  protobuf_AddDesc_ctrl_5fwindows_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_windows.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlWindowsMessage_descriptor_ = file->message_type(0);
  static const int CtrlWindowsMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlWindowsMessage, common_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlWindowsMessage, windows_ctrl_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlWindowsMessage, windows_state_info_),
  };
  CtrlWindowsMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlWindowsMessage_descriptor_,
      CtrlWindowsMessage::default_instance_,
      CtrlWindowsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlWindowsMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlWindowsMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlWindowsMessage, _internal_metadata_),
      -1);
  WindowsCtrlInfo_descriptor_ = file->message_type(1);
  static const int WindowsCtrlInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsCtrlInfo, window_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsCtrlInfo, window_opened_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsCtrlInfo, result_),
  };
  WindowsCtrlInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WindowsCtrlInfo_descriptor_,
      WindowsCtrlInfo::default_instance_,
      WindowsCtrlInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsCtrlInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(WindowsCtrlInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsCtrlInfo, _internal_metadata_),
      -1);
  WindowsStateInfo_descriptor_ = file->message_type(2);
  static const int WindowsStateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsStateInfo, window_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsStateInfo, window_opened_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsStateInfo, window_status_),
  };
  WindowsStateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WindowsStateInfo_descriptor_,
      WindowsStateInfo::default_instance_,
      WindowsStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsStateInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(WindowsStateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindowsStateInfo, _internal_metadata_),
      -1);
  WindowPos_descriptor_ = file->enum_type(0);
  WindowStatus_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5fwindows_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlWindowsMessage_descriptor_, &CtrlWindowsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WindowsCtrlInfo_descriptor_, &WindowsCtrlInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WindowsStateInfo_descriptor_, &WindowsStateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5fwindows_2eproto() {
  delete CtrlWindowsMessage::default_instance_;
  delete CtrlWindowsMessage_reflection_;
  delete WindowsCtrlInfo::default_instance_;
  delete WindowsCtrlInfo_reflection_;
  delete WindowsStateInfo::default_instance_;
  delete WindowsStateInfo_reflection_;
}

void protobuf_AddDesc_ctrl_5fwindows_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5fwindows_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ctrl_5fcommon_5fparam_5ftbox_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ctrl_windows.proto\032\034ctrl_common_param_"
    "tbox.proto\"\234\001\n\022CtrlWindowsMessage\022*\n\014com"
    "mon_param\030\001 \001(\0132\024.CtrlCommonParamTbox\022+\n"
    "\021windows_ctrl_info\030\002 \003(\0132\020.WindowsCtrlIn"
    "fo\022-\n\022windows_state_info\030\004 \003(\0132\021.Windows"
    "StateInfo\"^\n\017WindowsCtrlInfo\022\036\n\nwindow_p"
    "os\030\001 \001(\0162\n.WindowPos\022\033\n\023window_opened_va"
    "lue\030\002 \001(\r\022\016\n\006result\030\003 \001(\005\"u\n\020WindowsStat"
    "eInfo\022\036\n\nwindow_pos\030\001 \001(\0162\n.WindowPos\022\033\n"
    "\023window_opened_value\030\002 \001(\r\022$\n\rwindow_sta"
    "tus\030\003 \001(\0162\r.WindowStatus*g\n\tWindowPos\022\025\n"
    "\021LEFT_FRONT_WINDOW\020\001\022\026\n\022RIGHT_FRONT_WIND"
    "OW\020\002\022\025\n\021RIGHT_BACK_WINDOW\020\003\022\024\n\020LEFT_BACK"
    "_WINDOW\020\004*\266\001\n\014WindowStatus\022\021\n\rWINDOW_CLO"
    "SED\020\000\022\021\n\rWINDOW_OPENED\020\001\022\013\n\007STOPPED\020\002\022\022\n"
    "\016AUTO_UP_MOVING\020\003\022\024\n\020MANUAL_UP_MOVING\020\004\022"
    "\024\n\020AUTO_DOWN_MOVING\020\005\022\026\n\022MANUAL_DOWN_MOV"
    "ING\020\006\022\033\n\026STATE_EXCEPTION_STATUS\020\377\001B/\n\034co"
    "m.mx.server.remote.v2.beanB\017CtrlWindowsB"
    "ean", 763);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_windows.proto", &protobuf_RegisterTypes);
  CtrlWindowsMessage::default_instance_ = new CtrlWindowsMessage();
  WindowsCtrlInfo::default_instance_ = new WindowsCtrlInfo();
  WindowsStateInfo::default_instance_ = new WindowsStateInfo();
  CtrlWindowsMessage::default_instance_->InitAsDefaultInstance();
  WindowsCtrlInfo::default_instance_->InitAsDefaultInstance();
  WindowsStateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5fwindows_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5fwindows_2eproto {
  StaticDescriptorInitializer_ctrl_5fwindows_2eproto() {
    protobuf_AddDesc_ctrl_5fwindows_2eproto();
  }
} static_descriptor_initializer_ctrl_5fwindows_2eproto_;
const ::google::protobuf::EnumDescriptor* WindowPos_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindowPos_descriptor_;
}
bool WindowPos_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WindowStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindowStatus_descriptor_;
}
bool WindowStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlWindowsMessage::kCommonParamFieldNumber;
const int CtrlWindowsMessage::kWindowsCtrlInfoFieldNumber;
const int CtrlWindowsMessage::kWindowsStateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlWindowsMessage::CtrlWindowsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlWindowsMessage)
}

void CtrlWindowsMessage::InitAsDefaultInstance() {
  common_param_ = const_cast< ::CtrlCommonParamTbox*>(&::CtrlCommonParamTbox::default_instance());
}

CtrlWindowsMessage::CtrlWindowsMessage(const CtrlWindowsMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlWindowsMessage)
}

void CtrlWindowsMessage::SharedCtor() {
  _cached_size_ = 0;
  common_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlWindowsMessage::~CtrlWindowsMessage() {
  // @@protoc_insertion_point(destructor:CtrlWindowsMessage)
  SharedDtor();
}

void CtrlWindowsMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_param_;
  }
}

void CtrlWindowsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlWindowsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlWindowsMessage_descriptor_;
}

const CtrlWindowsMessage& CtrlWindowsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fwindows_2eproto();
  return *default_instance_;
}

CtrlWindowsMessage* CtrlWindowsMessage::default_instance_ = NULL;

CtrlWindowsMessage* CtrlWindowsMessage::New(::google::protobuf::Arena* arena) const {
  CtrlWindowsMessage* n = new CtrlWindowsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlWindowsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlWindowsMessage)
  if (has_common_param()) {
    if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  }
  windows_ctrl_info_.Clear();
  windows_state_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlWindowsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlWindowsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CtrlCommonParamTbox common_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_windows_ctrl_info;
        break;
      }

      // repeated .WindowsCtrlInfo windows_ctrl_info = 2;
      case 2: {
        if (tag == 18) {
         parse_windows_ctrl_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_windows_ctrl_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_windows_ctrl_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_windows_ctrl_info;
        if (input->ExpectTag(34)) goto parse_loop_windows_state_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .WindowsStateInfo windows_state_info = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_windows_state_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_windows_state_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_windows_state_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlWindowsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlWindowsMessage)
  return false;
#undef DO_
}

void CtrlWindowsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlWindowsMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_param_, output);
  }

  // repeated .WindowsCtrlInfo windows_ctrl_info = 2;
  for (unsigned int i = 0, n = this->windows_ctrl_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->windows_ctrl_info(i), output);
  }

  // repeated .WindowsStateInfo windows_state_info = 4;
  for (unsigned int i = 0, n = this->windows_state_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->windows_state_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlWindowsMessage)
}

::google::protobuf::uint8* CtrlWindowsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlWindowsMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_param_, false, target);
  }

  // repeated .WindowsCtrlInfo windows_ctrl_info = 2;
  for (unsigned int i = 0, n = this->windows_ctrl_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->windows_ctrl_info(i), false, target);
  }

  // repeated .WindowsStateInfo windows_state_info = 4;
  for (unsigned int i = 0, n = this->windows_state_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->windows_state_info(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlWindowsMessage)
  return target;
}

int CtrlWindowsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlWindowsMessage)
  int total_size = 0;

  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->common_param_);
  }

  // repeated .WindowsCtrlInfo windows_ctrl_info = 2;
  total_size += 1 * this->windows_ctrl_info_size();
  for (int i = 0; i < this->windows_ctrl_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->windows_ctrl_info(i));
  }

  // repeated .WindowsStateInfo windows_state_info = 4;
  total_size += 1 * this->windows_state_info_size();
  for (int i = 0; i < this->windows_state_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->windows_state_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlWindowsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlWindowsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlWindowsMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlWindowsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlWindowsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlWindowsMessage)
    MergeFrom(*source);
  }
}

void CtrlWindowsMessage::MergeFrom(const CtrlWindowsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlWindowsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  windows_ctrl_info_.MergeFrom(from.windows_ctrl_info_);
  windows_state_info_.MergeFrom(from.windows_state_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_param()) {
      mutable_common_param()->::CtrlCommonParamTbox::MergeFrom(from.common_param());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlWindowsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlWindowsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlWindowsMessage::CopyFrom(const CtrlWindowsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlWindowsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlWindowsMessage::IsInitialized() const {

  return true;
}

void CtrlWindowsMessage::Swap(CtrlWindowsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlWindowsMessage::InternalSwap(CtrlWindowsMessage* other) {
  std::swap(common_param_, other->common_param_);
  windows_ctrl_info_.UnsafeArenaSwap(&other->windows_ctrl_info_);
  windows_state_info_.UnsafeArenaSwap(&other->windows_state_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlWindowsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlWindowsMessage_descriptor_;
  metadata.reflection = CtrlWindowsMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlWindowsMessage

// optional .CtrlCommonParamTbox common_param = 1;
bool CtrlWindowsMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlWindowsMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlWindowsMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlWindowsMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
const ::CtrlCommonParamTbox& CtrlWindowsMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlWindowsMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
::CtrlCommonParamTbox* CtrlWindowsMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlWindowsMessage.common_param)
  return common_param_;
}
::CtrlCommonParamTbox* CtrlWindowsMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlWindowsMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
void CtrlWindowsMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlWindowsMessage.common_param)
}

// repeated .WindowsCtrlInfo windows_ctrl_info = 2;
int CtrlWindowsMessage::windows_ctrl_info_size() const {
  return windows_ctrl_info_.size();
}
void CtrlWindowsMessage::clear_windows_ctrl_info() {
  windows_ctrl_info_.Clear();
}
const ::WindowsCtrlInfo& CtrlWindowsMessage::windows_ctrl_info(int index) const {
  // @@protoc_insertion_point(field_get:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_.Get(index);
}
::WindowsCtrlInfo* CtrlWindowsMessage::mutable_windows_ctrl_info(int index) {
  // @@protoc_insertion_point(field_mutable:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_.Mutable(index);
}
::WindowsCtrlInfo* CtrlWindowsMessage::add_windows_ctrl_info() {
  // @@protoc_insertion_point(field_add:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::WindowsCtrlInfo >*
CtrlWindowsMessage::mutable_windows_ctrl_info() {
  // @@protoc_insertion_point(field_mutable_list:CtrlWindowsMessage.windows_ctrl_info)
  return &windows_ctrl_info_;
}
const ::google::protobuf::RepeatedPtrField< ::WindowsCtrlInfo >&
CtrlWindowsMessage::windows_ctrl_info() const {
  // @@protoc_insertion_point(field_list:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_;
}

// repeated .WindowsStateInfo windows_state_info = 4;
int CtrlWindowsMessage::windows_state_info_size() const {
  return windows_state_info_.size();
}
void CtrlWindowsMessage::clear_windows_state_info() {
  windows_state_info_.Clear();
}
const ::WindowsStateInfo& CtrlWindowsMessage::windows_state_info(int index) const {
  // @@protoc_insertion_point(field_get:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_.Get(index);
}
::WindowsStateInfo* CtrlWindowsMessage::mutable_windows_state_info(int index) {
  // @@protoc_insertion_point(field_mutable:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_.Mutable(index);
}
::WindowsStateInfo* CtrlWindowsMessage::add_windows_state_info() {
  // @@protoc_insertion_point(field_add:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::WindowsStateInfo >*
CtrlWindowsMessage::mutable_windows_state_info() {
  // @@protoc_insertion_point(field_mutable_list:CtrlWindowsMessage.windows_state_info)
  return &windows_state_info_;
}
const ::google::protobuf::RepeatedPtrField< ::WindowsStateInfo >&
CtrlWindowsMessage::windows_state_info() const {
  // @@protoc_insertion_point(field_list:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowsCtrlInfo::kWindowPosFieldNumber;
const int WindowsCtrlInfo::kWindowOpenedValueFieldNumber;
const int WindowsCtrlInfo::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowsCtrlInfo::WindowsCtrlInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WindowsCtrlInfo)
}

void WindowsCtrlInfo::InitAsDefaultInstance() {
}

WindowsCtrlInfo::WindowsCtrlInfo(const WindowsCtrlInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WindowsCtrlInfo)
}

void WindowsCtrlInfo::SharedCtor() {
  _cached_size_ = 0;
  window_pos_ = 1;
  window_opened_value_ = 0u;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WindowsCtrlInfo::~WindowsCtrlInfo() {
  // @@protoc_insertion_point(destructor:WindowsCtrlInfo)
  SharedDtor();
}

void WindowsCtrlInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WindowsCtrlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowsCtrlInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindowsCtrlInfo_descriptor_;
}

const WindowsCtrlInfo& WindowsCtrlInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fwindows_2eproto();
  return *default_instance_;
}

WindowsCtrlInfo* WindowsCtrlInfo::default_instance_ = NULL;

WindowsCtrlInfo* WindowsCtrlInfo::New(::google::protobuf::Arena* arena) const {
  WindowsCtrlInfo* n = new WindowsCtrlInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowsCtrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WindowsCtrlInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WindowsCtrlInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WindowsCtrlInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(window_opened_value_, result_);
    window_pos_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WindowsCtrlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WindowsCtrlInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WindowPos window_pos = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WindowPos_IsValid(value)) {
            set_window_pos(static_cast< ::WindowPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_window_opened_value;
        break;
      }

      // optional uint32 window_opened_value = 2;
      case 2: {
        if (tag == 16) {
         parse_window_opened_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &window_opened_value_)));
          set_has_window_opened_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WindowsCtrlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WindowsCtrlInfo)
  return false;
#undef DO_
}

void WindowsCtrlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WindowsCtrlInfo)
  // optional .WindowPos window_pos = 1;
  if (has_window_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->window_pos(), output);
  }

  // optional uint32 window_opened_value = 2;
  if (has_window_opened_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->window_opened_value(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WindowsCtrlInfo)
}

::google::protobuf::uint8* WindowsCtrlInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WindowsCtrlInfo)
  // optional .WindowPos window_pos = 1;
  if (has_window_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->window_pos(), target);
  }

  // optional uint32 window_opened_value = 2;
  if (has_window_opened_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->window_opened_value(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WindowsCtrlInfo)
  return target;
}

int WindowsCtrlInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:WindowsCtrlInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .WindowPos window_pos = 1;
    if (has_window_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->window_pos());
    }

    // optional uint32 window_opened_value = 2;
    if (has_window_opened_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->window_opened_value());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowsCtrlInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WindowsCtrlInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WindowsCtrlInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowsCtrlInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WindowsCtrlInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WindowsCtrlInfo)
    MergeFrom(*source);
  }
}

void WindowsCtrlInfo::MergeFrom(const WindowsCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WindowsCtrlInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_pos()) {
      set_window_pos(from.window_pos());
    }
    if (from.has_window_opened_value()) {
      set_window_opened_value(from.window_opened_value());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WindowsCtrlInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WindowsCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowsCtrlInfo::CopyFrom(const WindowsCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WindowsCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowsCtrlInfo::IsInitialized() const {

  return true;
}

void WindowsCtrlInfo::Swap(WindowsCtrlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowsCtrlInfo::InternalSwap(WindowsCtrlInfo* other) {
  std::swap(window_pos_, other->window_pos_);
  std::swap(window_opened_value_, other->window_opened_value_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowsCtrlInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WindowsCtrlInfo_descriptor_;
  metadata.reflection = WindowsCtrlInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowsCtrlInfo

// optional .WindowPos window_pos = 1;
bool WindowsCtrlInfo::has_window_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WindowsCtrlInfo::set_has_window_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void WindowsCtrlInfo::clear_has_window_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void WindowsCtrlInfo::clear_window_pos() {
  window_pos_ = 1;
  clear_has_window_pos();
}
 ::WindowPos WindowsCtrlInfo::window_pos() const {
  // @@protoc_insertion_point(field_get:WindowsCtrlInfo.window_pos)
  return static_cast< ::WindowPos >(window_pos_);
}
 void WindowsCtrlInfo::set_window_pos(::WindowPos value) {
  assert(::WindowPos_IsValid(value));
  set_has_window_pos();
  window_pos_ = value;
  // @@protoc_insertion_point(field_set:WindowsCtrlInfo.window_pos)
}

// optional uint32 window_opened_value = 2;
bool WindowsCtrlInfo::has_window_opened_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WindowsCtrlInfo::set_has_window_opened_value() {
  _has_bits_[0] |= 0x00000002u;
}
void WindowsCtrlInfo::clear_has_window_opened_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void WindowsCtrlInfo::clear_window_opened_value() {
  window_opened_value_ = 0u;
  clear_has_window_opened_value();
}
 ::google::protobuf::uint32 WindowsCtrlInfo::window_opened_value() const {
  // @@protoc_insertion_point(field_get:WindowsCtrlInfo.window_opened_value)
  return window_opened_value_;
}
 void WindowsCtrlInfo::set_window_opened_value(::google::protobuf::uint32 value) {
  set_has_window_opened_value();
  window_opened_value_ = value;
  // @@protoc_insertion_point(field_set:WindowsCtrlInfo.window_opened_value)
}

// optional int32 result = 3;
bool WindowsCtrlInfo::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WindowsCtrlInfo::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void WindowsCtrlInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void WindowsCtrlInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 WindowsCtrlInfo::result() const {
  // @@protoc_insertion_point(field_get:WindowsCtrlInfo.result)
  return result_;
}
 void WindowsCtrlInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:WindowsCtrlInfo.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindowsStateInfo::kWindowPosFieldNumber;
const int WindowsStateInfo::kWindowOpenedValueFieldNumber;
const int WindowsStateInfo::kWindowStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindowsStateInfo::WindowsStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WindowsStateInfo)
}

void WindowsStateInfo::InitAsDefaultInstance() {
}

WindowsStateInfo::WindowsStateInfo(const WindowsStateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WindowsStateInfo)
}

void WindowsStateInfo::SharedCtor() {
  _cached_size_ = 0;
  window_pos_ = 1;
  window_opened_value_ = 0u;
  window_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WindowsStateInfo::~WindowsStateInfo() {
  // @@protoc_insertion_point(destructor:WindowsStateInfo)
  SharedDtor();
}

void WindowsStateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WindowsStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindowsStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WindowsStateInfo_descriptor_;
}

const WindowsStateInfo& WindowsStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fwindows_2eproto();
  return *default_instance_;
}

WindowsStateInfo* WindowsStateInfo::default_instance_ = NULL;

WindowsStateInfo* WindowsStateInfo::New(::google::protobuf::Arena* arena) const {
  WindowsStateInfo* n = new WindowsStateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindowsStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WindowsStateInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WindowsStateInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WindowsStateInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(window_opened_value_, window_status_);
    window_pos_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WindowsStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WindowsStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WindowPos window_pos = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WindowPos_IsValid(value)) {
            set_window_pos(static_cast< ::WindowPos >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_window_opened_value;
        break;
      }

      // optional uint32 window_opened_value = 2;
      case 2: {
        if (tag == 16) {
         parse_window_opened_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &window_opened_value_)));
          set_has_window_opened_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_window_status;
        break;
      }

      // optional .WindowStatus window_status = 3;
      case 3: {
        if (tag == 24) {
         parse_window_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WindowStatus_IsValid(value)) {
            set_window_status(static_cast< ::WindowStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WindowsStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WindowsStateInfo)
  return false;
#undef DO_
}

void WindowsStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WindowsStateInfo)
  // optional .WindowPos window_pos = 1;
  if (has_window_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->window_pos(), output);
  }

  // optional uint32 window_opened_value = 2;
  if (has_window_opened_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->window_opened_value(), output);
  }

  // optional .WindowStatus window_status = 3;
  if (has_window_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->window_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WindowsStateInfo)
}

::google::protobuf::uint8* WindowsStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WindowsStateInfo)
  // optional .WindowPos window_pos = 1;
  if (has_window_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->window_pos(), target);
  }

  // optional uint32 window_opened_value = 2;
  if (has_window_opened_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->window_opened_value(), target);
  }

  // optional .WindowStatus window_status = 3;
  if (has_window_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->window_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WindowsStateInfo)
  return target;
}

int WindowsStateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:WindowsStateInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .WindowPos window_pos = 1;
    if (has_window_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->window_pos());
    }

    // optional uint32 window_opened_value = 2;
    if (has_window_opened_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->window_opened_value());
    }

    // optional .WindowStatus window_status = 3;
    if (has_window_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->window_status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindowsStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WindowsStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WindowsStateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WindowsStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WindowsStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WindowsStateInfo)
    MergeFrom(*source);
  }
}

void WindowsStateInfo::MergeFrom(const WindowsStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WindowsStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_pos()) {
      set_window_pos(from.window_pos());
    }
    if (from.has_window_opened_value()) {
      set_window_opened_value(from.window_opened_value());
    }
    if (from.has_window_status()) {
      set_window_status(from.window_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WindowsStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WindowsStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowsStateInfo::CopyFrom(const WindowsStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WindowsStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowsStateInfo::IsInitialized() const {

  return true;
}

void WindowsStateInfo::Swap(WindowsStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindowsStateInfo::InternalSwap(WindowsStateInfo* other) {
  std::swap(window_pos_, other->window_pos_);
  std::swap(window_opened_value_, other->window_opened_value_);
  std::swap(window_status_, other->window_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindowsStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WindowsStateInfo_descriptor_;
  metadata.reflection = WindowsStateInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindowsStateInfo

// optional .WindowPos window_pos = 1;
bool WindowsStateInfo::has_window_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WindowsStateInfo::set_has_window_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void WindowsStateInfo::clear_has_window_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void WindowsStateInfo::clear_window_pos() {
  window_pos_ = 1;
  clear_has_window_pos();
}
 ::WindowPos WindowsStateInfo::window_pos() const {
  // @@protoc_insertion_point(field_get:WindowsStateInfo.window_pos)
  return static_cast< ::WindowPos >(window_pos_);
}
 void WindowsStateInfo::set_window_pos(::WindowPos value) {
  assert(::WindowPos_IsValid(value));
  set_has_window_pos();
  window_pos_ = value;
  // @@protoc_insertion_point(field_set:WindowsStateInfo.window_pos)
}

// optional uint32 window_opened_value = 2;
bool WindowsStateInfo::has_window_opened_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WindowsStateInfo::set_has_window_opened_value() {
  _has_bits_[0] |= 0x00000002u;
}
void WindowsStateInfo::clear_has_window_opened_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void WindowsStateInfo::clear_window_opened_value() {
  window_opened_value_ = 0u;
  clear_has_window_opened_value();
}
 ::google::protobuf::uint32 WindowsStateInfo::window_opened_value() const {
  // @@protoc_insertion_point(field_get:WindowsStateInfo.window_opened_value)
  return window_opened_value_;
}
 void WindowsStateInfo::set_window_opened_value(::google::protobuf::uint32 value) {
  set_has_window_opened_value();
  window_opened_value_ = value;
  // @@protoc_insertion_point(field_set:WindowsStateInfo.window_opened_value)
}

// optional .WindowStatus window_status = 3;
bool WindowsStateInfo::has_window_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WindowsStateInfo::set_has_window_status() {
  _has_bits_[0] |= 0x00000004u;
}
void WindowsStateInfo::clear_has_window_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void WindowsStateInfo::clear_window_status() {
  window_status_ = 0;
  clear_has_window_status();
}
 ::WindowStatus WindowsStateInfo::window_status() const {
  // @@protoc_insertion_point(field_get:WindowsStateInfo.window_status)
  return static_cast< ::WindowStatus >(window_status_);
}
 void WindowsStateInfo::set_window_status(::WindowStatus value) {
  assert(::WindowStatus_IsValid(value));
  set_has_window_status();
  window_status_ = value;
  // @@protoc_insertion_point(field_set:WindowsStateInfo.window_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
