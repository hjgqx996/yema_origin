// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_tbox_param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_tbox_param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlTboxParamMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlTboxParamMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogLevel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto() {
  protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_tbox_param.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlTboxParamMessage_descriptor_ = file->message_type(0);
  static const int CtrlTboxParamMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTboxParamMessage, config_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTboxParamMessage, version_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTboxParamMessage, state_info_),
  };
  CtrlTboxParamMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlTboxParamMessage_descriptor_,
      CtrlTboxParamMessage::default_instance_,
      CtrlTboxParamMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTboxParamMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlTboxParamMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTboxParamMessage, _internal_metadata_),
      -1);
  ConfigInfo_descriptor_ = file->message_type(1);
  static const int ConfigInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, local_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, report_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, alarm_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, enterprise_platform_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, enterprise_platform_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, public_platform_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, public_platform_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, tbox_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, platform_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, heartbeat_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, mode_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, mode_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, mode_time_quantum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, log_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, offline_config_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, peps_security_auth_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, tbox_usb_net_switch_),
  };
  ConfigInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigInfo_descriptor_,
      ConfigInfo::default_instance_,
      ConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfigInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _internal_metadata_),
      -1);
  VersionInfo_descriptor_ = file->message_type(2);
  static const int VersionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, upper_ware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, lower_ware_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, upper_firmware_version_),
  };
  VersionInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VersionInfo_descriptor_,
      VersionInfo::default_instance_,
      VersionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(VersionInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionInfo, _internal_metadata_),
      -1);
  StateInfo_descriptor_ = file->message_type(3);
  static const int StateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateInfo, sampling_),
  };
  StateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StateInfo_descriptor_,
      StateInfo::default_instance_,
      StateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(StateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateInfo, _internal_metadata_),
      -1);
  ModeType_descriptor_ = file->enum_type(0);
  LogLevel_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlTboxParamMessage_descriptor_, &CtrlTboxParamMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigInfo_descriptor_, &ConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VersionInfo_descriptor_, &VersionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateInfo_descriptor_, &StateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5ftbox_5fparam_2eproto() {
  delete CtrlTboxParamMessage::default_instance_;
  delete CtrlTboxParamMessage_reflection_;
  delete ConfigInfo::default_instance_;
  delete ConfigInfo_reflection_;
  delete VersionInfo::default_instance_;
  delete VersionInfo_reflection_;
  delete StateInfo::default_instance_;
  delete StateInfo_reflection_;
}

void protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ctrl_tbox_param.proto\"|\n\024CtrlTboxParam"
    "Message\022 \n\013config_info\030\001 \001(\0132\013.ConfigInf"
    "o\022\"\n\014version_info\030\002 \001(\0132\014.VersionInfo\022\036\n"
    "\nstate_info\030\003 \001(\0132\n.StateInfo\"\360\003\n\nConfig"
    "Info\022\023\n\013local_cycle\030\001 \001(\r\022\024\n\014report_cycl"
    "e\030\002 \001(\r\022\023\n\013alarm_cycle\030\003 \001(\r\022\037\n\027enterpri"
    "se_platform_url\030\004 \001(\t\022 \n\030enterprise_plat"
    "form_port\030\005 \001(\r\022\033\n\023public_platform_url\030\006"
    " \001(\t\022\034\n\024public_platform_port\030\007 \001(\r\022\024\n\014tb"
    "ox_timeout\030\010 \001(\r\022\030\n\020platform_timeout\030\t \001"
    "(\r\022\020\n\010interval\030\n \001(\r\022\027\n\017heartbeat_cycle\030"
    "\013 \001(\r\022\034\n\tmode_type\030\014 \001(\0162\t.ModeType\022\027\n\017m"
    "ode_begin_time\030\r \001(\006\022\031\n\021mode_time_quantu"
    "m\030\016 \001(\r\022\034\n\tlog_level\030\017 \001(\0162\t.LogLevel\022\034\n"
    "\024offline_config_param\030\020 \001(\t\022\036\n\026peps_secu"
    "rity_auth_key\030\021 \001(\t\022\033\n\023tbox_usb_net_swit"
    "ch\030\022 \001(\r\"e\n\013VersionInfo\022\032\n\022upper_ware_ve"
    "rsion\030\001 \001(\t\022\032\n\022lower_ware_version\030\002 \001(\t\022"
    "\036\n\026upper_firmware_version\030\003 \001(\t\"\035\n\tState"
    "Info\022\020\n\010sampling\030\001 \001(\010*P\n\010ModeType\022\n\n\006NO"
    "RMAL\020\000\022\021\n\rCAN_FILE_MODE\020\001\022\022\n\016TBOX_FILE_M"
    "ODE\020\002\022\021\n\rSAMPLING_MODE\020\003*G\n\010LogLevel\022\r\n\t"
    "LOG_ERROR\020\000\022\017\n\013LOG_WARNING\020\001\022\014\n\010LOG_INFO"
    "\020\002\022\r\n\tLOG_DEBUG\020\003B1\n\034com.mx.server.remot"
    "e.v2.beanB\021CtrlTboxParamBean", 988);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_tbox_param.proto", &protobuf_RegisterTypes);
  CtrlTboxParamMessage::default_instance_ = new CtrlTboxParamMessage();
  ConfigInfo::default_instance_ = new ConfigInfo();
  VersionInfo::default_instance_ = new VersionInfo();
  StateInfo::default_instance_ = new StateInfo();
  CtrlTboxParamMessage::default_instance_->InitAsDefaultInstance();
  ConfigInfo::default_instance_->InitAsDefaultInstance();
  VersionInfo::default_instance_->InitAsDefaultInstance();
  StateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5ftbox_5fparam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5ftbox_5fparam_2eproto {
  StaticDescriptorInitializer_ctrl_5ftbox_5fparam_2eproto() {
    protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  }
} static_descriptor_initializer_ctrl_5ftbox_5fparam_2eproto_;
const ::google::protobuf::EnumDescriptor* ModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModeType_descriptor_;
}
bool ModeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogLevel_descriptor_;
}
bool LogLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlTboxParamMessage::kConfigInfoFieldNumber;
const int CtrlTboxParamMessage::kVersionInfoFieldNumber;
const int CtrlTboxParamMessage::kStateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlTboxParamMessage::CtrlTboxParamMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlTboxParamMessage)
}

void CtrlTboxParamMessage::InitAsDefaultInstance() {
  config_info_ = const_cast< ::ConfigInfo*>(&::ConfigInfo::default_instance());
  version_info_ = const_cast< ::VersionInfo*>(&::VersionInfo::default_instance());
  state_info_ = const_cast< ::StateInfo*>(&::StateInfo::default_instance());
}

CtrlTboxParamMessage::CtrlTboxParamMessage(const CtrlTboxParamMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlTboxParamMessage)
}

void CtrlTboxParamMessage::SharedCtor() {
  _cached_size_ = 0;
  config_info_ = NULL;
  version_info_ = NULL;
  state_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlTboxParamMessage::~CtrlTboxParamMessage() {
  // @@protoc_insertion_point(destructor:CtrlTboxParamMessage)
  SharedDtor();
}

void CtrlTboxParamMessage::SharedDtor() {
  if (this != default_instance_) {
    delete config_info_;
    delete version_info_;
    delete state_info_;
  }
}

void CtrlTboxParamMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlTboxParamMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlTboxParamMessage_descriptor_;
}

const CtrlTboxParamMessage& CtrlTboxParamMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  return *default_instance_;
}

CtrlTboxParamMessage* CtrlTboxParamMessage::default_instance_ = NULL;

CtrlTboxParamMessage* CtrlTboxParamMessage::New(::google::protobuf::Arena* arena) const {
  CtrlTboxParamMessage* n = new CtrlTboxParamMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlTboxParamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlTboxParamMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_config_info()) {
      if (config_info_ != NULL) config_info_->::ConfigInfo::Clear();
    }
    if (has_version_info()) {
      if (version_info_ != NULL) version_info_->::VersionInfo::Clear();
    }
    if (has_state_info()) {
      if (state_info_ != NULL) state_info_->::StateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlTboxParamMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlTboxParamMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ConfigInfo config_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version_info;
        break;
      }

      // optional .VersionInfo version_info = 2;
      case 2: {
        if (tag == 18) {
         parse_version_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_state_info;
        break;
      }

      // optional .StateInfo state_info = 3;
      case 3: {
        if (tag == 26) {
         parse_state_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlTboxParamMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlTboxParamMessage)
  return false;
#undef DO_
}

void CtrlTboxParamMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlTboxParamMessage)
  // optional .ConfigInfo config_info = 1;
  if (has_config_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->config_info_, output);
  }

  // optional .VersionInfo version_info = 2;
  if (has_version_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->version_info_, output);
  }

  // optional .StateInfo state_info = 3;
  if (has_state_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->state_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlTboxParamMessage)
}

::google::protobuf::uint8* CtrlTboxParamMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlTboxParamMessage)
  // optional .ConfigInfo config_info = 1;
  if (has_config_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->config_info_, false, target);
  }

  // optional .VersionInfo version_info = 2;
  if (has_version_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->version_info_, false, target);
  }

  // optional .StateInfo state_info = 3;
  if (has_state_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->state_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlTboxParamMessage)
  return target;
}

int CtrlTboxParamMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlTboxParamMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .ConfigInfo config_info = 1;
    if (has_config_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_info_);
    }

    // optional .VersionInfo version_info = 2;
    if (has_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->version_info_);
    }

    // optional .StateInfo state_info = 3;
    if (has_state_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->state_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlTboxParamMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlTboxParamMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlTboxParamMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlTboxParamMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlTboxParamMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlTboxParamMessage)
    MergeFrom(*source);
  }
}

void CtrlTboxParamMessage::MergeFrom(const CtrlTboxParamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlTboxParamMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_info()) {
      mutable_config_info()->::ConfigInfo::MergeFrom(from.config_info());
    }
    if (from.has_version_info()) {
      mutable_version_info()->::VersionInfo::MergeFrom(from.version_info());
    }
    if (from.has_state_info()) {
      mutable_state_info()->::StateInfo::MergeFrom(from.state_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlTboxParamMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlTboxParamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlTboxParamMessage::CopyFrom(const CtrlTboxParamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlTboxParamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlTboxParamMessage::IsInitialized() const {

  return true;
}

void CtrlTboxParamMessage::Swap(CtrlTboxParamMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlTboxParamMessage::InternalSwap(CtrlTboxParamMessage* other) {
  std::swap(config_info_, other->config_info_);
  std::swap(version_info_, other->version_info_);
  std::swap(state_info_, other->state_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlTboxParamMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlTboxParamMessage_descriptor_;
  metadata.reflection = CtrlTboxParamMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlTboxParamMessage

// optional .ConfigInfo config_info = 1;
bool CtrlTboxParamMessage::has_config_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlTboxParamMessage::set_has_config_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlTboxParamMessage::clear_has_config_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlTboxParamMessage::clear_config_info() {
  if (config_info_ != NULL) config_info_->::ConfigInfo::Clear();
  clear_has_config_info();
}
const ::ConfigInfo& CtrlTboxParamMessage::config_info() const {
  // @@protoc_insertion_point(field_get:CtrlTboxParamMessage.config_info)
  return config_info_ != NULL ? *config_info_ : *default_instance_->config_info_;
}
::ConfigInfo* CtrlTboxParamMessage::mutable_config_info() {
  set_has_config_info();
  if (config_info_ == NULL) {
    config_info_ = new ::ConfigInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTboxParamMessage.config_info)
  return config_info_;
}
::ConfigInfo* CtrlTboxParamMessage::release_config_info() {
  // @@protoc_insertion_point(field_release:CtrlTboxParamMessage.config_info)
  clear_has_config_info();
  ::ConfigInfo* temp = config_info_;
  config_info_ = NULL;
  return temp;
}
void CtrlTboxParamMessage::set_allocated_config_info(::ConfigInfo* config_info) {
  delete config_info_;
  config_info_ = config_info;
  if (config_info) {
    set_has_config_info();
  } else {
    clear_has_config_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTboxParamMessage.config_info)
}

// optional .VersionInfo version_info = 2;
bool CtrlTboxParamMessage::has_version_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlTboxParamMessage::set_has_version_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlTboxParamMessage::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlTboxParamMessage::clear_version_info() {
  if (version_info_ != NULL) version_info_->::VersionInfo::Clear();
  clear_has_version_info();
}
const ::VersionInfo& CtrlTboxParamMessage::version_info() const {
  // @@protoc_insertion_point(field_get:CtrlTboxParamMessage.version_info)
  return version_info_ != NULL ? *version_info_ : *default_instance_->version_info_;
}
::VersionInfo* CtrlTboxParamMessage::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) {
    version_info_ = new ::VersionInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTboxParamMessage.version_info)
  return version_info_;
}
::VersionInfo* CtrlTboxParamMessage::release_version_info() {
  // @@protoc_insertion_point(field_release:CtrlTboxParamMessage.version_info)
  clear_has_version_info();
  ::VersionInfo* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
void CtrlTboxParamMessage::set_allocated_version_info(::VersionInfo* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTboxParamMessage.version_info)
}

// optional .StateInfo state_info = 3;
bool CtrlTboxParamMessage::has_state_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlTboxParamMessage::set_has_state_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlTboxParamMessage::clear_has_state_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlTboxParamMessage::clear_state_info() {
  if (state_info_ != NULL) state_info_->::StateInfo::Clear();
  clear_has_state_info();
}
const ::StateInfo& CtrlTboxParamMessage::state_info() const {
  // @@protoc_insertion_point(field_get:CtrlTboxParamMessage.state_info)
  return state_info_ != NULL ? *state_info_ : *default_instance_->state_info_;
}
::StateInfo* CtrlTboxParamMessage::mutable_state_info() {
  set_has_state_info();
  if (state_info_ == NULL) {
    state_info_ = new ::StateInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTboxParamMessage.state_info)
  return state_info_;
}
::StateInfo* CtrlTboxParamMessage::release_state_info() {
  // @@protoc_insertion_point(field_release:CtrlTboxParamMessage.state_info)
  clear_has_state_info();
  ::StateInfo* temp = state_info_;
  state_info_ = NULL;
  return temp;
}
void CtrlTboxParamMessage::set_allocated_state_info(::StateInfo* state_info) {
  delete state_info_;
  state_info_ = state_info;
  if (state_info) {
    set_has_state_info();
  } else {
    clear_has_state_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTboxParamMessage.state_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigInfo::kLocalCycleFieldNumber;
const int ConfigInfo::kReportCycleFieldNumber;
const int ConfigInfo::kAlarmCycleFieldNumber;
const int ConfigInfo::kEnterprisePlatformUrlFieldNumber;
const int ConfigInfo::kEnterprisePlatformPortFieldNumber;
const int ConfigInfo::kPublicPlatformUrlFieldNumber;
const int ConfigInfo::kPublicPlatformPortFieldNumber;
const int ConfigInfo::kTboxTimeoutFieldNumber;
const int ConfigInfo::kPlatformTimeoutFieldNumber;
const int ConfigInfo::kIntervalFieldNumber;
const int ConfigInfo::kHeartbeatCycleFieldNumber;
const int ConfigInfo::kModeTypeFieldNumber;
const int ConfigInfo::kModeBeginTimeFieldNumber;
const int ConfigInfo::kModeTimeQuantumFieldNumber;
const int ConfigInfo::kLogLevelFieldNumber;
const int ConfigInfo::kOfflineConfigParamFieldNumber;
const int ConfigInfo::kPepsSecurityAuthKeyFieldNumber;
const int ConfigInfo::kTboxUsbNetSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigInfo::ConfigInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigInfo)
}

void ConfigInfo::InitAsDefaultInstance() {
}

ConfigInfo::ConfigInfo(const ConfigInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigInfo)
}

void ConfigInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  local_cycle_ = 0u;
  report_cycle_ = 0u;
  alarm_cycle_ = 0u;
  enterprise_platform_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enterprise_platform_port_ = 0u;
  public_platform_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_platform_port_ = 0u;
  tbox_timeout_ = 0u;
  platform_timeout_ = 0u;
  interval_ = 0u;
  heartbeat_cycle_ = 0u;
  mode_type_ = 0;
  mode_begin_time_ = GOOGLE_ULONGLONG(0);
  mode_time_quantum_ = 0u;
  log_level_ = 0;
  offline_config_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peps_security_auth_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tbox_usb_net_switch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigInfo::~ConfigInfo() {
  // @@protoc_insertion_point(destructor:ConfigInfo)
  SharedDtor();
}

void ConfigInfo::SharedDtor() {
  enterprise_platform_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_platform_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offline_config_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peps_security_auth_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigInfo_descriptor_;
}

const ConfigInfo& ConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  return *default_instance_;
}

ConfigInfo* ConfigInfo::default_instance_ = NULL;

ConfigInfo* ConfigInfo::New(::google::protobuf::Arena* arena) const {
  ConfigInfo* n = new ConfigInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(local_cycle_, report_cycle_);
    ZR_(alarm_cycle_, enterprise_platform_port_);
    ZR_(public_platform_port_, tbox_timeout_);
    if (has_enterprise_platform_url()) {
      enterprise_platform_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_public_platform_url()) {
      public_platform_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(platform_timeout_, log_level_);
    if (has_offline_config_param()) {
      offline_config_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    if (has_peps_security_auth_key()) {
      peps_security_auth_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tbox_usb_net_switch_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 local_cycle = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &local_cycle_)));
          set_has_local_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_report_cycle;
        break;
      }

      // optional uint32 report_cycle = 2;
      case 2: {
        if (tag == 16) {
         parse_report_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &report_cycle_)));
          set_has_report_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_alarm_cycle;
        break;
      }

      // optional uint32 alarm_cycle = 3;
      case 3: {
        if (tag == 24) {
         parse_alarm_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alarm_cycle_)));
          set_has_alarm_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_enterprise_platform_url;
        break;
      }

      // optional string enterprise_platform_url = 4;
      case 4: {
        if (tag == 34) {
         parse_enterprise_platform_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enterprise_platform_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enterprise_platform_url().data(), this->enterprise_platform_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConfigInfo.enterprise_platform_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enterprise_platform_port;
        break;
      }

      // optional uint32 enterprise_platform_port = 5;
      case 5: {
        if (tag == 40) {
         parse_enterprise_platform_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enterprise_platform_port_)));
          set_has_enterprise_platform_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_public_platform_url;
        break;
      }

      // optional string public_platform_url = 6;
      case 6: {
        if (tag == 50) {
         parse_public_platform_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_platform_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_platform_url().data(), this->public_platform_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConfigInfo.public_platform_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_public_platform_port;
        break;
      }

      // optional uint32 public_platform_port = 7;
      case 7: {
        if (tag == 56) {
         parse_public_platform_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_platform_port_)));
          set_has_public_platform_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tbox_timeout;
        break;
      }

      // optional uint32 tbox_timeout = 8;
      case 8: {
        if (tag == 64) {
         parse_tbox_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbox_timeout_)));
          set_has_tbox_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_platform_timeout;
        break;
      }

      // optional uint32 platform_timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_platform_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platform_timeout_)));
          set_has_platform_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_interval;
        break;
      }

      // optional uint32 interval = 10;
      case 10: {
        if (tag == 80) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_heartbeat_cycle;
        break;
      }

      // optional uint32 heartbeat_cycle = 11;
      case 11: {
        if (tag == 88) {
         parse_heartbeat_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_cycle_)));
          set_has_heartbeat_cycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mode_type;
        break;
      }

      // optional .ModeType mode_type = 12;
      case 12: {
        if (tag == 96) {
         parse_mode_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ModeType_IsValid(value)) {
            set_mode_type(static_cast< ::ModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_mode_begin_time;
        break;
      }

      // optional fixed64 mode_begin_time = 13;
      case 13: {
        if (tag == 105) {
         parse_mode_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mode_begin_time_)));
          set_has_mode_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mode_time_quantum;
        break;
      }

      // optional uint32 mode_time_quantum = 14;
      case 14: {
        if (tag == 112) {
         parse_mode_time_quantum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_time_quantum_)));
          set_has_mode_time_quantum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_log_level;
        break;
      }

      // optional .LogLevel log_level = 15;
      case 15: {
        if (tag == 120) {
         parse_log_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LogLevel_IsValid(value)) {
            set_log_level(static_cast< ::LogLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_offline_config_param;
        break;
      }

      // optional string offline_config_param = 16;
      case 16: {
        if (tag == 130) {
         parse_offline_config_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offline_config_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->offline_config_param().data(), this->offline_config_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConfigInfo.offline_config_param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_peps_security_auth_key;
        break;
      }

      // optional string peps_security_auth_key = 17;
      case 17: {
        if (tag == 138) {
         parse_peps_security_auth_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peps_security_auth_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peps_security_auth_key().data(), this->peps_security_auth_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConfigInfo.peps_security_auth_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_tbox_usb_net_switch;
        break;
      }

      // optional uint32 tbox_usb_net_switch = 18;
      case 18: {
        if (tag == 144) {
         parse_tbox_usb_net_switch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbox_usb_net_switch_)));
          set_has_tbox_usb_net_switch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigInfo)
  return false;
#undef DO_
}

void ConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigInfo)
  // optional uint32 local_cycle = 1;
  if (has_local_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->local_cycle(), output);
  }

  // optional uint32 report_cycle = 2;
  if (has_report_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->report_cycle(), output);
  }

  // optional uint32 alarm_cycle = 3;
  if (has_alarm_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->alarm_cycle(), output);
  }

  // optional string enterprise_platform_url = 4;
  if (has_enterprise_platform_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enterprise_platform_url().data(), this->enterprise_platform_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.enterprise_platform_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->enterprise_platform_url(), output);
  }

  // optional uint32 enterprise_platform_port = 5;
  if (has_enterprise_platform_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->enterprise_platform_port(), output);
  }

  // optional string public_platform_url = 6;
  if (has_public_platform_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_platform_url().data(), this->public_platform_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.public_platform_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->public_platform_url(), output);
  }

  // optional uint32 public_platform_port = 7;
  if (has_public_platform_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->public_platform_port(), output);
  }

  // optional uint32 tbox_timeout = 8;
  if (has_tbox_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tbox_timeout(), output);
  }

  // optional uint32 platform_timeout = 9;
  if (has_platform_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->platform_timeout(), output);
  }

  // optional uint32 interval = 10;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->interval(), output);
  }

  // optional uint32 heartbeat_cycle = 11;
  if (has_heartbeat_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->heartbeat_cycle(), output);
  }

  // optional .ModeType mode_type = 12;
  if (has_mode_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->mode_type(), output);
  }

  // optional fixed64 mode_begin_time = 13;
  if (has_mode_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->mode_begin_time(), output);
  }

  // optional uint32 mode_time_quantum = 14;
  if (has_mode_time_quantum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mode_time_quantum(), output);
  }

  // optional .LogLevel log_level = 15;
  if (has_log_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->log_level(), output);
  }

  // optional string offline_config_param = 16;
  if (has_offline_config_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offline_config_param().data(), this->offline_config_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.offline_config_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->offline_config_param(), output);
  }

  // optional string peps_security_auth_key = 17;
  if (has_peps_security_auth_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peps_security_auth_key().data(), this->peps_security_auth_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.peps_security_auth_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->peps_security_auth_key(), output);
  }

  // optional uint32 tbox_usb_net_switch = 18;
  if (has_tbox_usb_net_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tbox_usb_net_switch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigInfo)
}

::google::protobuf::uint8* ConfigInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigInfo)
  // optional uint32 local_cycle = 1;
  if (has_local_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->local_cycle(), target);
  }

  // optional uint32 report_cycle = 2;
  if (has_report_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->report_cycle(), target);
  }

  // optional uint32 alarm_cycle = 3;
  if (has_alarm_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->alarm_cycle(), target);
  }

  // optional string enterprise_platform_url = 4;
  if (has_enterprise_platform_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enterprise_platform_url().data(), this->enterprise_platform_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.enterprise_platform_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->enterprise_platform_url(), target);
  }

  // optional uint32 enterprise_platform_port = 5;
  if (has_enterprise_platform_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->enterprise_platform_port(), target);
  }

  // optional string public_platform_url = 6;
  if (has_public_platform_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_platform_url().data(), this->public_platform_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.public_platform_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->public_platform_url(), target);
  }

  // optional uint32 public_platform_port = 7;
  if (has_public_platform_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->public_platform_port(), target);
  }

  // optional uint32 tbox_timeout = 8;
  if (has_tbox_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tbox_timeout(), target);
  }

  // optional uint32 platform_timeout = 9;
  if (has_platform_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->platform_timeout(), target);
  }

  // optional uint32 interval = 10;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->interval(), target);
  }

  // optional uint32 heartbeat_cycle = 11;
  if (has_heartbeat_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->heartbeat_cycle(), target);
  }

  // optional .ModeType mode_type = 12;
  if (has_mode_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->mode_type(), target);
  }

  // optional fixed64 mode_begin_time = 13;
  if (has_mode_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->mode_begin_time(), target);
  }

  // optional uint32 mode_time_quantum = 14;
  if (has_mode_time_quantum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->mode_time_quantum(), target);
  }

  // optional .LogLevel log_level = 15;
  if (has_log_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->log_level(), target);
  }

  // optional string offline_config_param = 16;
  if (has_offline_config_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->offline_config_param().data(), this->offline_config_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.offline_config_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->offline_config_param(), target);
  }

  // optional string peps_security_auth_key = 17;
  if (has_peps_security_auth_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peps_security_auth_key().data(), this->peps_security_auth_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConfigInfo.peps_security_auth_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->peps_security_auth_key(), target);
  }

  // optional uint32 tbox_usb_net_switch = 18;
  if (has_tbox_usb_net_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tbox_usb_net_switch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigInfo)
  return target;
}

int ConfigInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 local_cycle = 1;
    if (has_local_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->local_cycle());
    }

    // optional uint32 report_cycle = 2;
    if (has_report_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->report_cycle());
    }

    // optional uint32 alarm_cycle = 3;
    if (has_alarm_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alarm_cycle());
    }

    // optional string enterprise_platform_url = 4;
    if (has_enterprise_platform_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enterprise_platform_url());
    }

    // optional uint32 enterprise_platform_port = 5;
    if (has_enterprise_platform_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enterprise_platform_port());
    }

    // optional string public_platform_url = 6;
    if (has_public_platform_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_platform_url());
    }

    // optional uint32 public_platform_port = 7;
    if (has_public_platform_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_platform_port());
    }

    // optional uint32 tbox_timeout = 8;
    if (has_tbox_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbox_timeout());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 platform_timeout = 9;
    if (has_platform_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platform_timeout());
    }

    // optional uint32 interval = 10;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

    // optional uint32 heartbeat_cycle = 11;
    if (has_heartbeat_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_cycle());
    }

    // optional .ModeType mode_type = 12;
    if (has_mode_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode_type());
    }

    // optional fixed64 mode_begin_time = 13;
    if (has_mode_begin_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 mode_time_quantum = 14;
    if (has_mode_time_quantum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode_time_quantum());
    }

    // optional .LogLevel log_level = 15;
    if (has_log_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->log_level());
    }

    // optional string offline_config_param = 16;
    if (has_offline_config_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->offline_config_param());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string peps_security_auth_key = 17;
    if (has_peps_security_auth_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peps_security_auth_key());
    }

    // optional uint32 tbox_usb_net_switch = 18;
    if (has_tbox_usb_net_switch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbox_usb_net_switch());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigInfo)
    MergeFrom(*source);
  }
}

void ConfigInfo::MergeFrom(const ConfigInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_cycle()) {
      set_local_cycle(from.local_cycle());
    }
    if (from.has_report_cycle()) {
      set_report_cycle(from.report_cycle());
    }
    if (from.has_alarm_cycle()) {
      set_alarm_cycle(from.alarm_cycle());
    }
    if (from.has_enterprise_platform_url()) {
      set_has_enterprise_platform_url();
      enterprise_platform_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enterprise_platform_url_);
    }
    if (from.has_enterprise_platform_port()) {
      set_enterprise_platform_port(from.enterprise_platform_port());
    }
    if (from.has_public_platform_url()) {
      set_has_public_platform_url();
      public_platform_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_platform_url_);
    }
    if (from.has_public_platform_port()) {
      set_public_platform_port(from.public_platform_port());
    }
    if (from.has_tbox_timeout()) {
      set_tbox_timeout(from.tbox_timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_platform_timeout()) {
      set_platform_timeout(from.platform_timeout());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_heartbeat_cycle()) {
      set_heartbeat_cycle(from.heartbeat_cycle());
    }
    if (from.has_mode_type()) {
      set_mode_type(from.mode_type());
    }
    if (from.has_mode_begin_time()) {
      set_mode_begin_time(from.mode_begin_time());
    }
    if (from.has_mode_time_quantum()) {
      set_mode_time_quantum(from.mode_time_quantum());
    }
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
    if (from.has_offline_config_param()) {
      set_has_offline_config_param();
      offline_config_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.offline_config_param_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_peps_security_auth_key()) {
      set_has_peps_security_auth_key();
      peps_security_auth_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peps_security_auth_key_);
    }
    if (from.has_tbox_usb_net_switch()) {
      set_tbox_usb_net_switch(from.tbox_usb_net_switch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigInfo::CopyFrom(const ConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigInfo::IsInitialized() const {

  return true;
}

void ConfigInfo::Swap(ConfigInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigInfo::InternalSwap(ConfigInfo* other) {
  std::swap(local_cycle_, other->local_cycle_);
  std::swap(report_cycle_, other->report_cycle_);
  std::swap(alarm_cycle_, other->alarm_cycle_);
  enterprise_platform_url_.Swap(&other->enterprise_platform_url_);
  std::swap(enterprise_platform_port_, other->enterprise_platform_port_);
  public_platform_url_.Swap(&other->public_platform_url_);
  std::swap(public_platform_port_, other->public_platform_port_);
  std::swap(tbox_timeout_, other->tbox_timeout_);
  std::swap(platform_timeout_, other->platform_timeout_);
  std::swap(interval_, other->interval_);
  std::swap(heartbeat_cycle_, other->heartbeat_cycle_);
  std::swap(mode_type_, other->mode_type_);
  std::swap(mode_begin_time_, other->mode_begin_time_);
  std::swap(mode_time_quantum_, other->mode_time_quantum_);
  std::swap(log_level_, other->log_level_);
  offline_config_param_.Swap(&other->offline_config_param_);
  peps_security_auth_key_.Swap(&other->peps_security_auth_key_);
  std::swap(tbox_usb_net_switch_, other->tbox_usb_net_switch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigInfo_descriptor_;
  metadata.reflection = ConfigInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigInfo

// optional uint32 local_cycle = 1;
bool ConfigInfo::has_local_cycle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigInfo::set_has_local_cycle() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigInfo::clear_has_local_cycle() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigInfo::clear_local_cycle() {
  local_cycle_ = 0u;
  clear_has_local_cycle();
}
 ::google::protobuf::uint32 ConfigInfo::local_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.local_cycle)
  return local_cycle_;
}
 void ConfigInfo::set_local_cycle(::google::protobuf::uint32 value) {
  set_has_local_cycle();
  local_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.local_cycle)
}

// optional uint32 report_cycle = 2;
bool ConfigInfo::has_report_cycle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigInfo::set_has_report_cycle() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigInfo::clear_has_report_cycle() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigInfo::clear_report_cycle() {
  report_cycle_ = 0u;
  clear_has_report_cycle();
}
 ::google::protobuf::uint32 ConfigInfo::report_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.report_cycle)
  return report_cycle_;
}
 void ConfigInfo::set_report_cycle(::google::protobuf::uint32 value) {
  set_has_report_cycle();
  report_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.report_cycle)
}

// optional uint32 alarm_cycle = 3;
bool ConfigInfo::has_alarm_cycle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigInfo::set_has_alarm_cycle() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigInfo::clear_has_alarm_cycle() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigInfo::clear_alarm_cycle() {
  alarm_cycle_ = 0u;
  clear_has_alarm_cycle();
}
 ::google::protobuf::uint32 ConfigInfo::alarm_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.alarm_cycle)
  return alarm_cycle_;
}
 void ConfigInfo::set_alarm_cycle(::google::protobuf::uint32 value) {
  set_has_alarm_cycle();
  alarm_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.alarm_cycle)
}

// optional string enterprise_platform_url = 4;
bool ConfigInfo::has_enterprise_platform_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConfigInfo::set_has_enterprise_platform_url() {
  _has_bits_[0] |= 0x00000008u;
}
void ConfigInfo::clear_has_enterprise_platform_url() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConfigInfo::clear_enterprise_platform_url() {
  enterprise_platform_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enterprise_platform_url();
}
 const ::std::string& ConfigInfo::enterprise_platform_url() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.enterprise_platform_url)
  return enterprise_platform_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_enterprise_platform_url(const ::std::string& value) {
  set_has_enterprise_platform_url();
  enterprise_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.enterprise_platform_url)
}
 void ConfigInfo::set_enterprise_platform_url(const char* value) {
  set_has_enterprise_platform_url();
  enterprise_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.enterprise_platform_url)
}
 void ConfigInfo::set_enterprise_platform_url(const char* value, size_t size) {
  set_has_enterprise_platform_url();
  enterprise_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.enterprise_platform_url)
}
 ::std::string* ConfigInfo::mutable_enterprise_platform_url() {
  set_has_enterprise_platform_url();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.enterprise_platform_url)
  return enterprise_platform_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigInfo::release_enterprise_platform_url() {
  // @@protoc_insertion_point(field_release:ConfigInfo.enterprise_platform_url)
  clear_has_enterprise_platform_url();
  return enterprise_platform_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_allocated_enterprise_platform_url(::std::string* enterprise_platform_url) {
  if (enterprise_platform_url != NULL) {
    set_has_enterprise_platform_url();
  } else {
    clear_has_enterprise_platform_url();
  }
  enterprise_platform_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enterprise_platform_url);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.enterprise_platform_url)
}

// optional uint32 enterprise_platform_port = 5;
bool ConfigInfo::has_enterprise_platform_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConfigInfo::set_has_enterprise_platform_port() {
  _has_bits_[0] |= 0x00000010u;
}
void ConfigInfo::clear_has_enterprise_platform_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConfigInfo::clear_enterprise_platform_port() {
  enterprise_platform_port_ = 0u;
  clear_has_enterprise_platform_port();
}
 ::google::protobuf::uint32 ConfigInfo::enterprise_platform_port() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.enterprise_platform_port)
  return enterprise_platform_port_;
}
 void ConfigInfo::set_enterprise_platform_port(::google::protobuf::uint32 value) {
  set_has_enterprise_platform_port();
  enterprise_platform_port_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.enterprise_platform_port)
}

// optional string public_platform_url = 6;
bool ConfigInfo::has_public_platform_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConfigInfo::set_has_public_platform_url() {
  _has_bits_[0] |= 0x00000020u;
}
void ConfigInfo::clear_has_public_platform_url() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConfigInfo::clear_public_platform_url() {
  public_platform_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_platform_url();
}
 const ::std::string& ConfigInfo::public_platform_url() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.public_platform_url)
  return public_platform_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_public_platform_url(const ::std::string& value) {
  set_has_public_platform_url();
  public_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.public_platform_url)
}
 void ConfigInfo::set_public_platform_url(const char* value) {
  set_has_public_platform_url();
  public_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.public_platform_url)
}
 void ConfigInfo::set_public_platform_url(const char* value, size_t size) {
  set_has_public_platform_url();
  public_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.public_platform_url)
}
 ::std::string* ConfigInfo::mutable_public_platform_url() {
  set_has_public_platform_url();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.public_platform_url)
  return public_platform_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigInfo::release_public_platform_url() {
  // @@protoc_insertion_point(field_release:ConfigInfo.public_platform_url)
  clear_has_public_platform_url();
  return public_platform_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_allocated_public_platform_url(::std::string* public_platform_url) {
  if (public_platform_url != NULL) {
    set_has_public_platform_url();
  } else {
    clear_has_public_platform_url();
  }
  public_platform_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_platform_url);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.public_platform_url)
}

// optional uint32 public_platform_port = 7;
bool ConfigInfo::has_public_platform_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConfigInfo::set_has_public_platform_port() {
  _has_bits_[0] |= 0x00000040u;
}
void ConfigInfo::clear_has_public_platform_port() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConfigInfo::clear_public_platform_port() {
  public_platform_port_ = 0u;
  clear_has_public_platform_port();
}
 ::google::protobuf::uint32 ConfigInfo::public_platform_port() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.public_platform_port)
  return public_platform_port_;
}
 void ConfigInfo::set_public_platform_port(::google::protobuf::uint32 value) {
  set_has_public_platform_port();
  public_platform_port_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.public_platform_port)
}

// optional uint32 tbox_timeout = 8;
bool ConfigInfo::has_tbox_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConfigInfo::set_has_tbox_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
void ConfigInfo::clear_has_tbox_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConfigInfo::clear_tbox_timeout() {
  tbox_timeout_ = 0u;
  clear_has_tbox_timeout();
}
 ::google::protobuf::uint32 ConfigInfo::tbox_timeout() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.tbox_timeout)
  return tbox_timeout_;
}
 void ConfigInfo::set_tbox_timeout(::google::protobuf::uint32 value) {
  set_has_tbox_timeout();
  tbox_timeout_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.tbox_timeout)
}

// optional uint32 platform_timeout = 9;
bool ConfigInfo::has_platform_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConfigInfo::set_has_platform_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
void ConfigInfo::clear_has_platform_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConfigInfo::clear_platform_timeout() {
  platform_timeout_ = 0u;
  clear_has_platform_timeout();
}
 ::google::protobuf::uint32 ConfigInfo::platform_timeout() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.platform_timeout)
  return platform_timeout_;
}
 void ConfigInfo::set_platform_timeout(::google::protobuf::uint32 value) {
  set_has_platform_timeout();
  platform_timeout_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.platform_timeout)
}

// optional uint32 interval = 10;
bool ConfigInfo::has_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConfigInfo::set_has_interval() {
  _has_bits_[0] |= 0x00000200u;
}
void ConfigInfo::clear_has_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConfigInfo::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
 ::google::protobuf::uint32 ConfigInfo::interval() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.interval)
  return interval_;
}
 void ConfigInfo::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.interval)
}

// optional uint32 heartbeat_cycle = 11;
bool ConfigInfo::has_heartbeat_cycle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConfigInfo::set_has_heartbeat_cycle() {
  _has_bits_[0] |= 0x00000400u;
}
void ConfigInfo::clear_has_heartbeat_cycle() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConfigInfo::clear_heartbeat_cycle() {
  heartbeat_cycle_ = 0u;
  clear_has_heartbeat_cycle();
}
 ::google::protobuf::uint32 ConfigInfo::heartbeat_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.heartbeat_cycle)
  return heartbeat_cycle_;
}
 void ConfigInfo::set_heartbeat_cycle(::google::protobuf::uint32 value) {
  set_has_heartbeat_cycle();
  heartbeat_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.heartbeat_cycle)
}

// optional .ModeType mode_type = 12;
bool ConfigInfo::has_mode_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConfigInfo::set_has_mode_type() {
  _has_bits_[0] |= 0x00000800u;
}
void ConfigInfo::clear_has_mode_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConfigInfo::clear_mode_type() {
  mode_type_ = 0;
  clear_has_mode_type();
}
 ::ModeType ConfigInfo::mode_type() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.mode_type)
  return static_cast< ::ModeType >(mode_type_);
}
 void ConfigInfo::set_mode_type(::ModeType value) {
  assert(::ModeType_IsValid(value));
  set_has_mode_type();
  mode_type_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.mode_type)
}

// optional fixed64 mode_begin_time = 13;
bool ConfigInfo::has_mode_begin_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ConfigInfo::set_has_mode_begin_time() {
  _has_bits_[0] |= 0x00001000u;
}
void ConfigInfo::clear_has_mode_begin_time() {
  _has_bits_[0] &= ~0x00001000u;
}
void ConfigInfo::clear_mode_begin_time() {
  mode_begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_mode_begin_time();
}
 ::google::protobuf::uint64 ConfigInfo::mode_begin_time() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.mode_begin_time)
  return mode_begin_time_;
}
 void ConfigInfo::set_mode_begin_time(::google::protobuf::uint64 value) {
  set_has_mode_begin_time();
  mode_begin_time_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.mode_begin_time)
}

// optional uint32 mode_time_quantum = 14;
bool ConfigInfo::has_mode_time_quantum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ConfigInfo::set_has_mode_time_quantum() {
  _has_bits_[0] |= 0x00002000u;
}
void ConfigInfo::clear_has_mode_time_quantum() {
  _has_bits_[0] &= ~0x00002000u;
}
void ConfigInfo::clear_mode_time_quantum() {
  mode_time_quantum_ = 0u;
  clear_has_mode_time_quantum();
}
 ::google::protobuf::uint32 ConfigInfo::mode_time_quantum() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.mode_time_quantum)
  return mode_time_quantum_;
}
 void ConfigInfo::set_mode_time_quantum(::google::protobuf::uint32 value) {
  set_has_mode_time_quantum();
  mode_time_quantum_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.mode_time_quantum)
}

// optional .LogLevel log_level = 15;
bool ConfigInfo::has_log_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ConfigInfo::set_has_log_level() {
  _has_bits_[0] |= 0x00004000u;
}
void ConfigInfo::clear_has_log_level() {
  _has_bits_[0] &= ~0x00004000u;
}
void ConfigInfo::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
 ::LogLevel ConfigInfo::log_level() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.log_level)
  return static_cast< ::LogLevel >(log_level_);
}
 void ConfigInfo::set_log_level(::LogLevel value) {
  assert(::LogLevel_IsValid(value));
  set_has_log_level();
  log_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.log_level)
}

// optional string offline_config_param = 16;
bool ConfigInfo::has_offline_config_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ConfigInfo::set_has_offline_config_param() {
  _has_bits_[0] |= 0x00008000u;
}
void ConfigInfo::clear_has_offline_config_param() {
  _has_bits_[0] &= ~0x00008000u;
}
void ConfigInfo::clear_offline_config_param() {
  offline_config_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_offline_config_param();
}
 const ::std::string& ConfigInfo::offline_config_param() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.offline_config_param)
  return offline_config_param_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_offline_config_param(const ::std::string& value) {
  set_has_offline_config_param();
  offline_config_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.offline_config_param)
}
 void ConfigInfo::set_offline_config_param(const char* value) {
  set_has_offline_config_param();
  offline_config_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.offline_config_param)
}
 void ConfigInfo::set_offline_config_param(const char* value, size_t size) {
  set_has_offline_config_param();
  offline_config_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.offline_config_param)
}
 ::std::string* ConfigInfo::mutable_offline_config_param() {
  set_has_offline_config_param();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.offline_config_param)
  return offline_config_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigInfo::release_offline_config_param() {
  // @@protoc_insertion_point(field_release:ConfigInfo.offline_config_param)
  clear_has_offline_config_param();
  return offline_config_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_allocated_offline_config_param(::std::string* offline_config_param) {
  if (offline_config_param != NULL) {
    set_has_offline_config_param();
  } else {
    clear_has_offline_config_param();
  }
  offline_config_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offline_config_param);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.offline_config_param)
}

// optional string peps_security_auth_key = 17;
bool ConfigInfo::has_peps_security_auth_key() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ConfigInfo::set_has_peps_security_auth_key() {
  _has_bits_[0] |= 0x00010000u;
}
void ConfigInfo::clear_has_peps_security_auth_key() {
  _has_bits_[0] &= ~0x00010000u;
}
void ConfigInfo::clear_peps_security_auth_key() {
  peps_security_auth_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peps_security_auth_key();
}
 const ::std::string& ConfigInfo::peps_security_auth_key() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.peps_security_auth_key)
  return peps_security_auth_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_peps_security_auth_key(const ::std::string& value) {
  set_has_peps_security_auth_key();
  peps_security_auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.peps_security_auth_key)
}
 void ConfigInfo::set_peps_security_auth_key(const char* value) {
  set_has_peps_security_auth_key();
  peps_security_auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.peps_security_auth_key)
}
 void ConfigInfo::set_peps_security_auth_key(const char* value, size_t size) {
  set_has_peps_security_auth_key();
  peps_security_auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.peps_security_auth_key)
}
 ::std::string* ConfigInfo::mutable_peps_security_auth_key() {
  set_has_peps_security_auth_key();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.peps_security_auth_key)
  return peps_security_auth_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigInfo::release_peps_security_auth_key() {
  // @@protoc_insertion_point(field_release:ConfigInfo.peps_security_auth_key)
  clear_has_peps_security_auth_key();
  return peps_security_auth_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_allocated_peps_security_auth_key(::std::string* peps_security_auth_key) {
  if (peps_security_auth_key != NULL) {
    set_has_peps_security_auth_key();
  } else {
    clear_has_peps_security_auth_key();
  }
  peps_security_auth_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peps_security_auth_key);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.peps_security_auth_key)
}

// optional uint32 tbox_usb_net_switch = 18;
bool ConfigInfo::has_tbox_usb_net_switch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ConfigInfo::set_has_tbox_usb_net_switch() {
  _has_bits_[0] |= 0x00020000u;
}
void ConfigInfo::clear_has_tbox_usb_net_switch() {
  _has_bits_[0] &= ~0x00020000u;
}
void ConfigInfo::clear_tbox_usb_net_switch() {
  tbox_usb_net_switch_ = 0u;
  clear_has_tbox_usb_net_switch();
}
 ::google::protobuf::uint32 ConfigInfo::tbox_usb_net_switch() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.tbox_usb_net_switch)
  return tbox_usb_net_switch_;
}
 void ConfigInfo::set_tbox_usb_net_switch(::google::protobuf::uint32 value) {
  set_has_tbox_usb_net_switch();
  tbox_usb_net_switch_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.tbox_usb_net_switch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionInfo::kUpperWareVersionFieldNumber;
const int VersionInfo::kLowerWareVersionFieldNumber;
const int VersionInfo::kUpperFirmwareVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionInfo::VersionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VersionInfo)
}

void VersionInfo::InitAsDefaultInstance() {
}

VersionInfo::VersionInfo(const VersionInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VersionInfo)
}

void VersionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  upper_ware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_ware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_firmware_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionInfo::~VersionInfo() {
  // @@protoc_insertion_point(destructor:VersionInfo)
  SharedDtor();
}

void VersionInfo::SharedDtor() {
  upper_ware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_ware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upper_firmware_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VersionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionInfo_descriptor_;
}

const VersionInfo& VersionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  return *default_instance_;
}

VersionInfo* VersionInfo::default_instance_ = NULL;

VersionInfo* VersionInfo::New(::google::protobuf::Arena* arena) const {
  VersionInfo* n = new VersionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:VersionInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_upper_ware_version()) {
      upper_ware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_lower_ware_version()) {
      lower_ware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_upper_firmware_version()) {
      upper_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VersionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VersionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string upper_ware_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upper_ware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upper_ware_version().data(), this->upper_ware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VersionInfo.upper_ware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lower_ware_version;
        break;
      }

      // optional string lower_ware_version = 2;
      case 2: {
        if (tag == 18) {
         parse_lower_ware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lower_ware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lower_ware_version().data(), this->lower_ware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VersionInfo.lower_ware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upper_firmware_version;
        break;
      }

      // optional string upper_firmware_version = 3;
      case 3: {
        if (tag == 26) {
         parse_upper_firmware_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upper_firmware_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upper_firmware_version().data(), this->upper_firmware_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VersionInfo.upper_firmware_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VersionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VersionInfo)
  return false;
#undef DO_
}

void VersionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VersionInfo)
  // optional string upper_ware_version = 1;
  if (has_upper_ware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upper_ware_version().data(), this->upper_ware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VersionInfo.upper_ware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->upper_ware_version(), output);
  }

  // optional string lower_ware_version = 2;
  if (has_lower_ware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lower_ware_version().data(), this->lower_ware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VersionInfo.lower_ware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lower_ware_version(), output);
  }

  // optional string upper_firmware_version = 3;
  if (has_upper_firmware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upper_firmware_version().data(), this->upper_firmware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VersionInfo.upper_firmware_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->upper_firmware_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VersionInfo)
}

::google::protobuf::uint8* VersionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersionInfo)
  // optional string upper_ware_version = 1;
  if (has_upper_ware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upper_ware_version().data(), this->upper_ware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VersionInfo.upper_ware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->upper_ware_version(), target);
  }

  // optional string lower_ware_version = 2;
  if (has_lower_ware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lower_ware_version().data(), this->lower_ware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VersionInfo.lower_ware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lower_ware_version(), target);
  }

  // optional string upper_firmware_version = 3;
  if (has_upper_firmware_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upper_firmware_version().data(), this->upper_firmware_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VersionInfo.upper_firmware_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->upper_firmware_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersionInfo)
  return target;
}

int VersionInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VersionInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string upper_ware_version = 1;
    if (has_upper_ware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upper_ware_version());
    }

    // optional string lower_ware_version = 2;
    if (has_lower_ware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lower_ware_version());
    }

    // optional string upper_firmware_version = 3;
    if (has_upper_firmware_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upper_firmware_version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VersionInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersionInfo)
    MergeFrom(*source);
  }
}

void VersionInfo::MergeFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersionInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upper_ware_version()) {
      set_has_upper_ware_version();
      upper_ware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upper_ware_version_);
    }
    if (from.has_lower_ware_version()) {
      set_has_lower_ware_version();
      lower_ware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lower_ware_version_);
    }
    if (from.has_upper_firmware_version()) {
      set_has_upper_firmware_version();
      upper_firmware_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upper_firmware_version_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VersionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionInfo::CopyFrom(const VersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionInfo::IsInitialized() const {

  return true;
}

void VersionInfo::Swap(VersionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionInfo::InternalSwap(VersionInfo* other) {
  upper_ware_version_.Swap(&other->upper_ware_version_);
  lower_ware_version_.Swap(&other->lower_ware_version_);
  upper_firmware_version_.Swap(&other->upper_firmware_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VersionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionInfo_descriptor_;
  metadata.reflection = VersionInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VersionInfo

// optional string upper_ware_version = 1;
bool VersionInfo::has_upper_ware_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VersionInfo::set_has_upper_ware_version() {
  _has_bits_[0] |= 0x00000001u;
}
void VersionInfo::clear_has_upper_ware_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void VersionInfo::clear_upper_ware_version() {
  upper_ware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upper_ware_version();
}
 const ::std::string& VersionInfo::upper_ware_version() const {
  // @@protoc_insertion_point(field_get:VersionInfo.upper_ware_version)
  return upper_ware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VersionInfo::set_upper_ware_version(const ::std::string& value) {
  set_has_upper_ware_version();
  upper_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VersionInfo.upper_ware_version)
}
 void VersionInfo::set_upper_ware_version(const char* value) {
  set_has_upper_ware_version();
  upper_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VersionInfo.upper_ware_version)
}
 void VersionInfo::set_upper_ware_version(const char* value, size_t size) {
  set_has_upper_ware_version();
  upper_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.upper_ware_version)
}
 ::std::string* VersionInfo::mutable_upper_ware_version() {
  set_has_upper_ware_version();
  // @@protoc_insertion_point(field_mutable:VersionInfo.upper_ware_version)
  return upper_ware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VersionInfo::release_upper_ware_version() {
  // @@protoc_insertion_point(field_release:VersionInfo.upper_ware_version)
  clear_has_upper_ware_version();
  return upper_ware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VersionInfo::set_allocated_upper_ware_version(::std::string* upper_ware_version) {
  if (upper_ware_version != NULL) {
    set_has_upper_ware_version();
  } else {
    clear_has_upper_ware_version();
  }
  upper_ware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upper_ware_version);
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.upper_ware_version)
}

// optional string lower_ware_version = 2;
bool VersionInfo::has_lower_ware_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VersionInfo::set_has_lower_ware_version() {
  _has_bits_[0] |= 0x00000002u;
}
void VersionInfo::clear_has_lower_ware_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void VersionInfo::clear_lower_ware_version() {
  lower_ware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lower_ware_version();
}
 const ::std::string& VersionInfo::lower_ware_version() const {
  // @@protoc_insertion_point(field_get:VersionInfo.lower_ware_version)
  return lower_ware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VersionInfo::set_lower_ware_version(const ::std::string& value) {
  set_has_lower_ware_version();
  lower_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VersionInfo.lower_ware_version)
}
 void VersionInfo::set_lower_ware_version(const char* value) {
  set_has_lower_ware_version();
  lower_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VersionInfo.lower_ware_version)
}
 void VersionInfo::set_lower_ware_version(const char* value, size_t size) {
  set_has_lower_ware_version();
  lower_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.lower_ware_version)
}
 ::std::string* VersionInfo::mutable_lower_ware_version() {
  set_has_lower_ware_version();
  // @@protoc_insertion_point(field_mutable:VersionInfo.lower_ware_version)
  return lower_ware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VersionInfo::release_lower_ware_version() {
  // @@protoc_insertion_point(field_release:VersionInfo.lower_ware_version)
  clear_has_lower_ware_version();
  return lower_ware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VersionInfo::set_allocated_lower_ware_version(::std::string* lower_ware_version) {
  if (lower_ware_version != NULL) {
    set_has_lower_ware_version();
  } else {
    clear_has_lower_ware_version();
  }
  lower_ware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lower_ware_version);
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.lower_ware_version)
}

// optional string upper_firmware_version = 3;
bool VersionInfo::has_upper_firmware_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VersionInfo::set_has_upper_firmware_version() {
  _has_bits_[0] |= 0x00000004u;
}
void VersionInfo::clear_has_upper_firmware_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void VersionInfo::clear_upper_firmware_version() {
  upper_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upper_firmware_version();
}
 const ::std::string& VersionInfo::upper_firmware_version() const {
  // @@protoc_insertion_point(field_get:VersionInfo.upper_firmware_version)
  return upper_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VersionInfo::set_upper_firmware_version(const ::std::string& value) {
  set_has_upper_firmware_version();
  upper_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VersionInfo.upper_firmware_version)
}
 void VersionInfo::set_upper_firmware_version(const char* value) {
  set_has_upper_firmware_version();
  upper_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VersionInfo.upper_firmware_version)
}
 void VersionInfo::set_upper_firmware_version(const char* value, size_t size) {
  set_has_upper_firmware_version();
  upper_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.upper_firmware_version)
}
 ::std::string* VersionInfo::mutable_upper_firmware_version() {
  set_has_upper_firmware_version();
  // @@protoc_insertion_point(field_mutable:VersionInfo.upper_firmware_version)
  return upper_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VersionInfo::release_upper_firmware_version() {
  // @@protoc_insertion_point(field_release:VersionInfo.upper_firmware_version)
  clear_has_upper_firmware_version();
  return upper_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VersionInfo::set_allocated_upper_firmware_version(::std::string* upper_firmware_version) {
  if (upper_firmware_version != NULL) {
    set_has_upper_firmware_version();
  } else {
    clear_has_upper_firmware_version();
  }
  upper_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upper_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.upper_firmware_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateInfo::kSamplingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateInfo::StateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StateInfo)
}

void StateInfo::InitAsDefaultInstance() {
}

StateInfo::StateInfo(const StateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StateInfo)
}

void StateInfo::SharedCtor() {
  _cached_size_ = 0;
  sampling_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateInfo::~StateInfo() {
  // @@protoc_insertion_point(destructor:StateInfo)
  SharedDtor();
}

void StateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateInfo_descriptor_;
}

const StateInfo& StateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  return *default_instance_;
}

StateInfo* StateInfo::default_instance_ = NULL;

StateInfo* StateInfo::New(::google::protobuf::Arena* arena) const {
  StateInfo* n = new StateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StateInfo)
  sampling_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool sampling = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sampling_)));
          set_has_sampling();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StateInfo)
  return false;
#undef DO_
}

void StateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StateInfo)
  // optional bool sampling = 1;
  if (has_sampling()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sampling(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StateInfo)
}

::google::protobuf::uint8* StateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StateInfo)
  // optional bool sampling = 1;
  if (has_sampling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sampling(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateInfo)
  return target;
}

int StateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StateInfo)
  int total_size = 0;

  // optional bool sampling = 1;
  if (has_sampling()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StateInfo)
    MergeFrom(*source);
  }
}

void StateInfo::MergeFrom(const StateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sampling()) {
      set_sampling(from.sampling());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateInfo::CopyFrom(const StateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateInfo::IsInitialized() const {

  return true;
}

void StateInfo::Swap(StateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateInfo::InternalSwap(StateInfo* other) {
  std::swap(sampling_, other->sampling_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateInfo_descriptor_;
  metadata.reflection = StateInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StateInfo

// optional bool sampling = 1;
bool StateInfo::has_sampling() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StateInfo::set_has_sampling() {
  _has_bits_[0] |= 0x00000001u;
}
void StateInfo::clear_has_sampling() {
  _has_bits_[0] &= ~0x00000001u;
}
void StateInfo::clear_sampling() {
  sampling_ = false;
  clear_has_sampling();
}
 bool StateInfo::sampling() const {
  // @@protoc_insertion_point(field_get:StateInfo.sampling)
  return sampling_;
}
 void StateInfo::set_sampling(bool value) {
  set_has_sampling();
  sampling_ = value;
  // @@protoc_insertion_point(field_set:StateInfo.sampling)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
