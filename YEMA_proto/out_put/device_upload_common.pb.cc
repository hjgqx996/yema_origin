// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_upload_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "device_upload_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DeviceUploadCommonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceUploadCommonMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_device_5fupload_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_device_5fupload_5fcommon_2eproto() {
  protobuf_AddDesc_device_5fupload_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "device_upload_common.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceUploadCommonMessage_descriptor_ = file->message_type(0);
  static const int DeviceUploadCommonMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUploadCommonMessage, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUploadCommonMessage, upload_category_),
  };
  DeviceUploadCommonMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceUploadCommonMessage_descriptor_,
      DeviceUploadCommonMessage::default_instance_,
      DeviceUploadCommonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUploadCommonMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeviceUploadCommonMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUploadCommonMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_device_5fupload_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceUploadCommonMessage_descriptor_, &DeviceUploadCommonMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_device_5fupload_5fcommon_2eproto() {
  delete DeviceUploadCommonMessage::default_instance_;
  delete DeviceUploadCommonMessage_reflection_;
}

void protobuf_AddDesc_device_5fupload_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_device_5fupload_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032device_upload_common.proto\"H\n\031DeviceUp"
    "loadCommonMessage\022\022\n\nrequest_id\030\001 \001(\006\022\027\n"
    "\017upload_category\030\002 \001(\005", 102);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "device_upload_common.proto", &protobuf_RegisterTypes);
  DeviceUploadCommonMessage::default_instance_ = new DeviceUploadCommonMessage();
  DeviceUploadCommonMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_device_5fupload_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_device_5fupload_5fcommon_2eproto {
  StaticDescriptorInitializer_device_5fupload_5fcommon_2eproto() {
    protobuf_AddDesc_device_5fupload_5fcommon_2eproto();
  }
} static_descriptor_initializer_device_5fupload_5fcommon_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceUploadCommonMessage::kRequestIdFieldNumber;
const int DeviceUploadCommonMessage::kUploadCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceUploadCommonMessage::DeviceUploadCommonMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceUploadCommonMessage)
}

void DeviceUploadCommonMessage::InitAsDefaultInstance() {
}

DeviceUploadCommonMessage::DeviceUploadCommonMessage(const DeviceUploadCommonMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceUploadCommonMessage)
}

void DeviceUploadCommonMessage::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = GOOGLE_ULONGLONG(0);
  upload_category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceUploadCommonMessage::~DeviceUploadCommonMessage() {
  // @@protoc_insertion_point(destructor:DeviceUploadCommonMessage)
  SharedDtor();
}

void DeviceUploadCommonMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceUploadCommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceUploadCommonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceUploadCommonMessage_descriptor_;
}

const DeviceUploadCommonMessage& DeviceUploadCommonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fupload_5fcommon_2eproto();
  return *default_instance_;
}

DeviceUploadCommonMessage* DeviceUploadCommonMessage::default_instance_ = NULL;

DeviceUploadCommonMessage* DeviceUploadCommonMessage::New(::google::protobuf::Arena* arena) const {
  DeviceUploadCommonMessage* n = new DeviceUploadCommonMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceUploadCommonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceUploadCommonMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceUploadCommonMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceUploadCommonMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(request_id_, upload_category_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeviceUploadCommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceUploadCommonMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 request_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upload_category;
        break;
      }

      // optional int32 upload_category = 2;
      case 2: {
        if (tag == 16) {
         parse_upload_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_category_)));
          set_has_upload_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceUploadCommonMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceUploadCommonMessage)
  return false;
#undef DO_
}

void DeviceUploadCommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceUploadCommonMessage)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->request_id(), output);
  }

  // optional int32 upload_category = 2;
  if (has_upload_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upload_category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceUploadCommonMessage)
}

::google::protobuf::uint8* DeviceUploadCommonMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceUploadCommonMessage)
  // optional fixed64 request_id = 1;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->request_id(), target);
  }

  // optional int32 upload_category = 2;
  if (has_upload_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upload_category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceUploadCommonMessage)
  return target;
}

int DeviceUploadCommonMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceUploadCommonMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 request_id = 1;
    if (has_request_id()) {
      total_size += 1 + 8;
    }

    // optional int32 upload_category = 2;
    if (has_upload_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_category());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUploadCommonMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceUploadCommonMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceUploadCommonMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceUploadCommonMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceUploadCommonMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceUploadCommonMessage)
    MergeFrom(*source);
  }
}

void DeviceUploadCommonMessage::MergeFrom(const DeviceUploadCommonMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceUploadCommonMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_upload_category()) {
      set_upload_category(from.upload_category());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeviceUploadCommonMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceUploadCommonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceUploadCommonMessage::CopyFrom(const DeviceUploadCommonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceUploadCommonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUploadCommonMessage::IsInitialized() const {

  return true;
}

void DeviceUploadCommonMessage::Swap(DeviceUploadCommonMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceUploadCommonMessage::InternalSwap(DeviceUploadCommonMessage* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(upload_category_, other->upload_category_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceUploadCommonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceUploadCommonMessage_descriptor_;
  metadata.reflection = DeviceUploadCommonMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceUploadCommonMessage

// optional fixed64 request_id = 1;
bool DeviceUploadCommonMessage::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceUploadCommonMessage::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceUploadCommonMessage::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceUploadCommonMessage::clear_request_id() {
  request_id_ = GOOGLE_ULONGLONG(0);
  clear_has_request_id();
}
 ::google::protobuf::uint64 DeviceUploadCommonMessage::request_id() const {
  // @@protoc_insertion_point(field_get:DeviceUploadCommonMessage.request_id)
  return request_id_;
}
 void DeviceUploadCommonMessage::set_request_id(::google::protobuf::uint64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:DeviceUploadCommonMessage.request_id)
}

// optional int32 upload_category = 2;
bool DeviceUploadCommonMessage::has_upload_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceUploadCommonMessage::set_has_upload_category() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceUploadCommonMessage::clear_has_upload_category() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceUploadCommonMessage::clear_upload_category() {
  upload_category_ = 0;
  clear_has_upload_category();
}
 ::google::protobuf::int32 DeviceUploadCommonMessage::upload_category() const {
  // @@protoc_insertion_point(field_get:DeviceUploadCommonMessage.upload_category)
  return upload_category_;
}
 void DeviceUploadCommonMessage::set_upload_category(::google::protobuf::int32 value) {
  set_has_upload_category();
  upload_category_ = value;
  // @@protoc_insertion_point(field_set:DeviceUploadCommonMessage.upload_category)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
