// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_air.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_air.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlAirMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlAirMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AirStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirStateInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5fair_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5fair_2eproto() {
  protobuf_AddDesc_ctrl_5fair_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_air.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlAirMessage_descriptor_ = file->message_type(0);
  static const int CtrlAirMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirMessage, common_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirMessage, air_ctrl_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirMessage, air_state_info_),
  };
  CtrlAirMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlAirMessage_descriptor_,
      CtrlAirMessage::default_instance_,
      CtrlAirMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlAirMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlAirMessage, _internal_metadata_),
      -1);
  AirStateInfo_descriptor_ = file->message_type(1);
  static const int AirStateInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, ac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, ptc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, wind_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, blower_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, cycle_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, pre_defrosting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, after_defrosting_),
  };
  AirStateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AirStateInfo_descriptor_,
      AirStateInfo::default_instance_,
      AirStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(AirStateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirStateInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5fair_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlAirMessage_descriptor_, &CtrlAirMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AirStateInfo_descriptor_, &AirStateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5fair_2eproto() {
  delete CtrlAirMessage::default_instance_;
  delete CtrlAirMessage_reflection_;
  delete AirStateInfo::default_instance_;
  delete AirStateInfo_reflection_;
}

void protobuf_AddDesc_ctrl_5fair_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5fair_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ctrl_5fcommon_5fparam_5ftbox_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ctrl_air.proto\032\034ctrl_common_param_tbox"
    ".proto\"\213\001\n\016CtrlAirMessage\022*\n\014common_para"
    "m\030\001 \001(\0132\024.CtrlCommonParamTbox\022&\n\rair_ctr"
    "l_info\030\002 \001(\0132\017.CtrlCommonInfo\022%\n\016air_sta"
    "te_info\030\004 \001(\0132\r.AirStateInfo\"\226\001\n\014AirStat"
    "eInfo\022\n\n\002ac\030\001 \001(\005\022\013\n\003ptc\030\002 \001(\005\022\022\n\nwind_l"
    "evel\030\003 \001(\005\022\023\n\013blower_mode\030\004 \001(\005\022\022\n\ncycle"
    "_mode\030\005 \001(\005\022\026\n\016pre_defrosting\030\006 \001(\005\022\030\n\020a"
    "fter_defrosting\030\007 \001(\005B+\n\034com.mx.server.r"
    "emote.v2.beanB\013CtrlAirBean", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_air.proto", &protobuf_RegisterTypes);
  CtrlAirMessage::default_instance_ = new CtrlAirMessage();
  AirStateInfo::default_instance_ = new AirStateInfo();
  CtrlAirMessage::default_instance_->InitAsDefaultInstance();
  AirStateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5fair_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5fair_2eproto {
  StaticDescriptorInitializer_ctrl_5fair_2eproto() {
    protobuf_AddDesc_ctrl_5fair_2eproto();
  }
} static_descriptor_initializer_ctrl_5fair_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlAirMessage::kCommonParamFieldNumber;
const int CtrlAirMessage::kAirCtrlInfoFieldNumber;
const int CtrlAirMessage::kAirStateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlAirMessage::CtrlAirMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlAirMessage)
}

void CtrlAirMessage::InitAsDefaultInstance() {
  common_param_ = const_cast< ::CtrlCommonParamTbox*>(&::CtrlCommonParamTbox::default_instance());
  air_ctrl_info_ = const_cast< ::CtrlCommonInfo*>(&::CtrlCommonInfo::default_instance());
  air_state_info_ = const_cast< ::AirStateInfo*>(&::AirStateInfo::default_instance());
}

CtrlAirMessage::CtrlAirMessage(const CtrlAirMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlAirMessage)
}

void CtrlAirMessage::SharedCtor() {
  _cached_size_ = 0;
  common_param_ = NULL;
  air_ctrl_info_ = NULL;
  air_state_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlAirMessage::~CtrlAirMessage() {
  // @@protoc_insertion_point(destructor:CtrlAirMessage)
  SharedDtor();
}

void CtrlAirMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_param_;
    delete air_ctrl_info_;
    delete air_state_info_;
  }
}

void CtrlAirMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlAirMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlAirMessage_descriptor_;
}

const CtrlAirMessage& CtrlAirMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fair_2eproto();
  return *default_instance_;
}

CtrlAirMessage* CtrlAirMessage::default_instance_ = NULL;

CtrlAirMessage* CtrlAirMessage::New(::google::protobuf::Arena* arena) const {
  CtrlAirMessage* n = new CtrlAirMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlAirMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlAirMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_common_param()) {
      if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
    }
    if (has_air_ctrl_info()) {
      if (air_ctrl_info_ != NULL) air_ctrl_info_->::CtrlCommonInfo::Clear();
    }
    if (has_air_state_info()) {
      if (air_state_info_ != NULL) air_state_info_->::AirStateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlAirMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlAirMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CtrlCommonParamTbox common_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_air_ctrl_info;
        break;
      }

      // optional .CtrlCommonInfo air_ctrl_info = 2;
      case 2: {
        if (tag == 18) {
         parse_air_ctrl_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_air_ctrl_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_air_state_info;
        break;
      }

      // optional .AirStateInfo air_state_info = 4;
      case 4: {
        if (tag == 34) {
         parse_air_state_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_air_state_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlAirMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlAirMessage)
  return false;
#undef DO_
}

void CtrlAirMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlAirMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_param_, output);
  }

  // optional .CtrlCommonInfo air_ctrl_info = 2;
  if (has_air_ctrl_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->air_ctrl_info_, output);
  }

  // optional .AirStateInfo air_state_info = 4;
  if (has_air_state_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->air_state_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlAirMessage)
}

::google::protobuf::uint8* CtrlAirMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlAirMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_param_, false, target);
  }

  // optional .CtrlCommonInfo air_ctrl_info = 2;
  if (has_air_ctrl_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->air_ctrl_info_, false, target);
  }

  // optional .AirStateInfo air_state_info = 4;
  if (has_air_state_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->air_state_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlAirMessage)
  return target;
}

int CtrlAirMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlAirMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CtrlCommonParamTbox common_param = 1;
    if (has_common_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->common_param_);
    }

    // optional .CtrlCommonInfo air_ctrl_info = 2;
    if (has_air_ctrl_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->air_ctrl_info_);
    }

    // optional .AirStateInfo air_state_info = 4;
    if (has_air_state_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->air_state_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlAirMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlAirMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlAirMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlAirMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlAirMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlAirMessage)
    MergeFrom(*source);
  }
}

void CtrlAirMessage::MergeFrom(const CtrlAirMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlAirMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_param()) {
      mutable_common_param()->::CtrlCommonParamTbox::MergeFrom(from.common_param());
    }
    if (from.has_air_ctrl_info()) {
      mutable_air_ctrl_info()->::CtrlCommonInfo::MergeFrom(from.air_ctrl_info());
    }
    if (from.has_air_state_info()) {
      mutable_air_state_info()->::AirStateInfo::MergeFrom(from.air_state_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlAirMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlAirMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlAirMessage::CopyFrom(const CtrlAirMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlAirMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlAirMessage::IsInitialized() const {

  return true;
}

void CtrlAirMessage::Swap(CtrlAirMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlAirMessage::InternalSwap(CtrlAirMessage* other) {
  std::swap(common_param_, other->common_param_);
  std::swap(air_ctrl_info_, other->air_ctrl_info_);
  std::swap(air_state_info_, other->air_state_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlAirMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlAirMessage_descriptor_;
  metadata.reflection = CtrlAirMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlAirMessage

// optional .CtrlCommonParamTbox common_param = 1;
bool CtrlAirMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlAirMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlAirMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlAirMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
const ::CtrlCommonParamTbox& CtrlAirMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlAirMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
::CtrlCommonParamTbox* CtrlAirMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirMessage.common_param)
  return common_param_;
}
::CtrlCommonParamTbox* CtrlAirMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlAirMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
void CtrlAirMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirMessage.common_param)
}

// optional .CtrlCommonInfo air_ctrl_info = 2;
bool CtrlAirMessage::has_air_ctrl_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlAirMessage::set_has_air_ctrl_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlAirMessage::clear_has_air_ctrl_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlAirMessage::clear_air_ctrl_info() {
  if (air_ctrl_info_ != NULL) air_ctrl_info_->::CtrlCommonInfo::Clear();
  clear_has_air_ctrl_info();
}
const ::CtrlCommonInfo& CtrlAirMessage::air_ctrl_info() const {
  // @@protoc_insertion_point(field_get:CtrlAirMessage.air_ctrl_info)
  return air_ctrl_info_ != NULL ? *air_ctrl_info_ : *default_instance_->air_ctrl_info_;
}
::CtrlCommonInfo* CtrlAirMessage::mutable_air_ctrl_info() {
  set_has_air_ctrl_info();
  if (air_ctrl_info_ == NULL) {
    air_ctrl_info_ = new ::CtrlCommonInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirMessage.air_ctrl_info)
  return air_ctrl_info_;
}
::CtrlCommonInfo* CtrlAirMessage::release_air_ctrl_info() {
  // @@protoc_insertion_point(field_release:CtrlAirMessage.air_ctrl_info)
  clear_has_air_ctrl_info();
  ::CtrlCommonInfo* temp = air_ctrl_info_;
  air_ctrl_info_ = NULL;
  return temp;
}
void CtrlAirMessage::set_allocated_air_ctrl_info(::CtrlCommonInfo* air_ctrl_info) {
  delete air_ctrl_info_;
  air_ctrl_info_ = air_ctrl_info;
  if (air_ctrl_info) {
    set_has_air_ctrl_info();
  } else {
    clear_has_air_ctrl_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirMessage.air_ctrl_info)
}

// optional .AirStateInfo air_state_info = 4;
bool CtrlAirMessage::has_air_state_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlAirMessage::set_has_air_state_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlAirMessage::clear_has_air_state_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlAirMessage::clear_air_state_info() {
  if (air_state_info_ != NULL) air_state_info_->::AirStateInfo::Clear();
  clear_has_air_state_info();
}
const ::AirStateInfo& CtrlAirMessage::air_state_info() const {
  // @@protoc_insertion_point(field_get:CtrlAirMessage.air_state_info)
  return air_state_info_ != NULL ? *air_state_info_ : *default_instance_->air_state_info_;
}
::AirStateInfo* CtrlAirMessage::mutable_air_state_info() {
  set_has_air_state_info();
  if (air_state_info_ == NULL) {
    air_state_info_ = new ::AirStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirMessage.air_state_info)
  return air_state_info_;
}
::AirStateInfo* CtrlAirMessage::release_air_state_info() {
  // @@protoc_insertion_point(field_release:CtrlAirMessage.air_state_info)
  clear_has_air_state_info();
  ::AirStateInfo* temp = air_state_info_;
  air_state_info_ = NULL;
  return temp;
}
void CtrlAirMessage::set_allocated_air_state_info(::AirStateInfo* air_state_info) {
  delete air_state_info_;
  air_state_info_ = air_state_info;
  if (air_state_info) {
    set_has_air_state_info();
  } else {
    clear_has_air_state_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirMessage.air_state_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirStateInfo::kAcFieldNumber;
const int AirStateInfo::kPtcFieldNumber;
const int AirStateInfo::kWindLevelFieldNumber;
const int AirStateInfo::kBlowerModeFieldNumber;
const int AirStateInfo::kCycleModeFieldNumber;
const int AirStateInfo::kPreDefrostingFieldNumber;
const int AirStateInfo::kAfterDefrostingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirStateInfo::AirStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AirStateInfo)
}

void AirStateInfo::InitAsDefaultInstance() {
}

AirStateInfo::AirStateInfo(const AirStateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AirStateInfo)
}

void AirStateInfo::SharedCtor() {
  _cached_size_ = 0;
  ac_ = 0;
  ptc_ = 0;
  wind_level_ = 0;
  blower_mode_ = 0;
  cycle_mode_ = 0;
  pre_defrosting_ = 0;
  after_defrosting_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AirStateInfo::~AirStateInfo() {
  // @@protoc_insertion_point(destructor:AirStateInfo)
  SharedDtor();
}

void AirStateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AirStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirStateInfo_descriptor_;
}

const AirStateInfo& AirStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fair_2eproto();
  return *default_instance_;
}

AirStateInfo* AirStateInfo::default_instance_ = NULL;

AirStateInfo* AirStateInfo::New(::google::protobuf::Arena* arena) const {
  AirStateInfo* n = new AirStateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AirStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AirStateInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AirStateInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AirStateInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(ac_, after_defrosting_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AirStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AirStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ac = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ac_)));
          set_has_ac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ptc;
        break;
      }

      // optional int32 ptc = 2;
      case 2: {
        if (tag == 16) {
         parse_ptc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptc_)));
          set_has_ptc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wind_level;
        break;
      }

      // optional int32 wind_level = 3;
      case 3: {
        if (tag == 24) {
         parse_wind_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind_level_)));
          set_has_wind_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blower_mode;
        break;
      }

      // optional int32 blower_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_blower_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blower_mode_)));
          set_has_blower_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cycle_mode;
        break;
      }

      // optional int32 cycle_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_cycle_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_mode_)));
          set_has_cycle_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pre_defrosting;
        break;
      }

      // optional int32 pre_defrosting = 6;
      case 6: {
        if (tag == 48) {
         parse_pre_defrosting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_defrosting_)));
          set_has_pre_defrosting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_after_defrosting;
        break;
      }

      // optional int32 after_defrosting = 7;
      case 7: {
        if (tag == 56) {
         parse_after_defrosting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &after_defrosting_)));
          set_has_after_defrosting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AirStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AirStateInfo)
  return false;
#undef DO_
}

void AirStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AirStateInfo)
  // optional int32 ac = 1;
  if (has_ac()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ac(), output);
  }

  // optional int32 ptc = 2;
  if (has_ptc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ptc(), output);
  }

  // optional int32 wind_level = 3;
  if (has_wind_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wind_level(), output);
  }

  // optional int32 blower_mode = 4;
  if (has_blower_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blower_mode(), output);
  }

  // optional int32 cycle_mode = 5;
  if (has_cycle_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cycle_mode(), output);
  }

  // optional int32 pre_defrosting = 6;
  if (has_pre_defrosting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pre_defrosting(), output);
  }

  // optional int32 after_defrosting = 7;
  if (has_after_defrosting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->after_defrosting(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AirStateInfo)
}

::google::protobuf::uint8* AirStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AirStateInfo)
  // optional int32 ac = 1;
  if (has_ac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ac(), target);
  }

  // optional int32 ptc = 2;
  if (has_ptc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ptc(), target);
  }

  // optional int32 wind_level = 3;
  if (has_wind_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wind_level(), target);
  }

  // optional int32 blower_mode = 4;
  if (has_blower_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blower_mode(), target);
  }

  // optional int32 cycle_mode = 5;
  if (has_cycle_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cycle_mode(), target);
  }

  // optional int32 pre_defrosting = 6;
  if (has_pre_defrosting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pre_defrosting(), target);
  }

  // optional int32 after_defrosting = 7;
  if (has_after_defrosting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->after_defrosting(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirStateInfo)
  return target;
}

int AirStateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AirStateInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 ac = 1;
    if (has_ac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ac());
    }

    // optional int32 ptc = 2;
    if (has_ptc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptc());
    }

    // optional int32 wind_level = 3;
    if (has_wind_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind_level());
    }

    // optional int32 blower_mode = 4;
    if (has_blower_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blower_mode());
    }

    // optional int32 cycle_mode = 5;
    if (has_cycle_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cycle_mode());
    }

    // optional int32 pre_defrosting = 6;
    if (has_pre_defrosting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_defrosting());
    }

    // optional int32 after_defrosting = 7;
    if (has_after_defrosting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->after_defrosting());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AirStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AirStateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AirStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AirStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AirStateInfo)
    MergeFrom(*source);
  }
}

void AirStateInfo::MergeFrom(const AirStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AirStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ac()) {
      set_ac(from.ac());
    }
    if (from.has_ptc()) {
      set_ptc(from.ptc());
    }
    if (from.has_wind_level()) {
      set_wind_level(from.wind_level());
    }
    if (from.has_blower_mode()) {
      set_blower_mode(from.blower_mode());
    }
    if (from.has_cycle_mode()) {
      set_cycle_mode(from.cycle_mode());
    }
    if (from.has_pre_defrosting()) {
      set_pre_defrosting(from.pre_defrosting());
    }
    if (from.has_after_defrosting()) {
      set_after_defrosting(from.after_defrosting());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AirStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AirStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirStateInfo::CopyFrom(const AirStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirStateInfo::IsInitialized() const {

  return true;
}

void AirStateInfo::Swap(AirStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirStateInfo::InternalSwap(AirStateInfo* other) {
  std::swap(ac_, other->ac_);
  std::swap(ptc_, other->ptc_);
  std::swap(wind_level_, other->wind_level_);
  std::swap(blower_mode_, other->blower_mode_);
  std::swap(cycle_mode_, other->cycle_mode_);
  std::swap(pre_defrosting_, other->pre_defrosting_);
  std::swap(after_defrosting_, other->after_defrosting_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AirStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirStateInfo_descriptor_;
  metadata.reflection = AirStateInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AirStateInfo

// optional int32 ac = 1;
bool AirStateInfo::has_ac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AirStateInfo::set_has_ac() {
  _has_bits_[0] |= 0x00000001u;
}
void AirStateInfo::clear_has_ac() {
  _has_bits_[0] &= ~0x00000001u;
}
void AirStateInfo::clear_ac() {
  ac_ = 0;
  clear_has_ac();
}
 ::google::protobuf::int32 AirStateInfo::ac() const {
  // @@protoc_insertion_point(field_get:AirStateInfo.ac)
  return ac_;
}
 void AirStateInfo::set_ac(::google::protobuf::int32 value) {
  set_has_ac();
  ac_ = value;
  // @@protoc_insertion_point(field_set:AirStateInfo.ac)
}

// optional int32 ptc = 2;
bool AirStateInfo::has_ptc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AirStateInfo::set_has_ptc() {
  _has_bits_[0] |= 0x00000002u;
}
void AirStateInfo::clear_has_ptc() {
  _has_bits_[0] &= ~0x00000002u;
}
void AirStateInfo::clear_ptc() {
  ptc_ = 0;
  clear_has_ptc();
}
 ::google::protobuf::int32 AirStateInfo::ptc() const {
  // @@protoc_insertion_point(field_get:AirStateInfo.ptc)
  return ptc_;
}
 void AirStateInfo::set_ptc(::google::protobuf::int32 value) {
  set_has_ptc();
  ptc_ = value;
  // @@protoc_insertion_point(field_set:AirStateInfo.ptc)
}

// optional int32 wind_level = 3;
bool AirStateInfo::has_wind_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AirStateInfo::set_has_wind_level() {
  _has_bits_[0] |= 0x00000004u;
}
void AirStateInfo::clear_has_wind_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void AirStateInfo::clear_wind_level() {
  wind_level_ = 0;
  clear_has_wind_level();
}
 ::google::protobuf::int32 AirStateInfo::wind_level() const {
  // @@protoc_insertion_point(field_get:AirStateInfo.wind_level)
  return wind_level_;
}
 void AirStateInfo::set_wind_level(::google::protobuf::int32 value) {
  set_has_wind_level();
  wind_level_ = value;
  // @@protoc_insertion_point(field_set:AirStateInfo.wind_level)
}

// optional int32 blower_mode = 4;
bool AirStateInfo::has_blower_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AirStateInfo::set_has_blower_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void AirStateInfo::clear_has_blower_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void AirStateInfo::clear_blower_mode() {
  blower_mode_ = 0;
  clear_has_blower_mode();
}
 ::google::protobuf::int32 AirStateInfo::blower_mode() const {
  // @@protoc_insertion_point(field_get:AirStateInfo.blower_mode)
  return blower_mode_;
}
 void AirStateInfo::set_blower_mode(::google::protobuf::int32 value) {
  set_has_blower_mode();
  blower_mode_ = value;
  // @@protoc_insertion_point(field_set:AirStateInfo.blower_mode)
}

// optional int32 cycle_mode = 5;
bool AirStateInfo::has_cycle_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AirStateInfo::set_has_cycle_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void AirStateInfo::clear_has_cycle_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void AirStateInfo::clear_cycle_mode() {
  cycle_mode_ = 0;
  clear_has_cycle_mode();
}
 ::google::protobuf::int32 AirStateInfo::cycle_mode() const {
  // @@protoc_insertion_point(field_get:AirStateInfo.cycle_mode)
  return cycle_mode_;
}
 void AirStateInfo::set_cycle_mode(::google::protobuf::int32 value) {
  set_has_cycle_mode();
  cycle_mode_ = value;
  // @@protoc_insertion_point(field_set:AirStateInfo.cycle_mode)
}

// optional int32 pre_defrosting = 6;
bool AirStateInfo::has_pre_defrosting() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AirStateInfo::set_has_pre_defrosting() {
  _has_bits_[0] |= 0x00000020u;
}
void AirStateInfo::clear_has_pre_defrosting() {
  _has_bits_[0] &= ~0x00000020u;
}
void AirStateInfo::clear_pre_defrosting() {
  pre_defrosting_ = 0;
  clear_has_pre_defrosting();
}
 ::google::protobuf::int32 AirStateInfo::pre_defrosting() const {
  // @@protoc_insertion_point(field_get:AirStateInfo.pre_defrosting)
  return pre_defrosting_;
}
 void AirStateInfo::set_pre_defrosting(::google::protobuf::int32 value) {
  set_has_pre_defrosting();
  pre_defrosting_ = value;
  // @@protoc_insertion_point(field_set:AirStateInfo.pre_defrosting)
}

// optional int32 after_defrosting = 7;
bool AirStateInfo::has_after_defrosting() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AirStateInfo::set_has_after_defrosting() {
  _has_bits_[0] |= 0x00000040u;
}
void AirStateInfo::clear_has_after_defrosting() {
  _has_bits_[0] &= ~0x00000040u;
}
void AirStateInfo::clear_after_defrosting() {
  after_defrosting_ = 0;
  clear_has_after_defrosting();
}
 ::google::protobuf::int32 AirStateInfo::after_defrosting() const {
  // @@protoc_insertion_point(field_get:AirStateInfo.after_defrosting)
  return after_defrosting_;
}
 void AirStateInfo::set_after_defrosting(::google::protobuf::int32 value) {
  set_has_after_defrosting();
  after_defrosting_ = value;
  // @@protoc_insertion_point(field_set:AirStateInfo.after_defrosting)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
