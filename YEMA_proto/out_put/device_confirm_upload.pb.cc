// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_confirm_upload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "device_confirm_upload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DeviceConfirmUploadMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceConfirmUploadMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_device_5fconfirm_5fupload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_device_5fconfirm_5fupload_2eproto() {
  protobuf_AddDesc_device_5fconfirm_5fupload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "device_confirm_upload.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceConfirmUploadMessage_descriptor_ = file->message_type(0);
  static const int DeviceConfirmUploadMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfirmUploadMessage, device_upload_common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfirmUploadMessage, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfirmUploadMessage, url_),
  };
  DeviceConfirmUploadMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceConfirmUploadMessage_descriptor_,
      DeviceConfirmUploadMessage::default_instance_,
      DeviceConfirmUploadMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfirmUploadMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeviceConfirmUploadMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConfirmUploadMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_device_5fconfirm_5fupload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceConfirmUploadMessage_descriptor_, &DeviceConfirmUploadMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_device_5fconfirm_5fupload_2eproto() {
  delete DeviceConfirmUploadMessage::default_instance_;
  delete DeviceConfirmUploadMessage_reflection_;
}

void protobuf_AddDesc_device_5fconfirm_5fupload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_device_5fconfirm_5fupload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_device_5fupload_5fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033device_confirm_upload.proto\032\032device_up"
    "load_common.proto\"q\n\032DeviceConfirmUpload"
    "Message\0228\n\024device_upload_common\030\001 \001(\0132\032."
    "DeviceUploadCommonMessage\022\014\n\004code\030\002 \001(\r\022"
    "\013\n\003url\030\004 \001(\t", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "device_confirm_upload.proto", &protobuf_RegisterTypes);
  DeviceConfirmUploadMessage::default_instance_ = new DeviceConfirmUploadMessage();
  DeviceConfirmUploadMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_device_5fconfirm_5fupload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_device_5fconfirm_5fupload_2eproto {
  StaticDescriptorInitializer_device_5fconfirm_5fupload_2eproto() {
    protobuf_AddDesc_device_5fconfirm_5fupload_2eproto();
  }
} static_descriptor_initializer_device_5fconfirm_5fupload_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceConfirmUploadMessage::kDeviceUploadCommonFieldNumber;
const int DeviceConfirmUploadMessage::kCodeFieldNumber;
const int DeviceConfirmUploadMessage::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceConfirmUploadMessage::DeviceConfirmUploadMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceConfirmUploadMessage)
}

void DeviceConfirmUploadMessage::InitAsDefaultInstance() {
  device_upload_common_ = const_cast< ::DeviceUploadCommonMessage*>(&::DeviceUploadCommonMessage::default_instance());
}

DeviceConfirmUploadMessage::DeviceConfirmUploadMessage(const DeviceConfirmUploadMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceConfirmUploadMessage)
}

void DeviceConfirmUploadMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_upload_common_ = NULL;
  code_ = 0u;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceConfirmUploadMessage::~DeviceConfirmUploadMessage() {
  // @@protoc_insertion_point(destructor:DeviceConfirmUploadMessage)
  SharedDtor();
}

void DeviceConfirmUploadMessage::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete device_upload_common_;
  }
}

void DeviceConfirmUploadMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceConfirmUploadMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceConfirmUploadMessage_descriptor_;
}

const DeviceConfirmUploadMessage& DeviceConfirmUploadMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_device_5fconfirm_5fupload_2eproto();
  return *default_instance_;
}

DeviceConfirmUploadMessage* DeviceConfirmUploadMessage::default_instance_ = NULL;

DeviceConfirmUploadMessage* DeviceConfirmUploadMessage::New(::google::protobuf::Arena* arena) const {
  DeviceConfirmUploadMessage* n = new DeviceConfirmUploadMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceConfirmUploadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceConfirmUploadMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_device_upload_common()) {
      if (device_upload_common_ != NULL) device_upload_common_->::DeviceUploadCommonMessage::Clear();
    }
    code_ = 0u;
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeviceConfirmUploadMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceConfirmUploadMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceUploadCommonMessage device_upload_common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_upload_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeviceConfirmUploadMessage.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceConfirmUploadMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceConfirmUploadMessage)
  return false;
#undef DO_
}

void DeviceConfirmUploadMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceConfirmUploadMessage)
  // optional .DeviceUploadCommonMessage device_upload_common = 1;
  if (has_device_upload_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->device_upload_common_, output);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceConfirmUploadMessage.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeviceConfirmUploadMessage)
}

::google::protobuf::uint8* DeviceConfirmUploadMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeviceConfirmUploadMessage)
  // optional .DeviceUploadCommonMessage device_upload_common = 1;
  if (has_device_upload_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->device_upload_common_, false, target);
  }

  // optional uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeviceConfirmUploadMessage.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeviceConfirmUploadMessage)
  return target;
}

int DeviceConfirmUploadMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceConfirmUploadMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .DeviceUploadCommonMessage device_upload_common = 1;
    if (has_device_upload_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_upload_common_);
    }

    // optional uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceConfirmUploadMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceConfirmUploadMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceConfirmUploadMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceConfirmUploadMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceConfirmUploadMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceConfirmUploadMessage)
    MergeFrom(*source);
  }
}

void DeviceConfirmUploadMessage::MergeFrom(const DeviceConfirmUploadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceConfirmUploadMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_upload_common()) {
      mutable_device_upload_common()->::DeviceUploadCommonMessage::MergeFrom(from.device_upload_common());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeviceConfirmUploadMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceConfirmUploadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConfirmUploadMessage::CopyFrom(const DeviceConfirmUploadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceConfirmUploadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfirmUploadMessage::IsInitialized() const {

  return true;
}

void DeviceConfirmUploadMessage::Swap(DeviceConfirmUploadMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceConfirmUploadMessage::InternalSwap(DeviceConfirmUploadMessage* other) {
  std::swap(device_upload_common_, other->device_upload_common_);
  std::swap(code_, other->code_);
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceConfirmUploadMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceConfirmUploadMessage_descriptor_;
  metadata.reflection = DeviceConfirmUploadMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceConfirmUploadMessage

// optional .DeviceUploadCommonMessage device_upload_common = 1;
bool DeviceConfirmUploadMessage::has_device_upload_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceConfirmUploadMessage::set_has_device_upload_common() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceConfirmUploadMessage::clear_has_device_upload_common() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceConfirmUploadMessage::clear_device_upload_common() {
  if (device_upload_common_ != NULL) device_upload_common_->::DeviceUploadCommonMessage::Clear();
  clear_has_device_upload_common();
}
const ::DeviceUploadCommonMessage& DeviceConfirmUploadMessage::device_upload_common() const {
  // @@protoc_insertion_point(field_get:DeviceConfirmUploadMessage.device_upload_common)
  return device_upload_common_ != NULL ? *device_upload_common_ : *default_instance_->device_upload_common_;
}
::DeviceUploadCommonMessage* DeviceConfirmUploadMessage::mutable_device_upload_common() {
  set_has_device_upload_common();
  if (device_upload_common_ == NULL) {
    device_upload_common_ = new ::DeviceUploadCommonMessage;
  }
  // @@protoc_insertion_point(field_mutable:DeviceConfirmUploadMessage.device_upload_common)
  return device_upload_common_;
}
::DeviceUploadCommonMessage* DeviceConfirmUploadMessage::release_device_upload_common() {
  // @@protoc_insertion_point(field_release:DeviceConfirmUploadMessage.device_upload_common)
  clear_has_device_upload_common();
  ::DeviceUploadCommonMessage* temp = device_upload_common_;
  device_upload_common_ = NULL;
  return temp;
}
void DeviceConfirmUploadMessage::set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common) {
  delete device_upload_common_;
  device_upload_common_ = device_upload_common;
  if (device_upload_common) {
    set_has_device_upload_common();
  } else {
    clear_has_device_upload_common();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceConfirmUploadMessage.device_upload_common)
}

// optional uint32 code = 2;
bool DeviceConfirmUploadMessage::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceConfirmUploadMessage::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceConfirmUploadMessage::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceConfirmUploadMessage::clear_code() {
  code_ = 0u;
  clear_has_code();
}
 ::google::protobuf::uint32 DeviceConfirmUploadMessage::code() const {
  // @@protoc_insertion_point(field_get:DeviceConfirmUploadMessage.code)
  return code_;
}
 void DeviceConfirmUploadMessage::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:DeviceConfirmUploadMessage.code)
}

// optional string url = 4;
bool DeviceConfirmUploadMessage::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceConfirmUploadMessage::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceConfirmUploadMessage::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceConfirmUploadMessage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& DeviceConfirmUploadMessage::url() const {
  // @@protoc_insertion_point(field_get:DeviceConfirmUploadMessage.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceConfirmUploadMessage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceConfirmUploadMessage.url)
}
 void DeviceConfirmUploadMessage::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceConfirmUploadMessage.url)
}
 void DeviceConfirmUploadMessage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceConfirmUploadMessage.url)
}
 ::std::string* DeviceConfirmUploadMessage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:DeviceConfirmUploadMessage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeviceConfirmUploadMessage::release_url() {
  // @@protoc_insertion_point(field_release:DeviceConfirmUploadMessage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceConfirmUploadMessage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DeviceConfirmUploadMessage.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
