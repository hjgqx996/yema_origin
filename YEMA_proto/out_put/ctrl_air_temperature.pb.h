// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_air_temperature.proto

#ifndef PROTOBUF_ctrl_5fair_5ftemperature_2eproto__INCLUDED
#define PROTOBUF_ctrl_5fair_5ftemperature_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ctrl_common_param_tbox.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
void protobuf_AssignDesc_ctrl_5fair_5ftemperature_2eproto();
void protobuf_ShutdownFile_ctrl_5fair_5ftemperature_2eproto();

class AirTemperatureCtrlInfo;
class AirTemperatureStateInfo;
class CtrlAirTemperatureMessage;

// ===================================================================

class CtrlAirTemperatureMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CtrlAirTemperatureMessage) */ {
 public:
  CtrlAirTemperatureMessage();
  virtual ~CtrlAirTemperatureMessage();

  CtrlAirTemperatureMessage(const CtrlAirTemperatureMessage& from);

  inline CtrlAirTemperatureMessage& operator=(const CtrlAirTemperatureMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlAirTemperatureMessage& default_instance();

  void Swap(CtrlAirTemperatureMessage* other);

  // implements Message ----------------------------------------------

  inline CtrlAirTemperatureMessage* New() const { return New(NULL); }

  CtrlAirTemperatureMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlAirTemperatureMessage& from);
  void MergeFrom(const CtrlAirTemperatureMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlAirTemperatureMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CtrlCommonParamTbox common_param = 1;
  bool has_common_param() const;
  void clear_common_param();
  static const int kCommonParamFieldNumber = 1;
  const ::CtrlCommonParamTbox& common_param() const;
  ::CtrlCommonParamTbox* mutable_common_param();
  ::CtrlCommonParamTbox* release_common_param();
  void set_allocated_common_param(::CtrlCommonParamTbox* common_param);

  // optional .AirTemperatureCtrlInfo air_temperature_ctrl_info = 2;
  bool has_air_temperature_ctrl_info() const;
  void clear_air_temperature_ctrl_info();
  static const int kAirTemperatureCtrlInfoFieldNumber = 2;
  const ::AirTemperatureCtrlInfo& air_temperature_ctrl_info() const;
  ::AirTemperatureCtrlInfo* mutable_air_temperature_ctrl_info();
  ::AirTemperatureCtrlInfo* release_air_temperature_ctrl_info();
  void set_allocated_air_temperature_ctrl_info(::AirTemperatureCtrlInfo* air_temperature_ctrl_info);

  // optional .AirTemperatureStateInfo air_temperature_state_info = 3;
  bool has_air_temperature_state_info() const;
  void clear_air_temperature_state_info();
  static const int kAirTemperatureStateInfoFieldNumber = 3;
  const ::AirTemperatureStateInfo& air_temperature_state_info() const;
  ::AirTemperatureStateInfo* mutable_air_temperature_state_info();
  ::AirTemperatureStateInfo* release_air_temperature_state_info();
  void set_allocated_air_temperature_state_info(::AirTemperatureStateInfo* air_temperature_state_info);

  // @@protoc_insertion_point(class_scope:CtrlAirTemperatureMessage)
 private:
  inline void set_has_common_param();
  inline void clear_has_common_param();
  inline void set_has_air_temperature_ctrl_info();
  inline void clear_has_air_temperature_ctrl_info();
  inline void set_has_air_temperature_state_info();
  inline void clear_has_air_temperature_state_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CtrlCommonParamTbox* common_param_;
  ::AirTemperatureCtrlInfo* air_temperature_ctrl_info_;
  ::AirTemperatureStateInfo* air_temperature_state_info_;
  friend void  protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  friend void protobuf_AssignDesc_ctrl_5fair_5ftemperature_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5fair_5ftemperature_2eproto();

  void InitAsDefaultInstance();
  static CtrlAirTemperatureMessage* default_instance_;
};
// -------------------------------------------------------------------

class AirTemperatureCtrlInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AirTemperatureCtrlInfo) */ {
 public:
  AirTemperatureCtrlInfo();
  virtual ~AirTemperatureCtrlInfo();

  AirTemperatureCtrlInfo(const AirTemperatureCtrlInfo& from);

  inline AirTemperatureCtrlInfo& operator=(const AirTemperatureCtrlInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AirTemperatureCtrlInfo& default_instance();

  void Swap(AirTemperatureCtrlInfo* other);

  // implements Message ----------------------------------------------

  inline AirTemperatureCtrlInfo* New() const { return New(NULL); }

  AirTemperatureCtrlInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AirTemperatureCtrlInfo& from);
  void MergeFrom(const AirTemperatureCtrlInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AirTemperatureCtrlInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 set_temperature = 1;
  bool has_set_temperature() const;
  void clear_set_temperature();
  static const int kSetTemperatureFieldNumber = 1;
  ::google::protobuf::int32 set_temperature() const;
  void set_set_temperature(::google::protobuf::int32 value);

  // optional int32 result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AirTemperatureCtrlInfo)
 private:
  inline void set_has_set_temperature();
  inline void clear_has_set_temperature();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 set_temperature_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  friend void protobuf_AssignDesc_ctrl_5fair_5ftemperature_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5fair_5ftemperature_2eproto();

  void InitAsDefaultInstance();
  static AirTemperatureCtrlInfo* default_instance_;
};
// -------------------------------------------------------------------

class AirTemperatureStateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AirTemperatureStateInfo) */ {
 public:
  AirTemperatureStateInfo();
  virtual ~AirTemperatureStateInfo();

  AirTemperatureStateInfo(const AirTemperatureStateInfo& from);

  inline AirTemperatureStateInfo& operator=(const AirTemperatureStateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AirTemperatureStateInfo& default_instance();

  void Swap(AirTemperatureStateInfo* other);

  // implements Message ----------------------------------------------

  inline AirTemperatureStateInfo* New() const { return New(NULL); }

  AirTemperatureStateInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AirTemperatureStateInfo& from);
  void MergeFrom(const AirTemperatureStateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AirTemperatureStateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 set_temperature = 1;
  bool has_set_temperature() const;
  void clear_set_temperature();
  static const int kSetTemperatureFieldNumber = 1;
  ::google::protobuf::int32 set_temperature() const;
  void set_set_temperature(::google::protobuf::int32 value);

  // optional int32 real_temperature = 2;
  bool has_real_temperature() const;
  void clear_real_temperature();
  static const int kRealTemperatureFieldNumber = 2;
  ::google::protobuf::int32 real_temperature() const;
  void set_real_temperature(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AirTemperatureStateInfo)
 private:
  inline void set_has_set_temperature();
  inline void clear_has_set_temperature();
  inline void set_has_real_temperature();
  inline void clear_has_real_temperature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 set_temperature_;
  ::google::protobuf::int32 real_temperature_;
  friend void  protobuf_AddDesc_ctrl_5fair_5ftemperature_2eproto();
  friend void protobuf_AssignDesc_ctrl_5fair_5ftemperature_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5fair_5ftemperature_2eproto();

  void InitAsDefaultInstance();
  static AirTemperatureStateInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlAirTemperatureMessage

// optional .CtrlCommonParamTbox common_param = 1;
inline bool CtrlAirTemperatureMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CtrlAirTemperatureMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CtrlAirTemperatureMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CtrlAirTemperatureMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
inline const ::CtrlCommonParamTbox& CtrlAirTemperatureMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlAirTemperatureMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
inline ::CtrlCommonParamTbox* CtrlAirTemperatureMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirTemperatureMessage.common_param)
  return common_param_;
}
inline ::CtrlCommonParamTbox* CtrlAirTemperatureMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlAirTemperatureMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
inline void CtrlAirTemperatureMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirTemperatureMessage.common_param)
}

// optional .AirTemperatureCtrlInfo air_temperature_ctrl_info = 2;
inline bool CtrlAirTemperatureMessage::has_air_temperature_ctrl_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CtrlAirTemperatureMessage::set_has_air_temperature_ctrl_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CtrlAirTemperatureMessage::clear_has_air_temperature_ctrl_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CtrlAirTemperatureMessage::clear_air_temperature_ctrl_info() {
  if (air_temperature_ctrl_info_ != NULL) air_temperature_ctrl_info_->::AirTemperatureCtrlInfo::Clear();
  clear_has_air_temperature_ctrl_info();
}
inline const ::AirTemperatureCtrlInfo& CtrlAirTemperatureMessage::air_temperature_ctrl_info() const {
  // @@protoc_insertion_point(field_get:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
  return air_temperature_ctrl_info_ != NULL ? *air_temperature_ctrl_info_ : *default_instance_->air_temperature_ctrl_info_;
}
inline ::AirTemperatureCtrlInfo* CtrlAirTemperatureMessage::mutable_air_temperature_ctrl_info() {
  set_has_air_temperature_ctrl_info();
  if (air_temperature_ctrl_info_ == NULL) {
    air_temperature_ctrl_info_ = new ::AirTemperatureCtrlInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
  return air_temperature_ctrl_info_;
}
inline ::AirTemperatureCtrlInfo* CtrlAirTemperatureMessage::release_air_temperature_ctrl_info() {
  // @@protoc_insertion_point(field_release:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
  clear_has_air_temperature_ctrl_info();
  ::AirTemperatureCtrlInfo* temp = air_temperature_ctrl_info_;
  air_temperature_ctrl_info_ = NULL;
  return temp;
}
inline void CtrlAirTemperatureMessage::set_allocated_air_temperature_ctrl_info(::AirTemperatureCtrlInfo* air_temperature_ctrl_info) {
  delete air_temperature_ctrl_info_;
  air_temperature_ctrl_info_ = air_temperature_ctrl_info;
  if (air_temperature_ctrl_info) {
    set_has_air_temperature_ctrl_info();
  } else {
    clear_has_air_temperature_ctrl_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirTemperatureMessage.air_temperature_ctrl_info)
}

// optional .AirTemperatureStateInfo air_temperature_state_info = 3;
inline bool CtrlAirTemperatureMessage::has_air_temperature_state_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CtrlAirTemperatureMessage::set_has_air_temperature_state_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CtrlAirTemperatureMessage::clear_has_air_temperature_state_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CtrlAirTemperatureMessage::clear_air_temperature_state_info() {
  if (air_temperature_state_info_ != NULL) air_temperature_state_info_->::AirTemperatureStateInfo::Clear();
  clear_has_air_temperature_state_info();
}
inline const ::AirTemperatureStateInfo& CtrlAirTemperatureMessage::air_temperature_state_info() const {
  // @@protoc_insertion_point(field_get:CtrlAirTemperatureMessage.air_temperature_state_info)
  return air_temperature_state_info_ != NULL ? *air_temperature_state_info_ : *default_instance_->air_temperature_state_info_;
}
inline ::AirTemperatureStateInfo* CtrlAirTemperatureMessage::mutable_air_temperature_state_info() {
  set_has_air_temperature_state_info();
  if (air_temperature_state_info_ == NULL) {
    air_temperature_state_info_ = new ::AirTemperatureStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlAirTemperatureMessage.air_temperature_state_info)
  return air_temperature_state_info_;
}
inline ::AirTemperatureStateInfo* CtrlAirTemperatureMessage::release_air_temperature_state_info() {
  // @@protoc_insertion_point(field_release:CtrlAirTemperatureMessage.air_temperature_state_info)
  clear_has_air_temperature_state_info();
  ::AirTemperatureStateInfo* temp = air_temperature_state_info_;
  air_temperature_state_info_ = NULL;
  return temp;
}
inline void CtrlAirTemperatureMessage::set_allocated_air_temperature_state_info(::AirTemperatureStateInfo* air_temperature_state_info) {
  delete air_temperature_state_info_;
  air_temperature_state_info_ = air_temperature_state_info;
  if (air_temperature_state_info) {
    set_has_air_temperature_state_info();
  } else {
    clear_has_air_temperature_state_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlAirTemperatureMessage.air_temperature_state_info)
}

// -------------------------------------------------------------------

// AirTemperatureCtrlInfo

// optional int32 set_temperature = 1;
inline bool AirTemperatureCtrlInfo::has_set_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AirTemperatureCtrlInfo::set_has_set_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AirTemperatureCtrlInfo::clear_has_set_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AirTemperatureCtrlInfo::clear_set_temperature() {
  set_temperature_ = 0;
  clear_has_set_temperature();
}
inline ::google::protobuf::int32 AirTemperatureCtrlInfo::set_temperature() const {
  // @@protoc_insertion_point(field_get:AirTemperatureCtrlInfo.set_temperature)
  return set_temperature_;
}
inline void AirTemperatureCtrlInfo::set_set_temperature(::google::protobuf::int32 value) {
  set_has_set_temperature();
  set_temperature_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureCtrlInfo.set_temperature)
}

// optional int32 result = 2;
inline bool AirTemperatureCtrlInfo::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AirTemperatureCtrlInfo::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AirTemperatureCtrlInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AirTemperatureCtrlInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AirTemperatureCtrlInfo::result() const {
  // @@protoc_insertion_point(field_get:AirTemperatureCtrlInfo.result)
  return result_;
}
inline void AirTemperatureCtrlInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureCtrlInfo.result)
}

// -------------------------------------------------------------------

// AirTemperatureStateInfo

// optional int32 set_temperature = 1;
inline bool AirTemperatureStateInfo::has_set_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AirTemperatureStateInfo::set_has_set_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AirTemperatureStateInfo::clear_has_set_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AirTemperatureStateInfo::clear_set_temperature() {
  set_temperature_ = 0;
  clear_has_set_temperature();
}
inline ::google::protobuf::int32 AirTemperatureStateInfo::set_temperature() const {
  // @@protoc_insertion_point(field_get:AirTemperatureStateInfo.set_temperature)
  return set_temperature_;
}
inline void AirTemperatureStateInfo::set_set_temperature(::google::protobuf::int32 value) {
  set_has_set_temperature();
  set_temperature_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureStateInfo.set_temperature)
}

// optional int32 real_temperature = 2;
inline bool AirTemperatureStateInfo::has_real_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AirTemperatureStateInfo::set_has_real_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AirTemperatureStateInfo::clear_has_real_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AirTemperatureStateInfo::clear_real_temperature() {
  real_temperature_ = 0;
  clear_has_real_temperature();
}
inline ::google::protobuf::int32 AirTemperatureStateInfo::real_temperature() const {
  // @@protoc_insertion_point(field_get:AirTemperatureStateInfo.real_temperature)
  return real_temperature_;
}
inline void AirTemperatureStateInfo::set_real_temperature(::google::protobuf::int32 value) {
  set_has_real_temperature();
  real_temperature_ = value;
  // @@protoc_insertion_point(field_set:AirTemperatureStateInfo.real_temperature)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ctrl_5fair_5ftemperature_2eproto__INCLUDED
