// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_ekey.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_ekey.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlEkeyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlEkeyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EkeyStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EkeyStateInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5fekey_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5fekey_2eproto() {
  protobuf_AddDesc_ctrl_5fekey_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_ekey.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlEkeyMessage_descriptor_ = file->message_type(0);
  static const int CtrlEkeyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlEkeyMessage, common_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlEkeyMessage, ekey_ctrl_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlEkeyMessage, ekey_state_info_),
  };
  CtrlEkeyMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlEkeyMessage_descriptor_,
      CtrlEkeyMessage::default_instance_,
      CtrlEkeyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlEkeyMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlEkeyMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlEkeyMessage, _internal_metadata_),
      -1);
  EkeyStateInfo_descriptor_ = file->message_type(1);
  static const int EkeyStateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EkeyStateInfo, remote_enable_),
  };
  EkeyStateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EkeyStateInfo_descriptor_,
      EkeyStateInfo::default_instance_,
      EkeyStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EkeyStateInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(EkeyStateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EkeyStateInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5fekey_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlEkeyMessage_descriptor_, &CtrlEkeyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EkeyStateInfo_descriptor_, &EkeyStateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5fekey_2eproto() {
  delete CtrlEkeyMessage::default_instance_;
  delete CtrlEkeyMessage_reflection_;
  delete EkeyStateInfo::default_instance_;
  delete EkeyStateInfo_reflection_;
}

void protobuf_AddDesc_ctrl_5fekey_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5fekey_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ctrl_5fcommon_5fparam_5ftbox_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ctrl_ekey.proto\032\034ctrl_common_param_tbo"
    "x.proto\"\217\001\n\017CtrlEkeyMessage\022*\n\014common_pa"
    "ram\030\001 \001(\0132\024.CtrlCommonParamTbox\022\'\n\016ekey_"
    "ctrl_info\030\002 \001(\0132\017.CtrlCommonInfo\022\'\n\017ekey"
    "_state_info\030\003 \001(\0132\016.EkeyStateInfo\"&\n\rEke"
    "yStateInfo\022\025\n\rremote_enable\030\001 \001(\005B,\n\034com"
    ".mx.server.remote.v2.beanB\014CtrlEkeyBean", 279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_ekey.proto", &protobuf_RegisterTypes);
  CtrlEkeyMessage::default_instance_ = new CtrlEkeyMessage();
  EkeyStateInfo::default_instance_ = new EkeyStateInfo();
  CtrlEkeyMessage::default_instance_->InitAsDefaultInstance();
  EkeyStateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5fekey_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5fekey_2eproto {
  StaticDescriptorInitializer_ctrl_5fekey_2eproto() {
    protobuf_AddDesc_ctrl_5fekey_2eproto();
  }
} static_descriptor_initializer_ctrl_5fekey_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlEkeyMessage::kCommonParamFieldNumber;
const int CtrlEkeyMessage::kEkeyCtrlInfoFieldNumber;
const int CtrlEkeyMessage::kEkeyStateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlEkeyMessage::CtrlEkeyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlEkeyMessage)
}

void CtrlEkeyMessage::InitAsDefaultInstance() {
  common_param_ = const_cast< ::CtrlCommonParamTbox*>(&::CtrlCommonParamTbox::default_instance());
  ekey_ctrl_info_ = const_cast< ::CtrlCommonInfo*>(&::CtrlCommonInfo::default_instance());
  ekey_state_info_ = const_cast< ::EkeyStateInfo*>(&::EkeyStateInfo::default_instance());
}

CtrlEkeyMessage::CtrlEkeyMessage(const CtrlEkeyMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlEkeyMessage)
}

void CtrlEkeyMessage::SharedCtor() {
  _cached_size_ = 0;
  common_param_ = NULL;
  ekey_ctrl_info_ = NULL;
  ekey_state_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlEkeyMessage::~CtrlEkeyMessage() {
  // @@protoc_insertion_point(destructor:CtrlEkeyMessage)
  SharedDtor();
}

void CtrlEkeyMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_param_;
    delete ekey_ctrl_info_;
    delete ekey_state_info_;
  }
}

void CtrlEkeyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlEkeyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlEkeyMessage_descriptor_;
}

const CtrlEkeyMessage& CtrlEkeyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fekey_2eproto();
  return *default_instance_;
}

CtrlEkeyMessage* CtrlEkeyMessage::default_instance_ = NULL;

CtrlEkeyMessage* CtrlEkeyMessage::New(::google::protobuf::Arena* arena) const {
  CtrlEkeyMessage* n = new CtrlEkeyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlEkeyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlEkeyMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_common_param()) {
      if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
    }
    if (has_ekey_ctrl_info()) {
      if (ekey_ctrl_info_ != NULL) ekey_ctrl_info_->::CtrlCommonInfo::Clear();
    }
    if (has_ekey_state_info()) {
      if (ekey_state_info_ != NULL) ekey_state_info_->::EkeyStateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlEkeyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlEkeyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CtrlCommonParamTbox common_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ekey_ctrl_info;
        break;
      }

      // optional .CtrlCommonInfo ekey_ctrl_info = 2;
      case 2: {
        if (tag == 18) {
         parse_ekey_ctrl_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ekey_ctrl_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ekey_state_info;
        break;
      }

      // optional .EkeyStateInfo ekey_state_info = 3;
      case 3: {
        if (tag == 26) {
         parse_ekey_state_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ekey_state_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlEkeyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlEkeyMessage)
  return false;
#undef DO_
}

void CtrlEkeyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlEkeyMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_param_, output);
  }

  // optional .CtrlCommonInfo ekey_ctrl_info = 2;
  if (has_ekey_ctrl_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ekey_ctrl_info_, output);
  }

  // optional .EkeyStateInfo ekey_state_info = 3;
  if (has_ekey_state_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ekey_state_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlEkeyMessage)
}

::google::protobuf::uint8* CtrlEkeyMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlEkeyMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_param_, false, target);
  }

  // optional .CtrlCommonInfo ekey_ctrl_info = 2;
  if (has_ekey_ctrl_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ekey_ctrl_info_, false, target);
  }

  // optional .EkeyStateInfo ekey_state_info = 3;
  if (has_ekey_state_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ekey_state_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlEkeyMessage)
  return target;
}

int CtrlEkeyMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlEkeyMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CtrlCommonParamTbox common_param = 1;
    if (has_common_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->common_param_);
    }

    // optional .CtrlCommonInfo ekey_ctrl_info = 2;
    if (has_ekey_ctrl_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ekey_ctrl_info_);
    }

    // optional .EkeyStateInfo ekey_state_info = 3;
    if (has_ekey_state_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ekey_state_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlEkeyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlEkeyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlEkeyMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlEkeyMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlEkeyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlEkeyMessage)
    MergeFrom(*source);
  }
}

void CtrlEkeyMessage::MergeFrom(const CtrlEkeyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlEkeyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_param()) {
      mutable_common_param()->::CtrlCommonParamTbox::MergeFrom(from.common_param());
    }
    if (from.has_ekey_ctrl_info()) {
      mutable_ekey_ctrl_info()->::CtrlCommonInfo::MergeFrom(from.ekey_ctrl_info());
    }
    if (from.has_ekey_state_info()) {
      mutable_ekey_state_info()->::EkeyStateInfo::MergeFrom(from.ekey_state_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlEkeyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlEkeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlEkeyMessage::CopyFrom(const CtrlEkeyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlEkeyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlEkeyMessage::IsInitialized() const {

  return true;
}

void CtrlEkeyMessage::Swap(CtrlEkeyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlEkeyMessage::InternalSwap(CtrlEkeyMessage* other) {
  std::swap(common_param_, other->common_param_);
  std::swap(ekey_ctrl_info_, other->ekey_ctrl_info_);
  std::swap(ekey_state_info_, other->ekey_state_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlEkeyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlEkeyMessage_descriptor_;
  metadata.reflection = CtrlEkeyMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlEkeyMessage

// optional .CtrlCommonParamTbox common_param = 1;
bool CtrlEkeyMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlEkeyMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlEkeyMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlEkeyMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
const ::CtrlCommonParamTbox& CtrlEkeyMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlEkeyMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
::CtrlCommonParamTbox* CtrlEkeyMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlEkeyMessage.common_param)
  return common_param_;
}
::CtrlCommonParamTbox* CtrlEkeyMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlEkeyMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
void CtrlEkeyMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlEkeyMessage.common_param)
}

// optional .CtrlCommonInfo ekey_ctrl_info = 2;
bool CtrlEkeyMessage::has_ekey_ctrl_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlEkeyMessage::set_has_ekey_ctrl_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlEkeyMessage::clear_has_ekey_ctrl_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlEkeyMessage::clear_ekey_ctrl_info() {
  if (ekey_ctrl_info_ != NULL) ekey_ctrl_info_->::CtrlCommonInfo::Clear();
  clear_has_ekey_ctrl_info();
}
const ::CtrlCommonInfo& CtrlEkeyMessage::ekey_ctrl_info() const {
  // @@protoc_insertion_point(field_get:CtrlEkeyMessage.ekey_ctrl_info)
  return ekey_ctrl_info_ != NULL ? *ekey_ctrl_info_ : *default_instance_->ekey_ctrl_info_;
}
::CtrlCommonInfo* CtrlEkeyMessage::mutable_ekey_ctrl_info() {
  set_has_ekey_ctrl_info();
  if (ekey_ctrl_info_ == NULL) {
    ekey_ctrl_info_ = new ::CtrlCommonInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlEkeyMessage.ekey_ctrl_info)
  return ekey_ctrl_info_;
}
::CtrlCommonInfo* CtrlEkeyMessage::release_ekey_ctrl_info() {
  // @@protoc_insertion_point(field_release:CtrlEkeyMessage.ekey_ctrl_info)
  clear_has_ekey_ctrl_info();
  ::CtrlCommonInfo* temp = ekey_ctrl_info_;
  ekey_ctrl_info_ = NULL;
  return temp;
}
void CtrlEkeyMessage::set_allocated_ekey_ctrl_info(::CtrlCommonInfo* ekey_ctrl_info) {
  delete ekey_ctrl_info_;
  ekey_ctrl_info_ = ekey_ctrl_info;
  if (ekey_ctrl_info) {
    set_has_ekey_ctrl_info();
  } else {
    clear_has_ekey_ctrl_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlEkeyMessage.ekey_ctrl_info)
}

// optional .EkeyStateInfo ekey_state_info = 3;
bool CtrlEkeyMessage::has_ekey_state_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlEkeyMessage::set_has_ekey_state_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlEkeyMessage::clear_has_ekey_state_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlEkeyMessage::clear_ekey_state_info() {
  if (ekey_state_info_ != NULL) ekey_state_info_->::EkeyStateInfo::Clear();
  clear_has_ekey_state_info();
}
const ::EkeyStateInfo& CtrlEkeyMessage::ekey_state_info() const {
  // @@protoc_insertion_point(field_get:CtrlEkeyMessage.ekey_state_info)
  return ekey_state_info_ != NULL ? *ekey_state_info_ : *default_instance_->ekey_state_info_;
}
::EkeyStateInfo* CtrlEkeyMessage::mutable_ekey_state_info() {
  set_has_ekey_state_info();
  if (ekey_state_info_ == NULL) {
    ekey_state_info_ = new ::EkeyStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlEkeyMessage.ekey_state_info)
  return ekey_state_info_;
}
::EkeyStateInfo* CtrlEkeyMessage::release_ekey_state_info() {
  // @@protoc_insertion_point(field_release:CtrlEkeyMessage.ekey_state_info)
  clear_has_ekey_state_info();
  ::EkeyStateInfo* temp = ekey_state_info_;
  ekey_state_info_ = NULL;
  return temp;
}
void CtrlEkeyMessage::set_allocated_ekey_state_info(::EkeyStateInfo* ekey_state_info) {
  delete ekey_state_info_;
  ekey_state_info_ = ekey_state_info;
  if (ekey_state_info) {
    set_has_ekey_state_info();
  } else {
    clear_has_ekey_state_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlEkeyMessage.ekey_state_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EkeyStateInfo::kRemoteEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EkeyStateInfo::EkeyStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EkeyStateInfo)
}

void EkeyStateInfo::InitAsDefaultInstance() {
}

EkeyStateInfo::EkeyStateInfo(const EkeyStateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EkeyStateInfo)
}

void EkeyStateInfo::SharedCtor() {
  _cached_size_ = 0;
  remote_enable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EkeyStateInfo::~EkeyStateInfo() {
  // @@protoc_insertion_point(destructor:EkeyStateInfo)
  SharedDtor();
}

void EkeyStateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EkeyStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EkeyStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EkeyStateInfo_descriptor_;
}

const EkeyStateInfo& EkeyStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fekey_2eproto();
  return *default_instance_;
}

EkeyStateInfo* EkeyStateInfo::default_instance_ = NULL;

EkeyStateInfo* EkeyStateInfo::New(::google::protobuf::Arena* arena) const {
  EkeyStateInfo* n = new EkeyStateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EkeyStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EkeyStateInfo)
  remote_enable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EkeyStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EkeyStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 remote_enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_enable_)));
          set_has_remote_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EkeyStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EkeyStateInfo)
  return false;
#undef DO_
}

void EkeyStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EkeyStateInfo)
  // optional int32 remote_enable = 1;
  if (has_remote_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->remote_enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EkeyStateInfo)
}

::google::protobuf::uint8* EkeyStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EkeyStateInfo)
  // optional int32 remote_enable = 1;
  if (has_remote_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remote_enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EkeyStateInfo)
  return target;
}

int EkeyStateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EkeyStateInfo)
  int total_size = 0;

  // optional int32 remote_enable = 1;
  if (has_remote_enable()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remote_enable());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EkeyStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EkeyStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EkeyStateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EkeyStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EkeyStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EkeyStateInfo)
    MergeFrom(*source);
  }
}

void EkeyStateInfo::MergeFrom(const EkeyStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EkeyStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remote_enable()) {
      set_remote_enable(from.remote_enable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EkeyStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EkeyStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EkeyStateInfo::CopyFrom(const EkeyStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EkeyStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EkeyStateInfo::IsInitialized() const {

  return true;
}

void EkeyStateInfo::Swap(EkeyStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EkeyStateInfo::InternalSwap(EkeyStateInfo* other) {
  std::swap(remote_enable_, other->remote_enable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EkeyStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EkeyStateInfo_descriptor_;
  metadata.reflection = EkeyStateInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EkeyStateInfo

// optional int32 remote_enable = 1;
bool EkeyStateInfo::has_remote_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EkeyStateInfo::set_has_remote_enable() {
  _has_bits_[0] |= 0x00000001u;
}
void EkeyStateInfo::clear_has_remote_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
void EkeyStateInfo::clear_remote_enable() {
  remote_enable_ = 0;
  clear_has_remote_enable();
}
 ::google::protobuf::int32 EkeyStateInfo::remote_enable() const {
  // @@protoc_insertion_point(field_get:EkeyStateInfo.remote_enable)
  return remote_enable_;
}
 void EkeyStateInfo::set_remote_enable(::google::protobuf::int32 value) {
  set_has_remote_enable();
  remote_enable_ = value;
  // @@protoc_insertion_point(field_set:EkeyStateInfo.remote_enable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
