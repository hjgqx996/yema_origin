// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: term_version_upload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "term_version_upload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TermVersionUploadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TermVersionUploadData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TermVersionUpload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TermVersionUpload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_term_5fversion_5fupload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_term_5fversion_5fupload_2eproto() {
  protobuf_AddDesc_term_5fversion_5fupload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "term_version_upload.proto");
  GOOGLE_CHECK(file != NULL);
  TermVersionUploadData_descriptor_ = file->message_type(0);
  static const int TermVersionUploadData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUploadData, termversionupload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUploadData, respcode_),
  };
  TermVersionUploadData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TermVersionUploadData_descriptor_,
      TermVersionUploadData::default_instance_,
      TermVersionUploadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUploadData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TermVersionUploadData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUploadData, _internal_metadata_),
      -1);
  TermVersionUpload_descriptor_ = file->message_type(1);
  static const int TermVersionUpload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUpload, termtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUpload, manufacturerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUpload, hardwareversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUpload, firmwareversion_),
  };
  TermVersionUpload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TermVersionUpload_descriptor_,
      TermVersionUpload::default_instance_,
      TermVersionUpload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUpload, _has_bits_[0]),
      -1,
      -1,
      sizeof(TermVersionUpload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermVersionUpload, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_term_5fversion_5fupload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TermVersionUploadData_descriptor_, &TermVersionUploadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TermVersionUpload_descriptor_, &TermVersionUpload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_term_5fversion_5fupload_2eproto() {
  delete TermVersionUploadData::default_instance_;
  delete TermVersionUploadData_reflection_;
  delete TermVersionUpload::default_instance_;
  delete TermVersionUpload_reflection_;
}

void protobuf_AddDesc_term_5fversion_5fupload_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_term_5fversion_5fupload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031term_version_upload.proto\"X\n\025TermVersi"
    "onUploadData\022-\n\021termVersionUpload\030\001 \003(\0132"
    "\022.TermVersionUpload\022\020\n\010respCode\030\002 \001(\005\"o\n"
    "\021TermVersionUpload\022\020\n\010termType\030\001 \002(\r\022\026\n\016"
    "manufacturerId\030\002 \001(\t\022\027\n\017hardwareVersion\030"
    "\003 \001(\t\022\027\n\017firmwareVersion\030\004 \002(\tB0\n\022com.mx"
    ".ota.messageB\030TermVersionUploadMessageH\001", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "term_version_upload.proto", &protobuf_RegisterTypes);
  TermVersionUploadData::default_instance_ = new TermVersionUploadData();
  TermVersionUpload::default_instance_ = new TermVersionUpload();
  TermVersionUploadData::default_instance_->InitAsDefaultInstance();
  TermVersionUpload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_term_5fversion_5fupload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_term_5fversion_5fupload_2eproto {
  StaticDescriptorInitializer_term_5fversion_5fupload_2eproto() {
    protobuf_AddDesc_term_5fversion_5fupload_2eproto();
  }
} static_descriptor_initializer_term_5fversion_5fupload_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TermVersionUploadData::kTermVersionUploadFieldNumber;
const int TermVersionUploadData::kRespCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TermVersionUploadData::TermVersionUploadData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TermVersionUploadData)
}

void TermVersionUploadData::InitAsDefaultInstance() {
}

TermVersionUploadData::TermVersionUploadData(const TermVersionUploadData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TermVersionUploadData)
}

void TermVersionUploadData::SharedCtor() {
  _cached_size_ = 0;
  respcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TermVersionUploadData::~TermVersionUploadData() {
  // @@protoc_insertion_point(destructor:TermVersionUploadData)
  SharedDtor();
}

void TermVersionUploadData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TermVersionUploadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TermVersionUploadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TermVersionUploadData_descriptor_;
}

const TermVersionUploadData& TermVersionUploadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_term_5fversion_5fupload_2eproto();
  return *default_instance_;
}

TermVersionUploadData* TermVersionUploadData::default_instance_ = NULL;

TermVersionUploadData* TermVersionUploadData::New(::google::protobuf::Arena* arena) const {
  TermVersionUploadData* n = new TermVersionUploadData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TermVersionUploadData::Clear() {
// @@protoc_insertion_point(message_clear_start:TermVersionUploadData)
  respcode_ = 0;
  termversionupload_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TermVersionUploadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TermVersionUploadData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TermVersionUpload termVersionUpload = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_termVersionUpload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_termversionupload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_termVersionUpload;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_respCode;
        break;
      }

      // optional int32 respCode = 2;
      case 2: {
        if (tag == 16) {
         parse_respCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respcode_)));
          set_has_respcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TermVersionUploadData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TermVersionUploadData)
  return false;
#undef DO_
}

void TermVersionUploadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TermVersionUploadData)
  // repeated .TermVersionUpload termVersionUpload = 1;
  for (unsigned int i = 0, n = this->termversionupload_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->termversionupload(i), output);
  }

  // optional int32 respCode = 2;
  if (has_respcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->respcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TermVersionUploadData)
}

::google::protobuf::uint8* TermVersionUploadData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TermVersionUploadData)
  // repeated .TermVersionUpload termVersionUpload = 1;
  for (unsigned int i = 0, n = this->termversionupload_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->termversionupload(i), false, target);
  }

  // optional int32 respCode = 2;
  if (has_respcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->respcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TermVersionUploadData)
  return target;
}

int TermVersionUploadData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TermVersionUploadData)
  int total_size = 0;

  // optional int32 respCode = 2;
  if (has_respcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->respcode());
  }

  // repeated .TermVersionUpload termVersionUpload = 1;
  total_size += 1 * this->termversionupload_size();
  for (int i = 0; i < this->termversionupload_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->termversionupload(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TermVersionUploadData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TermVersionUploadData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TermVersionUploadData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TermVersionUploadData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TermVersionUploadData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TermVersionUploadData)
    MergeFrom(*source);
  }
}

void TermVersionUploadData::MergeFrom(const TermVersionUploadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TermVersionUploadData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  termversionupload_.MergeFrom(from.termversionupload_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_respcode()) {
      set_respcode(from.respcode());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TermVersionUploadData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TermVersionUploadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermVersionUploadData::CopyFrom(const TermVersionUploadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TermVersionUploadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermVersionUploadData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->termversionupload())) return false;
  return true;
}

void TermVersionUploadData::Swap(TermVersionUploadData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TermVersionUploadData::InternalSwap(TermVersionUploadData* other) {
  termversionupload_.UnsafeArenaSwap(&other->termversionupload_);
  std::swap(respcode_, other->respcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TermVersionUploadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TermVersionUploadData_descriptor_;
  metadata.reflection = TermVersionUploadData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TermVersionUploadData

// repeated .TermVersionUpload termVersionUpload = 1;
int TermVersionUploadData::termversionupload_size() const {
  return termversionupload_.size();
}
void TermVersionUploadData::clear_termversionupload() {
  termversionupload_.Clear();
}
const ::TermVersionUpload& TermVersionUploadData::termversionupload(int index) const {
  // @@protoc_insertion_point(field_get:TermVersionUploadData.termVersionUpload)
  return termversionupload_.Get(index);
}
::TermVersionUpload* TermVersionUploadData::mutable_termversionupload(int index) {
  // @@protoc_insertion_point(field_mutable:TermVersionUploadData.termVersionUpload)
  return termversionupload_.Mutable(index);
}
::TermVersionUpload* TermVersionUploadData::add_termversionupload() {
  // @@protoc_insertion_point(field_add:TermVersionUploadData.termVersionUpload)
  return termversionupload_.Add();
}
::google::protobuf::RepeatedPtrField< ::TermVersionUpload >*
TermVersionUploadData::mutable_termversionupload() {
  // @@protoc_insertion_point(field_mutable_list:TermVersionUploadData.termVersionUpload)
  return &termversionupload_;
}
const ::google::protobuf::RepeatedPtrField< ::TermVersionUpload >&
TermVersionUploadData::termversionupload() const {
  // @@protoc_insertion_point(field_list:TermVersionUploadData.termVersionUpload)
  return termversionupload_;
}

// optional int32 respCode = 2;
bool TermVersionUploadData::has_respcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TermVersionUploadData::set_has_respcode() {
  _has_bits_[0] |= 0x00000002u;
}
void TermVersionUploadData::clear_has_respcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void TermVersionUploadData::clear_respcode() {
  respcode_ = 0;
  clear_has_respcode();
}
 ::google::protobuf::int32 TermVersionUploadData::respcode() const {
  // @@protoc_insertion_point(field_get:TermVersionUploadData.respCode)
  return respcode_;
}
 void TermVersionUploadData::set_respcode(::google::protobuf::int32 value) {
  set_has_respcode();
  respcode_ = value;
  // @@protoc_insertion_point(field_set:TermVersionUploadData.respCode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TermVersionUpload::kTermTypeFieldNumber;
const int TermVersionUpload::kManufacturerIdFieldNumber;
const int TermVersionUpload::kHardwareVersionFieldNumber;
const int TermVersionUpload::kFirmwareVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TermVersionUpload::TermVersionUpload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TermVersionUpload)
}

void TermVersionUpload::InitAsDefaultInstance() {
}

TermVersionUpload::TermVersionUpload(const TermVersionUpload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TermVersionUpload)
}

void TermVersionUpload::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  termtype_ = 0u;
  manufacturerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TermVersionUpload::~TermVersionUpload() {
  // @@protoc_insertion_point(destructor:TermVersionUpload)
  SharedDtor();
}

void TermVersionUpload::SharedDtor() {
  manufacturerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hardwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TermVersionUpload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TermVersionUpload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TermVersionUpload_descriptor_;
}

const TermVersionUpload& TermVersionUpload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_term_5fversion_5fupload_2eproto();
  return *default_instance_;
}

TermVersionUpload* TermVersionUpload::default_instance_ = NULL;

TermVersionUpload* TermVersionUpload::New(::google::protobuf::Arena* arena) const {
  TermVersionUpload* n = new TermVersionUpload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TermVersionUpload::Clear() {
// @@protoc_insertion_point(message_clear_start:TermVersionUpload)
  if (_has_bits_[0 / 32] & 15u) {
    termtype_ = 0u;
    if (has_manufacturerid()) {
      manufacturerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hardwareversion()) {
      hardwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_firmwareversion()) {
      firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TermVersionUpload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TermVersionUpload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 termType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &termtype_)));
          set_has_termtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_manufacturerId;
        break;
      }

      // optional string manufacturerId = 2;
      case 2: {
        if (tag == 18) {
         parse_manufacturerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturerid().data(), this->manufacturerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TermVersionUpload.manufacturerId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hardwareVersion;
        break;
      }

      // optional string hardwareVersion = 3;
      case 3: {
        if (tag == 26) {
         parse_hardwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hardwareversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hardwareversion().data(), this->hardwareversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TermVersionUpload.hardwareVersion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_firmwareVersion;
        break;
      }

      // required string firmwareVersion = 4;
      case 4: {
        if (tag == 34) {
         parse_firmwareVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firmwareversion().data(), this->firmwareversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TermVersionUpload.firmwareVersion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TermVersionUpload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TermVersionUpload)
  return false;
#undef DO_
}

void TermVersionUpload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TermVersionUpload)
  // required uint32 termType = 1;
  if (has_termtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->termtype(), output);
  }

  // optional string manufacturerId = 2;
  if (has_manufacturerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturerid().data(), this->manufacturerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermVersionUpload.manufacturerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturerid(), output);
  }

  // optional string hardwareVersion = 3;
  if (has_hardwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareversion().data(), this->hardwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermVersionUpload.hardwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hardwareversion(), output);
  }

  // required string firmwareVersion = 4;
  if (has_firmwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermVersionUpload.firmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->firmwareversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TermVersionUpload)
}

::google::protobuf::uint8* TermVersionUpload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TermVersionUpload)
  // required uint32 termType = 1;
  if (has_termtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->termtype(), target);
  }

  // optional string manufacturerId = 2;
  if (has_manufacturerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturerid().data(), this->manufacturerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermVersionUpload.manufacturerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->manufacturerid(), target);
  }

  // optional string hardwareVersion = 3;
  if (has_hardwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hardwareversion().data(), this->hardwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermVersionUpload.hardwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hardwareversion(), target);
  }

  // required string firmwareVersion = 4;
  if (has_firmwareversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firmwareversion().data(), this->firmwareversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TermVersionUpload.firmwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->firmwareversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TermVersionUpload)
  return target;
}

int TermVersionUpload::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TermVersionUpload)
  int total_size = 0;

  if (has_termtype()) {
    // required uint32 termType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->termtype());
  }

  if (has_firmwareversion()) {
    // required string firmwareVersion = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());
  }

  return total_size;
}
int TermVersionUpload::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TermVersionUpload)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required uint32 termType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->termtype());

    // required string firmwareVersion = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string manufacturerId = 2;
    if (has_manufacturerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturerid());
    }

    // optional string hardwareVersion = 3;
    if (has_hardwareversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hardwareversion());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TermVersionUpload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TermVersionUpload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TermVersionUpload* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TermVersionUpload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TermVersionUpload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TermVersionUpload)
    MergeFrom(*source);
  }
}

void TermVersionUpload::MergeFrom(const TermVersionUpload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TermVersionUpload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_termtype()) {
      set_termtype(from.termtype());
    }
    if (from.has_manufacturerid()) {
      set_has_manufacturerid();
      manufacturerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturerid_);
    }
    if (from.has_hardwareversion()) {
      set_has_hardwareversion();
      hardwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hardwareversion_);
    }
    if (from.has_firmwareversion()) {
      set_has_firmwareversion();
      firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TermVersionUpload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TermVersionUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermVersionUpload::CopyFrom(const TermVersionUpload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TermVersionUpload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermVersionUpload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void TermVersionUpload::Swap(TermVersionUpload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TermVersionUpload::InternalSwap(TermVersionUpload* other) {
  std::swap(termtype_, other->termtype_);
  manufacturerid_.Swap(&other->manufacturerid_);
  hardwareversion_.Swap(&other->hardwareversion_);
  firmwareversion_.Swap(&other->firmwareversion_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TermVersionUpload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TermVersionUpload_descriptor_;
  metadata.reflection = TermVersionUpload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TermVersionUpload

// required uint32 termType = 1;
bool TermVersionUpload::has_termtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TermVersionUpload::set_has_termtype() {
  _has_bits_[0] |= 0x00000001u;
}
void TermVersionUpload::clear_has_termtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void TermVersionUpload::clear_termtype() {
  termtype_ = 0u;
  clear_has_termtype();
}
 ::google::protobuf::uint32 TermVersionUpload::termtype() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.termType)
  return termtype_;
}
 void TermVersionUpload::set_termtype(::google::protobuf::uint32 value) {
  set_has_termtype();
  termtype_ = value;
  // @@protoc_insertion_point(field_set:TermVersionUpload.termType)
}

// optional string manufacturerId = 2;
bool TermVersionUpload::has_manufacturerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TermVersionUpload::set_has_manufacturerid() {
  _has_bits_[0] |= 0x00000002u;
}
void TermVersionUpload::clear_has_manufacturerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TermVersionUpload::clear_manufacturerid() {
  manufacturerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturerid();
}
 const ::std::string& TermVersionUpload::manufacturerid() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.manufacturerId)
  return manufacturerid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermVersionUpload::set_manufacturerid(const ::std::string& value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermVersionUpload.manufacturerId)
}
 void TermVersionUpload::set_manufacturerid(const char* value) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermVersionUpload.manufacturerId)
}
 void TermVersionUpload::set_manufacturerid(const char* value, size_t size) {
  set_has_manufacturerid();
  manufacturerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermVersionUpload.manufacturerId)
}
 ::std::string* TermVersionUpload::mutable_manufacturerid() {
  set_has_manufacturerid();
  // @@protoc_insertion_point(field_mutable:TermVersionUpload.manufacturerId)
  return manufacturerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TermVersionUpload::release_manufacturerid() {
  // @@protoc_insertion_point(field_release:TermVersionUpload.manufacturerId)
  clear_has_manufacturerid();
  return manufacturerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermVersionUpload::set_allocated_manufacturerid(::std::string* manufacturerid) {
  if (manufacturerid != NULL) {
    set_has_manufacturerid();
  } else {
    clear_has_manufacturerid();
  }
  manufacturerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturerid);
  // @@protoc_insertion_point(field_set_allocated:TermVersionUpload.manufacturerId)
}

// optional string hardwareVersion = 3;
bool TermVersionUpload::has_hardwareversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TermVersionUpload::set_has_hardwareversion() {
  _has_bits_[0] |= 0x00000004u;
}
void TermVersionUpload::clear_has_hardwareversion() {
  _has_bits_[0] &= ~0x00000004u;
}
void TermVersionUpload::clear_hardwareversion() {
  hardwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardwareversion();
}
 const ::std::string& TermVersionUpload::hardwareversion() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.hardwareVersion)
  return hardwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermVersionUpload::set_hardwareversion(const ::std::string& value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermVersionUpload.hardwareVersion)
}
 void TermVersionUpload::set_hardwareversion(const char* value) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermVersionUpload.hardwareVersion)
}
 void TermVersionUpload::set_hardwareversion(const char* value, size_t size) {
  set_has_hardwareversion();
  hardwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermVersionUpload.hardwareVersion)
}
 ::std::string* TermVersionUpload::mutable_hardwareversion() {
  set_has_hardwareversion();
  // @@protoc_insertion_point(field_mutable:TermVersionUpload.hardwareVersion)
  return hardwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TermVersionUpload::release_hardwareversion() {
  // @@protoc_insertion_point(field_release:TermVersionUpload.hardwareVersion)
  clear_has_hardwareversion();
  return hardwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermVersionUpload::set_allocated_hardwareversion(::std::string* hardwareversion) {
  if (hardwareversion != NULL) {
    set_has_hardwareversion();
  } else {
    clear_has_hardwareversion();
  }
  hardwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardwareversion);
  // @@protoc_insertion_point(field_set_allocated:TermVersionUpload.hardwareVersion)
}

// required string firmwareVersion = 4;
bool TermVersionUpload::has_firmwareversion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TermVersionUpload::set_has_firmwareversion() {
  _has_bits_[0] |= 0x00000008u;
}
void TermVersionUpload::clear_has_firmwareversion() {
  _has_bits_[0] &= ~0x00000008u;
}
void TermVersionUpload::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firmwareversion();
}
 const ::std::string& TermVersionUpload::firmwareversion() const {
  // @@protoc_insertion_point(field_get:TermVersionUpload.firmwareVersion)
  return firmwareversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermVersionUpload::set_firmwareversion(const ::std::string& value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TermVersionUpload.firmwareVersion)
}
 void TermVersionUpload::set_firmwareversion(const char* value) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TermVersionUpload.firmwareVersion)
}
 void TermVersionUpload::set_firmwareversion(const char* value, size_t size) {
  set_has_firmwareversion();
  firmwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TermVersionUpload.firmwareVersion)
}
 ::std::string* TermVersionUpload::mutable_firmwareversion() {
  set_has_firmwareversion();
  // @@protoc_insertion_point(field_mutable:TermVersionUpload.firmwareVersion)
  return firmwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TermVersionUpload::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:TermVersionUpload.firmwareVersion)
  clear_has_firmwareversion();
  return firmwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TermVersionUpload::set_allocated_firmwareversion(::std::string* firmwareversion) {
  if (firmwareversion != NULL) {
    set_has_firmwareversion();
  } else {
    clear_has_firmwareversion();
  }
  firmwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:TermVersionUpload.firmwareVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
