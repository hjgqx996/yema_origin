// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_top_windows.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_top_windows.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CtrlTopWindowsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CtrlTopWindowsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopWindowsStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopWindowsStateInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5ftop_5fwindows_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ctrl_5ftop_5fwindows_2eproto() {
  protobuf_AddDesc_ctrl_5ftop_5fwindows_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_top_windows.proto");
  GOOGLE_CHECK(file != NULL);
  CtrlTopWindowsMessage_descriptor_ = file->message_type(0);
  static const int CtrlTopWindowsMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTopWindowsMessage, common_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTopWindowsMessage, top_windows_ctrl_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTopWindowsMessage, top_windows_state_info_),
  };
  CtrlTopWindowsMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CtrlTopWindowsMessage_descriptor_,
      CtrlTopWindowsMessage::default_instance_,
      CtrlTopWindowsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTopWindowsMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(CtrlTopWindowsMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CtrlTopWindowsMessage, _internal_metadata_),
      -1);
  TopWindowsStateInfo_descriptor_ = file->message_type(1);
  static const int TopWindowsStateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopWindowsStateInfo, sunroof_curtain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopWindowsStateInfo, sunroof_glass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopWindowsStateInfo, sunroof_possition_),
  };
  TopWindowsStateInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopWindowsStateInfo_descriptor_,
      TopWindowsStateInfo::default_instance_,
      TopWindowsStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopWindowsStateInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(TopWindowsStateInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopWindowsStateInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5ftop_5fwindows_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CtrlTopWindowsMessage_descriptor_, &CtrlTopWindowsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopWindowsStateInfo_descriptor_, &TopWindowsStateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5ftop_5fwindows_2eproto() {
  delete CtrlTopWindowsMessage::default_instance_;
  delete CtrlTopWindowsMessage_reflection_;
  delete TopWindowsStateInfo::default_instance_;
  delete TopWindowsStateInfo_reflection_;
}

void protobuf_AddDesc_ctrl_5ftop_5fwindows_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ctrl_5ftop_5fwindows_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_ctrl_5fcommon_5fparam_5ftbox_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ctrl_top_windows.proto\032\034ctrl_common_pa"
    "ram_tbox.proto\"\251\001\n\025CtrlTopWindowsMessage"
    "\022*\n\014common_param\030\001 \001(\0132\024.CtrlCommonParam"
    "Tbox\022.\n\025top_windows_ctrl_info\030\002 \001(\0132\017.Ct"
    "rlCommonInfo\0224\n\026top_windows_state_info\030\003"
    " \001(\0132\024.TopWindowsStateInfo\"`\n\023TopWindows"
    "StateInfo\022\027\n\017sunroof_curtain\030\001 \001(\005\022\025\n\rsu"
    "nroof_glass\030\002 \001(\005\022\031\n\021sunroof_possition\030\003"
    " \001(\005B2\n\034com.mx.server.remote.v2.beanB\022Ct"
    "rlTopWindowsBean", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_top_windows.proto", &protobuf_RegisterTypes);
  CtrlTopWindowsMessage::default_instance_ = new CtrlTopWindowsMessage();
  TopWindowsStateInfo::default_instance_ = new TopWindowsStateInfo();
  CtrlTopWindowsMessage::default_instance_->InitAsDefaultInstance();
  TopWindowsStateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5ftop_5fwindows_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5ftop_5fwindows_2eproto {
  StaticDescriptorInitializer_ctrl_5ftop_5fwindows_2eproto() {
    protobuf_AddDesc_ctrl_5ftop_5fwindows_2eproto();
  }
} static_descriptor_initializer_ctrl_5ftop_5fwindows_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CtrlTopWindowsMessage::kCommonParamFieldNumber;
const int CtrlTopWindowsMessage::kTopWindowsCtrlInfoFieldNumber;
const int CtrlTopWindowsMessage::kTopWindowsStateInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CtrlTopWindowsMessage::CtrlTopWindowsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CtrlTopWindowsMessage)
}

void CtrlTopWindowsMessage::InitAsDefaultInstance() {
  common_param_ = const_cast< ::CtrlCommonParamTbox*>(&::CtrlCommonParamTbox::default_instance());
  top_windows_ctrl_info_ = const_cast< ::CtrlCommonInfo*>(&::CtrlCommonInfo::default_instance());
  top_windows_state_info_ = const_cast< ::TopWindowsStateInfo*>(&::TopWindowsStateInfo::default_instance());
}

CtrlTopWindowsMessage::CtrlTopWindowsMessage(const CtrlTopWindowsMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CtrlTopWindowsMessage)
}

void CtrlTopWindowsMessage::SharedCtor() {
  _cached_size_ = 0;
  common_param_ = NULL;
  top_windows_ctrl_info_ = NULL;
  top_windows_state_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlTopWindowsMessage::~CtrlTopWindowsMessage() {
  // @@protoc_insertion_point(destructor:CtrlTopWindowsMessage)
  SharedDtor();
}

void CtrlTopWindowsMessage::SharedDtor() {
  if (this != default_instance_) {
    delete common_param_;
    delete top_windows_ctrl_info_;
    delete top_windows_state_info_;
  }
}

void CtrlTopWindowsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CtrlTopWindowsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CtrlTopWindowsMessage_descriptor_;
}

const CtrlTopWindowsMessage& CtrlTopWindowsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5ftop_5fwindows_2eproto();
  return *default_instance_;
}

CtrlTopWindowsMessage* CtrlTopWindowsMessage::default_instance_ = NULL;

CtrlTopWindowsMessage* CtrlTopWindowsMessage::New(::google::protobuf::Arena* arena) const {
  CtrlTopWindowsMessage* n = new CtrlTopWindowsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlTopWindowsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CtrlTopWindowsMessage)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_common_param()) {
      if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
    }
    if (has_top_windows_ctrl_info()) {
      if (top_windows_ctrl_info_ != NULL) top_windows_ctrl_info_->::CtrlCommonInfo::Clear();
    }
    if (has_top_windows_state_info()) {
      if (top_windows_state_info_ != NULL) top_windows_state_info_->::TopWindowsStateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CtrlTopWindowsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CtrlTopWindowsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CtrlCommonParamTbox common_param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_windows_ctrl_info;
        break;
      }

      // optional .CtrlCommonInfo top_windows_ctrl_info = 2;
      case 2: {
        if (tag == 18) {
         parse_top_windows_ctrl_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_windows_ctrl_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_top_windows_state_info;
        break;
      }

      // optional .TopWindowsStateInfo top_windows_state_info = 3;
      case 3: {
        if (tag == 26) {
         parse_top_windows_state_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_windows_state_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CtrlTopWindowsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CtrlTopWindowsMessage)
  return false;
#undef DO_
}

void CtrlTopWindowsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CtrlTopWindowsMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->common_param_, output);
  }

  // optional .CtrlCommonInfo top_windows_ctrl_info = 2;
  if (has_top_windows_ctrl_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->top_windows_ctrl_info_, output);
  }

  // optional .TopWindowsStateInfo top_windows_state_info = 3;
  if (has_top_windows_state_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->top_windows_state_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CtrlTopWindowsMessage)
}

::google::protobuf::uint8* CtrlTopWindowsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CtrlTopWindowsMessage)
  // optional .CtrlCommonParamTbox common_param = 1;
  if (has_common_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->common_param_, false, target);
  }

  // optional .CtrlCommonInfo top_windows_ctrl_info = 2;
  if (has_top_windows_ctrl_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->top_windows_ctrl_info_, false, target);
  }

  // optional .TopWindowsStateInfo top_windows_state_info = 3;
  if (has_top_windows_state_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->top_windows_state_info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CtrlTopWindowsMessage)
  return target;
}

int CtrlTopWindowsMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CtrlTopWindowsMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .CtrlCommonParamTbox common_param = 1;
    if (has_common_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->common_param_);
    }

    // optional .CtrlCommonInfo top_windows_ctrl_info = 2;
    if (has_top_windows_ctrl_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->top_windows_ctrl_info_);
    }

    // optional .TopWindowsStateInfo top_windows_state_info = 3;
    if (has_top_windows_state_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->top_windows_state_info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlTopWindowsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CtrlTopWindowsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CtrlTopWindowsMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CtrlTopWindowsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CtrlTopWindowsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CtrlTopWindowsMessage)
    MergeFrom(*source);
  }
}

void CtrlTopWindowsMessage::MergeFrom(const CtrlTopWindowsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CtrlTopWindowsMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common_param()) {
      mutable_common_param()->::CtrlCommonParamTbox::MergeFrom(from.common_param());
    }
    if (from.has_top_windows_ctrl_info()) {
      mutable_top_windows_ctrl_info()->::CtrlCommonInfo::MergeFrom(from.top_windows_ctrl_info());
    }
    if (from.has_top_windows_state_info()) {
      mutable_top_windows_state_info()->::TopWindowsStateInfo::MergeFrom(from.top_windows_state_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CtrlTopWindowsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CtrlTopWindowsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlTopWindowsMessage::CopyFrom(const CtrlTopWindowsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CtrlTopWindowsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlTopWindowsMessage::IsInitialized() const {

  return true;
}

void CtrlTopWindowsMessage::Swap(CtrlTopWindowsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlTopWindowsMessage::InternalSwap(CtrlTopWindowsMessage* other) {
  std::swap(common_param_, other->common_param_);
  std::swap(top_windows_ctrl_info_, other->top_windows_ctrl_info_);
  std::swap(top_windows_state_info_, other->top_windows_state_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CtrlTopWindowsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CtrlTopWindowsMessage_descriptor_;
  metadata.reflection = CtrlTopWindowsMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlTopWindowsMessage

// optional .CtrlCommonParamTbox common_param = 1;
bool CtrlTopWindowsMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlTopWindowsMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlTopWindowsMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlTopWindowsMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
const ::CtrlCommonParamTbox& CtrlTopWindowsMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlTopWindowsMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
::CtrlCommonParamTbox* CtrlTopWindowsMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTopWindowsMessage.common_param)
  return common_param_;
}
::CtrlCommonParamTbox* CtrlTopWindowsMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlTopWindowsMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
void CtrlTopWindowsMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTopWindowsMessage.common_param)
}

// optional .CtrlCommonInfo top_windows_ctrl_info = 2;
bool CtrlTopWindowsMessage::has_top_windows_ctrl_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlTopWindowsMessage::set_has_top_windows_ctrl_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlTopWindowsMessage::clear_has_top_windows_ctrl_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlTopWindowsMessage::clear_top_windows_ctrl_info() {
  if (top_windows_ctrl_info_ != NULL) top_windows_ctrl_info_->::CtrlCommonInfo::Clear();
  clear_has_top_windows_ctrl_info();
}
const ::CtrlCommonInfo& CtrlTopWindowsMessage::top_windows_ctrl_info() const {
  // @@protoc_insertion_point(field_get:CtrlTopWindowsMessage.top_windows_ctrl_info)
  return top_windows_ctrl_info_ != NULL ? *top_windows_ctrl_info_ : *default_instance_->top_windows_ctrl_info_;
}
::CtrlCommonInfo* CtrlTopWindowsMessage::mutable_top_windows_ctrl_info() {
  set_has_top_windows_ctrl_info();
  if (top_windows_ctrl_info_ == NULL) {
    top_windows_ctrl_info_ = new ::CtrlCommonInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTopWindowsMessage.top_windows_ctrl_info)
  return top_windows_ctrl_info_;
}
::CtrlCommonInfo* CtrlTopWindowsMessage::release_top_windows_ctrl_info() {
  // @@protoc_insertion_point(field_release:CtrlTopWindowsMessage.top_windows_ctrl_info)
  clear_has_top_windows_ctrl_info();
  ::CtrlCommonInfo* temp = top_windows_ctrl_info_;
  top_windows_ctrl_info_ = NULL;
  return temp;
}
void CtrlTopWindowsMessage::set_allocated_top_windows_ctrl_info(::CtrlCommonInfo* top_windows_ctrl_info) {
  delete top_windows_ctrl_info_;
  top_windows_ctrl_info_ = top_windows_ctrl_info;
  if (top_windows_ctrl_info) {
    set_has_top_windows_ctrl_info();
  } else {
    clear_has_top_windows_ctrl_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTopWindowsMessage.top_windows_ctrl_info)
}

// optional .TopWindowsStateInfo top_windows_state_info = 3;
bool CtrlTopWindowsMessage::has_top_windows_state_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlTopWindowsMessage::set_has_top_windows_state_info() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlTopWindowsMessage::clear_has_top_windows_state_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlTopWindowsMessage::clear_top_windows_state_info() {
  if (top_windows_state_info_ != NULL) top_windows_state_info_->::TopWindowsStateInfo::Clear();
  clear_has_top_windows_state_info();
}
const ::TopWindowsStateInfo& CtrlTopWindowsMessage::top_windows_state_info() const {
  // @@protoc_insertion_point(field_get:CtrlTopWindowsMessage.top_windows_state_info)
  return top_windows_state_info_ != NULL ? *top_windows_state_info_ : *default_instance_->top_windows_state_info_;
}
::TopWindowsStateInfo* CtrlTopWindowsMessage::mutable_top_windows_state_info() {
  set_has_top_windows_state_info();
  if (top_windows_state_info_ == NULL) {
    top_windows_state_info_ = new ::TopWindowsStateInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTopWindowsMessage.top_windows_state_info)
  return top_windows_state_info_;
}
::TopWindowsStateInfo* CtrlTopWindowsMessage::release_top_windows_state_info() {
  // @@protoc_insertion_point(field_release:CtrlTopWindowsMessage.top_windows_state_info)
  clear_has_top_windows_state_info();
  ::TopWindowsStateInfo* temp = top_windows_state_info_;
  top_windows_state_info_ = NULL;
  return temp;
}
void CtrlTopWindowsMessage::set_allocated_top_windows_state_info(::TopWindowsStateInfo* top_windows_state_info) {
  delete top_windows_state_info_;
  top_windows_state_info_ = top_windows_state_info;
  if (top_windows_state_info) {
    set_has_top_windows_state_info();
  } else {
    clear_has_top_windows_state_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTopWindowsMessage.top_windows_state_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopWindowsStateInfo::kSunroofCurtainFieldNumber;
const int TopWindowsStateInfo::kSunroofGlassFieldNumber;
const int TopWindowsStateInfo::kSunroofPossitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopWindowsStateInfo::TopWindowsStateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopWindowsStateInfo)
}

void TopWindowsStateInfo::InitAsDefaultInstance() {
}

TopWindowsStateInfo::TopWindowsStateInfo(const TopWindowsStateInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopWindowsStateInfo)
}

void TopWindowsStateInfo::SharedCtor() {
  _cached_size_ = 0;
  sunroof_curtain_ = 0;
  sunroof_glass_ = 0;
  sunroof_possition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopWindowsStateInfo::~TopWindowsStateInfo() {
  // @@protoc_insertion_point(destructor:TopWindowsStateInfo)
  SharedDtor();
}

void TopWindowsStateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopWindowsStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopWindowsStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopWindowsStateInfo_descriptor_;
}

const TopWindowsStateInfo& TopWindowsStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5ftop_5fwindows_2eproto();
  return *default_instance_;
}

TopWindowsStateInfo* TopWindowsStateInfo::default_instance_ = NULL;

TopWindowsStateInfo* TopWindowsStateInfo::New(::google::protobuf::Arena* arena) const {
  TopWindowsStateInfo* n = new TopWindowsStateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopWindowsStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TopWindowsStateInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TopWindowsStateInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TopWindowsStateInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sunroof_curtain_, sunroof_possition_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TopWindowsStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopWindowsStateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sunroof_curtain = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sunroof_curtain_)));
          set_has_sunroof_curtain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sunroof_glass;
        break;
      }

      // optional int32 sunroof_glass = 2;
      case 2: {
        if (tag == 16) {
         parse_sunroof_glass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sunroof_glass_)));
          set_has_sunroof_glass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sunroof_possition;
        break;
      }

      // optional int32 sunroof_possition = 3;
      case 3: {
        if (tag == 24) {
         parse_sunroof_possition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sunroof_possition_)));
          set_has_sunroof_possition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopWindowsStateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopWindowsStateInfo)
  return false;
#undef DO_
}

void TopWindowsStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopWindowsStateInfo)
  // optional int32 sunroof_curtain = 1;
  if (has_sunroof_curtain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sunroof_curtain(), output);
  }

  // optional int32 sunroof_glass = 2;
  if (has_sunroof_glass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sunroof_glass(), output);
  }

  // optional int32 sunroof_possition = 3;
  if (has_sunroof_possition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sunroof_possition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TopWindowsStateInfo)
}

::google::protobuf::uint8* TopWindowsStateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopWindowsStateInfo)
  // optional int32 sunroof_curtain = 1;
  if (has_sunroof_curtain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sunroof_curtain(), target);
  }

  // optional int32 sunroof_glass = 2;
  if (has_sunroof_glass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sunroof_glass(), target);
  }

  // optional int32 sunroof_possition = 3;
  if (has_sunroof_possition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sunroof_possition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TopWindowsStateInfo)
  return target;
}

int TopWindowsStateInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TopWindowsStateInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 sunroof_curtain = 1;
    if (has_sunroof_curtain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sunroof_curtain());
    }

    // optional int32 sunroof_glass = 2;
    if (has_sunroof_glass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sunroof_glass());
    }

    // optional int32 sunroof_possition = 3;
    if (has_sunroof_possition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sunroof_possition());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopWindowsStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TopWindowsStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopWindowsStateInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopWindowsStateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TopWindowsStateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TopWindowsStateInfo)
    MergeFrom(*source);
  }
}

void TopWindowsStateInfo::MergeFrom(const TopWindowsStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TopWindowsStateInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sunroof_curtain()) {
      set_sunroof_curtain(from.sunroof_curtain());
    }
    if (from.has_sunroof_glass()) {
      set_sunroof_glass(from.sunroof_glass());
    }
    if (from.has_sunroof_possition()) {
      set_sunroof_possition(from.sunroof_possition());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TopWindowsStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TopWindowsStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopWindowsStateInfo::CopyFrom(const TopWindowsStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TopWindowsStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopWindowsStateInfo::IsInitialized() const {

  return true;
}

void TopWindowsStateInfo::Swap(TopWindowsStateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopWindowsStateInfo::InternalSwap(TopWindowsStateInfo* other) {
  std::swap(sunroof_curtain_, other->sunroof_curtain_);
  std::swap(sunroof_glass_, other->sunroof_glass_);
  std::swap(sunroof_possition_, other->sunroof_possition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopWindowsStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopWindowsStateInfo_descriptor_;
  metadata.reflection = TopWindowsStateInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopWindowsStateInfo

// optional int32 sunroof_curtain = 1;
bool TopWindowsStateInfo::has_sunroof_curtain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TopWindowsStateInfo::set_has_sunroof_curtain() {
  _has_bits_[0] |= 0x00000001u;
}
void TopWindowsStateInfo::clear_has_sunroof_curtain() {
  _has_bits_[0] &= ~0x00000001u;
}
void TopWindowsStateInfo::clear_sunroof_curtain() {
  sunroof_curtain_ = 0;
  clear_has_sunroof_curtain();
}
 ::google::protobuf::int32 TopWindowsStateInfo::sunroof_curtain() const {
  // @@protoc_insertion_point(field_get:TopWindowsStateInfo.sunroof_curtain)
  return sunroof_curtain_;
}
 void TopWindowsStateInfo::set_sunroof_curtain(::google::protobuf::int32 value) {
  set_has_sunroof_curtain();
  sunroof_curtain_ = value;
  // @@protoc_insertion_point(field_set:TopWindowsStateInfo.sunroof_curtain)
}

// optional int32 sunroof_glass = 2;
bool TopWindowsStateInfo::has_sunroof_glass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TopWindowsStateInfo::set_has_sunroof_glass() {
  _has_bits_[0] |= 0x00000002u;
}
void TopWindowsStateInfo::clear_has_sunroof_glass() {
  _has_bits_[0] &= ~0x00000002u;
}
void TopWindowsStateInfo::clear_sunroof_glass() {
  sunroof_glass_ = 0;
  clear_has_sunroof_glass();
}
 ::google::protobuf::int32 TopWindowsStateInfo::sunroof_glass() const {
  // @@protoc_insertion_point(field_get:TopWindowsStateInfo.sunroof_glass)
  return sunroof_glass_;
}
 void TopWindowsStateInfo::set_sunroof_glass(::google::protobuf::int32 value) {
  set_has_sunroof_glass();
  sunroof_glass_ = value;
  // @@protoc_insertion_point(field_set:TopWindowsStateInfo.sunroof_glass)
}

// optional int32 sunroof_possition = 3;
bool TopWindowsStateInfo::has_sunroof_possition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TopWindowsStateInfo::set_has_sunroof_possition() {
  _has_bits_[0] |= 0x00000004u;
}
void TopWindowsStateInfo::clear_has_sunroof_possition() {
  _has_bits_[0] &= ~0x00000004u;
}
void TopWindowsStateInfo::clear_sunroof_possition() {
  sunroof_possition_ = 0;
  clear_has_sunroof_possition();
}
 ::google::protobuf::int32 TopWindowsStateInfo::sunroof_possition() const {
  // @@protoc_insertion_point(field_get:TopWindowsStateInfo.sunroof_possition)
  return sunroof_possition_;
}
 void TopWindowsStateInfo::set_sunroof_possition(::google::protobuf::int32 value) {
  set_has_sunroof_possition();
  sunroof_possition_ = value;
  // @@protoc_insertion_point(field_set:TopWindowsStateInfo.sunroof_possition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
