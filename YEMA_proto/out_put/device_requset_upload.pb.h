// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_requset_upload.proto

#ifndef PROTOBUF_device_5frequset_5fupload_2eproto__INCLUDED
#define PROTOBUF_device_5frequset_5fupload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "device_upload_common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_device_5frequset_5fupload_2eproto();
void protobuf_AssignDesc_device_5frequset_5fupload_2eproto();
void protobuf_ShutdownFile_device_5frequset_5fupload_2eproto();

class DeviceRequsetUploadMessage;

// ===================================================================

class DeviceRequsetUploadMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceRequsetUploadMessage) */ {
 public:
  DeviceRequsetUploadMessage();
  virtual ~DeviceRequsetUploadMessage();

  DeviceRequsetUploadMessage(const DeviceRequsetUploadMessage& from);

  inline DeviceRequsetUploadMessage& operator=(const DeviceRequsetUploadMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceRequsetUploadMessage& default_instance();

  void Swap(DeviceRequsetUploadMessage* other);

  // implements Message ----------------------------------------------

  inline DeviceRequsetUploadMessage* New() const { return New(NULL); }

  DeviceRequsetUploadMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceRequsetUploadMessage& from);
  void MergeFrom(const DeviceRequsetUploadMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceRequsetUploadMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DeviceUploadCommonMessage device_upload_common = 1;
  bool has_device_upload_common() const;
  void clear_device_upload_common();
  static const int kDeviceUploadCommonFieldNumber = 1;
  const ::DeviceUploadCommonMessage& device_upload_common() const;
  ::DeviceUploadCommonMessage* mutable_device_upload_common();
  ::DeviceUploadCommonMessage* release_device_upload_common();
  void set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common);

  // optional double lon = 2;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // optional double lat = 4;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  double lat() const;
  void set_lat(double value);

  // optional fixed64 time = 6;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // optional string file_name = 8;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 8;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:DeviceRequsetUploadMessage)
 private:
  inline void set_has_device_upload_common();
  inline void clear_has_device_upload_common();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DeviceUploadCommonMessage* device_upload_common_;
  double lon_;
  double lat_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend void  protobuf_AddDesc_device_5frequset_5fupload_2eproto();
  friend void protobuf_AssignDesc_device_5frequset_5fupload_2eproto();
  friend void protobuf_ShutdownFile_device_5frequset_5fupload_2eproto();

  void InitAsDefaultInstance();
  static DeviceRequsetUploadMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceRequsetUploadMessage

// optional .DeviceUploadCommonMessage device_upload_common = 1;
inline bool DeviceRequsetUploadMessage::has_device_upload_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceRequsetUploadMessage::set_has_device_upload_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceRequsetUploadMessage::clear_has_device_upload_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceRequsetUploadMessage::clear_device_upload_common() {
  if (device_upload_common_ != NULL) device_upload_common_->::DeviceUploadCommonMessage::Clear();
  clear_has_device_upload_common();
}
inline const ::DeviceUploadCommonMessage& DeviceRequsetUploadMessage::device_upload_common() const {
  // @@protoc_insertion_point(field_get:DeviceRequsetUploadMessage.device_upload_common)
  return device_upload_common_ != NULL ? *device_upload_common_ : *default_instance_->device_upload_common_;
}
inline ::DeviceUploadCommonMessage* DeviceRequsetUploadMessage::mutable_device_upload_common() {
  set_has_device_upload_common();
  if (device_upload_common_ == NULL) {
    device_upload_common_ = new ::DeviceUploadCommonMessage;
  }
  // @@protoc_insertion_point(field_mutable:DeviceRequsetUploadMessage.device_upload_common)
  return device_upload_common_;
}
inline ::DeviceUploadCommonMessage* DeviceRequsetUploadMessage::release_device_upload_common() {
  // @@protoc_insertion_point(field_release:DeviceRequsetUploadMessage.device_upload_common)
  clear_has_device_upload_common();
  ::DeviceUploadCommonMessage* temp = device_upload_common_;
  device_upload_common_ = NULL;
  return temp;
}
inline void DeviceRequsetUploadMessage::set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common) {
  delete device_upload_common_;
  device_upload_common_ = device_upload_common;
  if (device_upload_common) {
    set_has_device_upload_common();
  } else {
    clear_has_device_upload_common();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceRequsetUploadMessage.device_upload_common)
}

// optional double lon = 2;
inline bool DeviceRequsetUploadMessage::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceRequsetUploadMessage::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceRequsetUploadMessage::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceRequsetUploadMessage::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double DeviceRequsetUploadMessage::lon() const {
  // @@protoc_insertion_point(field_get:DeviceRequsetUploadMessage.lon)
  return lon_;
}
inline void DeviceRequsetUploadMessage::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:DeviceRequsetUploadMessage.lon)
}

// optional double lat = 4;
inline bool DeviceRequsetUploadMessage::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceRequsetUploadMessage::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceRequsetUploadMessage::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceRequsetUploadMessage::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double DeviceRequsetUploadMessage::lat() const {
  // @@protoc_insertion_point(field_get:DeviceRequsetUploadMessage.lat)
  return lat_;
}
inline void DeviceRequsetUploadMessage::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:DeviceRequsetUploadMessage.lat)
}

// optional fixed64 time = 6;
inline bool DeviceRequsetUploadMessage::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceRequsetUploadMessage::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceRequsetUploadMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceRequsetUploadMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 DeviceRequsetUploadMessage::time() const {
  // @@protoc_insertion_point(field_get:DeviceRequsetUploadMessage.time)
  return time_;
}
inline void DeviceRequsetUploadMessage::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:DeviceRequsetUploadMessage.time)
}

// optional string file_name = 8;
inline bool DeviceRequsetUploadMessage::has_file_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceRequsetUploadMessage::set_has_file_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceRequsetUploadMessage::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceRequsetUploadMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& DeviceRequsetUploadMessage::file_name() const {
  // @@protoc_insertion_point(field_get:DeviceRequsetUploadMessage.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRequsetUploadMessage::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceRequsetUploadMessage.file_name)
}
inline void DeviceRequsetUploadMessage::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceRequsetUploadMessage.file_name)
}
inline void DeviceRequsetUploadMessage::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceRequsetUploadMessage.file_name)
}
inline ::std::string* DeviceRequsetUploadMessage::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:DeviceRequsetUploadMessage.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceRequsetUploadMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:DeviceRequsetUploadMessage.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceRequsetUploadMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:DeviceRequsetUploadMessage.file_name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_5frequset_5fupload_2eproto__INCLUDED
