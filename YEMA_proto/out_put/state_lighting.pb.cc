// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_lighting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "state_lighting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StateLightingMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateLightingMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_state_5flighting_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_state_5flighting_2eproto() {
  protobuf_AddDesc_state_5flighting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "state_lighting.proto");
  GOOGLE_CHECK(file != NULL);
  StateLightingMessage_descriptor_ = file->message_type(0);
  static const int StateLightingMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, low_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, high_beam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, left_cornering_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, right_cornering_lamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, clearance_light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, fog_light_),
  };
  StateLightingMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StateLightingMessage_descriptor_,
      StateLightingMessage::default_instance_,
      StateLightingMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(StateLightingMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateLightingMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_state_5flighting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateLightingMessage_descriptor_, &StateLightingMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_state_5flighting_2eproto() {
  delete StateLightingMessage::default_instance_;
  delete StateLightingMessage_reflection_;
}

void protobuf_AddDesc_state_5flighting_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_state_5flighting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024state_lighting.proto\"\242\001\n\024StateLighting"
    "Message\022\020\n\010low_beam\030\001 \001(\005\022\021\n\thigh_beam\030\002"
    " \001(\005\022\033\n\023left_cornering_lamp\030\004 \001(\005\022\034\n\024rig"
    "ht_cornering_lamp\030\006 \001(\005\022\027\n\017clearance_lig"
    "ht\030\010 \001(\005\022\021\n\tfog_light\030\n \001(\005B7\n\"com.mx.se"
    "rver.remote.v2.bean.stateB\021StateLighting"
    "Bean", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "state_lighting.proto", &protobuf_RegisterTypes);
  StateLightingMessage::default_instance_ = new StateLightingMessage();
  StateLightingMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_state_5flighting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_state_5flighting_2eproto {
  StaticDescriptorInitializer_state_5flighting_2eproto() {
    protobuf_AddDesc_state_5flighting_2eproto();
  }
} static_descriptor_initializer_state_5flighting_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateLightingMessage::kLowBeamFieldNumber;
const int StateLightingMessage::kHighBeamFieldNumber;
const int StateLightingMessage::kLeftCorneringLampFieldNumber;
const int StateLightingMessage::kRightCorneringLampFieldNumber;
const int StateLightingMessage::kClearanceLightFieldNumber;
const int StateLightingMessage::kFogLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateLightingMessage::StateLightingMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StateLightingMessage)
}

void StateLightingMessage::InitAsDefaultInstance() {
}

StateLightingMessage::StateLightingMessage(const StateLightingMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StateLightingMessage)
}

void StateLightingMessage::SharedCtor() {
  _cached_size_ = 0;
  low_beam_ = 0;
  high_beam_ = 0;
  left_cornering_lamp_ = 0;
  right_cornering_lamp_ = 0;
  clearance_light_ = 0;
  fog_light_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateLightingMessage::~StateLightingMessage() {
  // @@protoc_insertion_point(destructor:StateLightingMessage)
  SharedDtor();
}

void StateLightingMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateLightingMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateLightingMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateLightingMessage_descriptor_;
}

const StateLightingMessage& StateLightingMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_5flighting_2eproto();
  return *default_instance_;
}

StateLightingMessage* StateLightingMessage::default_instance_ = NULL;

StateLightingMessage* StateLightingMessage::New(::google::protobuf::Arena* arena) const {
  StateLightingMessage* n = new StateLightingMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateLightingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StateLightingMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StateLightingMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StateLightingMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(low_beam_, fog_light_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StateLightingMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StateLightingMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 low_beam = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_beam_)));
          set_has_low_beam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_high_beam;
        break;
      }

      // optional int32 high_beam = 2;
      case 2: {
        if (tag == 16) {
         parse_high_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_beam_)));
          set_has_high_beam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_left_cornering_lamp;
        break;
      }

      // optional int32 left_cornering_lamp = 4;
      case 4: {
        if (tag == 32) {
         parse_left_cornering_lamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_cornering_lamp_)));
          set_has_left_cornering_lamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_right_cornering_lamp;
        break;
      }

      // optional int32 right_cornering_lamp = 6;
      case 6: {
        if (tag == 48) {
         parse_right_cornering_lamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_cornering_lamp_)));
          set_has_right_cornering_lamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_clearance_light;
        break;
      }

      // optional int32 clearance_light = 8;
      case 8: {
        if (tag == 64) {
         parse_clearance_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clearance_light_)));
          set_has_clearance_light();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fog_light;
        break;
      }

      // optional int32 fog_light = 10;
      case 10: {
        if (tag == 80) {
         parse_fog_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fog_light_)));
          set_has_fog_light();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StateLightingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StateLightingMessage)
  return false;
#undef DO_
}

void StateLightingMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StateLightingMessage)
  // optional int32 low_beam = 1;
  if (has_low_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->low_beam(), output);
  }

  // optional int32 high_beam = 2;
  if (has_high_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->high_beam(), output);
  }

  // optional int32 left_cornering_lamp = 4;
  if (has_left_cornering_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_cornering_lamp(), output);
  }

  // optional int32 right_cornering_lamp = 6;
  if (has_right_cornering_lamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->right_cornering_lamp(), output);
  }

  // optional int32 clearance_light = 8;
  if (has_clearance_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->clearance_light(), output);
  }

  // optional int32 fog_light = 10;
  if (has_fog_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fog_light(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StateLightingMessage)
}

::google::protobuf::uint8* StateLightingMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StateLightingMessage)
  // optional int32 low_beam = 1;
  if (has_low_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->low_beam(), target);
  }

  // optional int32 high_beam = 2;
  if (has_high_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->high_beam(), target);
  }

  // optional int32 left_cornering_lamp = 4;
  if (has_left_cornering_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_cornering_lamp(), target);
  }

  // optional int32 right_cornering_lamp = 6;
  if (has_right_cornering_lamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->right_cornering_lamp(), target);
  }

  // optional int32 clearance_light = 8;
  if (has_clearance_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->clearance_light(), target);
  }

  // optional int32 fog_light = 10;
  if (has_fog_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fog_light(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateLightingMessage)
  return target;
}

int StateLightingMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StateLightingMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 low_beam = 1;
    if (has_low_beam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low_beam());
    }

    // optional int32 high_beam = 2;
    if (has_high_beam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high_beam());
    }

    // optional int32 left_cornering_lamp = 4;
    if (has_left_cornering_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_cornering_lamp());
    }

    // optional int32 right_cornering_lamp = 6;
    if (has_right_cornering_lamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_cornering_lamp());
    }

    // optional int32 clearance_light = 8;
    if (has_clearance_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clearance_light());
    }

    // optional int32 fog_light = 10;
    if (has_fog_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fog_light());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateLightingMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StateLightingMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StateLightingMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StateLightingMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StateLightingMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StateLightingMessage)
    MergeFrom(*source);
  }
}

void StateLightingMessage::MergeFrom(const StateLightingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StateLightingMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_low_beam()) {
      set_low_beam(from.low_beam());
    }
    if (from.has_high_beam()) {
      set_high_beam(from.high_beam());
    }
    if (from.has_left_cornering_lamp()) {
      set_left_cornering_lamp(from.left_cornering_lamp());
    }
    if (from.has_right_cornering_lamp()) {
      set_right_cornering_lamp(from.right_cornering_lamp());
    }
    if (from.has_clearance_light()) {
      set_clearance_light(from.clearance_light());
    }
    if (from.has_fog_light()) {
      set_fog_light(from.fog_light());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StateLightingMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StateLightingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateLightingMessage::CopyFrom(const StateLightingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateLightingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateLightingMessage::IsInitialized() const {

  return true;
}

void StateLightingMessage::Swap(StateLightingMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateLightingMessage::InternalSwap(StateLightingMessage* other) {
  std::swap(low_beam_, other->low_beam_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(left_cornering_lamp_, other->left_cornering_lamp_);
  std::swap(right_cornering_lamp_, other->right_cornering_lamp_);
  std::swap(clearance_light_, other->clearance_light_);
  std::swap(fog_light_, other->fog_light_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateLightingMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateLightingMessage_descriptor_;
  metadata.reflection = StateLightingMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StateLightingMessage

// optional int32 low_beam = 1;
bool StateLightingMessage::has_low_beam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StateLightingMessage::set_has_low_beam() {
  _has_bits_[0] |= 0x00000001u;
}
void StateLightingMessage::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00000001u;
}
void StateLightingMessage::clear_low_beam() {
  low_beam_ = 0;
  clear_has_low_beam();
}
 ::google::protobuf::int32 StateLightingMessage::low_beam() const {
  // @@protoc_insertion_point(field_get:StateLightingMessage.low_beam)
  return low_beam_;
}
 void StateLightingMessage::set_low_beam(::google::protobuf::int32 value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:StateLightingMessage.low_beam)
}

// optional int32 high_beam = 2;
bool StateLightingMessage::has_high_beam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StateLightingMessage::set_has_high_beam() {
  _has_bits_[0] |= 0x00000002u;
}
void StateLightingMessage::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000002u;
}
void StateLightingMessage::clear_high_beam() {
  high_beam_ = 0;
  clear_has_high_beam();
}
 ::google::protobuf::int32 StateLightingMessage::high_beam() const {
  // @@protoc_insertion_point(field_get:StateLightingMessage.high_beam)
  return high_beam_;
}
 void StateLightingMessage::set_high_beam(::google::protobuf::int32 value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:StateLightingMessage.high_beam)
}

// optional int32 left_cornering_lamp = 4;
bool StateLightingMessage::has_left_cornering_lamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StateLightingMessage::set_has_left_cornering_lamp() {
  _has_bits_[0] |= 0x00000004u;
}
void StateLightingMessage::clear_has_left_cornering_lamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void StateLightingMessage::clear_left_cornering_lamp() {
  left_cornering_lamp_ = 0;
  clear_has_left_cornering_lamp();
}
 ::google::protobuf::int32 StateLightingMessage::left_cornering_lamp() const {
  // @@protoc_insertion_point(field_get:StateLightingMessage.left_cornering_lamp)
  return left_cornering_lamp_;
}
 void StateLightingMessage::set_left_cornering_lamp(::google::protobuf::int32 value) {
  set_has_left_cornering_lamp();
  left_cornering_lamp_ = value;
  // @@protoc_insertion_point(field_set:StateLightingMessage.left_cornering_lamp)
}

// optional int32 right_cornering_lamp = 6;
bool StateLightingMessage::has_right_cornering_lamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StateLightingMessage::set_has_right_cornering_lamp() {
  _has_bits_[0] |= 0x00000008u;
}
void StateLightingMessage::clear_has_right_cornering_lamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void StateLightingMessage::clear_right_cornering_lamp() {
  right_cornering_lamp_ = 0;
  clear_has_right_cornering_lamp();
}
 ::google::protobuf::int32 StateLightingMessage::right_cornering_lamp() const {
  // @@protoc_insertion_point(field_get:StateLightingMessage.right_cornering_lamp)
  return right_cornering_lamp_;
}
 void StateLightingMessage::set_right_cornering_lamp(::google::protobuf::int32 value) {
  set_has_right_cornering_lamp();
  right_cornering_lamp_ = value;
  // @@protoc_insertion_point(field_set:StateLightingMessage.right_cornering_lamp)
}

// optional int32 clearance_light = 8;
bool StateLightingMessage::has_clearance_light() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StateLightingMessage::set_has_clearance_light() {
  _has_bits_[0] |= 0x00000010u;
}
void StateLightingMessage::clear_has_clearance_light() {
  _has_bits_[0] &= ~0x00000010u;
}
void StateLightingMessage::clear_clearance_light() {
  clearance_light_ = 0;
  clear_has_clearance_light();
}
 ::google::protobuf::int32 StateLightingMessage::clearance_light() const {
  // @@protoc_insertion_point(field_get:StateLightingMessage.clearance_light)
  return clearance_light_;
}
 void StateLightingMessage::set_clearance_light(::google::protobuf::int32 value) {
  set_has_clearance_light();
  clearance_light_ = value;
  // @@protoc_insertion_point(field_set:StateLightingMessage.clearance_light)
}

// optional int32 fog_light = 10;
bool StateLightingMessage::has_fog_light() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StateLightingMessage::set_has_fog_light() {
  _has_bits_[0] |= 0x00000020u;
}
void StateLightingMessage::clear_has_fog_light() {
  _has_bits_[0] &= ~0x00000020u;
}
void StateLightingMessage::clear_fog_light() {
  fog_light_ = 0;
  clear_has_fog_light();
}
 ::google::protobuf::int32 StateLightingMessage::fog_light() const {
  // @@protoc_insertion_point(field_get:StateLightingMessage.fog_light)
  return fog_light_;
}
 void StateLightingMessage::set_fog_light(::google::protobuf::int32 value) {
  set_has_fog_light();
  fog_light_ = value;
  // @@protoc_insertion_point(field_set:StateLightingMessage.fog_light)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
