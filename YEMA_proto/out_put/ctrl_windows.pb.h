// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_windows.proto

#ifndef PROTOBUF_ctrl_5fwindows_2eproto__INCLUDED
#define PROTOBUF_ctrl_5fwindows_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ctrl_common_param_tbox.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ctrl_5fwindows_2eproto();
void protobuf_AssignDesc_ctrl_5fwindows_2eproto();
void protobuf_ShutdownFile_ctrl_5fwindows_2eproto();

class CtrlWindowsMessage;
class WindowsCtrlInfo;
class WindowsStateInfo;

enum WindowPos {
  LEFT_FRONT_WINDOW = 1,
  RIGHT_FRONT_WINDOW = 2,
  RIGHT_BACK_WINDOW = 3,
  LEFT_BACK_WINDOW = 4
};
bool WindowPos_IsValid(int value);
const WindowPos WindowPos_MIN = LEFT_FRONT_WINDOW;
const WindowPos WindowPos_MAX = LEFT_BACK_WINDOW;
const int WindowPos_ARRAYSIZE = WindowPos_MAX + 1;

const ::google::protobuf::EnumDescriptor* WindowPos_descriptor();
inline const ::std::string& WindowPos_Name(WindowPos value) {
  return ::google::protobuf::internal::NameOfEnum(
    WindowPos_descriptor(), value);
}
inline bool WindowPos_Parse(
    const ::std::string& name, WindowPos* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WindowPos>(
    WindowPos_descriptor(), name, value);
}
enum WindowStatus {
  WINDOW_CLOSED = 0,
  WINDOW_OPENED = 1,
  STOPPED = 2,
  AUTO_UP_MOVING = 3,
  MANUAL_UP_MOVING = 4,
  AUTO_DOWN_MOVING = 5,
  MANUAL_DOWN_MOVING = 6,
  STATE_EXCEPTION_STATUS = 255
};
bool WindowStatus_IsValid(int value);
const WindowStatus WindowStatus_MIN = WINDOW_CLOSED;
const WindowStatus WindowStatus_MAX = STATE_EXCEPTION_STATUS;
const int WindowStatus_ARRAYSIZE = WindowStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* WindowStatus_descriptor();
inline const ::std::string& WindowStatus_Name(WindowStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    WindowStatus_descriptor(), value);
}
inline bool WindowStatus_Parse(
    const ::std::string& name, WindowStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WindowStatus>(
    WindowStatus_descriptor(), name, value);
}
// ===================================================================

class CtrlWindowsMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CtrlWindowsMessage) */ {
 public:
  CtrlWindowsMessage();
  virtual ~CtrlWindowsMessage();

  CtrlWindowsMessage(const CtrlWindowsMessage& from);

  inline CtrlWindowsMessage& operator=(const CtrlWindowsMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlWindowsMessage& default_instance();

  void Swap(CtrlWindowsMessage* other);

  // implements Message ----------------------------------------------

  inline CtrlWindowsMessage* New() const { return New(NULL); }

  CtrlWindowsMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlWindowsMessage& from);
  void MergeFrom(const CtrlWindowsMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlWindowsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CtrlCommonParamTbox common_param = 1;
  bool has_common_param() const;
  void clear_common_param();
  static const int kCommonParamFieldNumber = 1;
  const ::CtrlCommonParamTbox& common_param() const;
  ::CtrlCommonParamTbox* mutable_common_param();
  ::CtrlCommonParamTbox* release_common_param();
  void set_allocated_common_param(::CtrlCommonParamTbox* common_param);

  // repeated .WindowsCtrlInfo windows_ctrl_info = 2;
  int windows_ctrl_info_size() const;
  void clear_windows_ctrl_info();
  static const int kWindowsCtrlInfoFieldNumber = 2;
  const ::WindowsCtrlInfo& windows_ctrl_info(int index) const;
  ::WindowsCtrlInfo* mutable_windows_ctrl_info(int index);
  ::WindowsCtrlInfo* add_windows_ctrl_info();
  ::google::protobuf::RepeatedPtrField< ::WindowsCtrlInfo >*
      mutable_windows_ctrl_info();
  const ::google::protobuf::RepeatedPtrField< ::WindowsCtrlInfo >&
      windows_ctrl_info() const;

  // repeated .WindowsStateInfo windows_state_info = 4;
  int windows_state_info_size() const;
  void clear_windows_state_info();
  static const int kWindowsStateInfoFieldNumber = 4;
  const ::WindowsStateInfo& windows_state_info(int index) const;
  ::WindowsStateInfo* mutable_windows_state_info(int index);
  ::WindowsStateInfo* add_windows_state_info();
  ::google::protobuf::RepeatedPtrField< ::WindowsStateInfo >*
      mutable_windows_state_info();
  const ::google::protobuf::RepeatedPtrField< ::WindowsStateInfo >&
      windows_state_info() const;

  // @@protoc_insertion_point(class_scope:CtrlWindowsMessage)
 private:
  inline void set_has_common_param();
  inline void clear_has_common_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CtrlCommonParamTbox* common_param_;
  ::google::protobuf::RepeatedPtrField< ::WindowsCtrlInfo > windows_ctrl_info_;
  ::google::protobuf::RepeatedPtrField< ::WindowsStateInfo > windows_state_info_;
  friend void  protobuf_AddDesc_ctrl_5fwindows_2eproto();
  friend void protobuf_AssignDesc_ctrl_5fwindows_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5fwindows_2eproto();

  void InitAsDefaultInstance();
  static CtrlWindowsMessage* default_instance_;
};
// -------------------------------------------------------------------

class WindowsCtrlInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WindowsCtrlInfo) */ {
 public:
  WindowsCtrlInfo();
  virtual ~WindowsCtrlInfo();

  WindowsCtrlInfo(const WindowsCtrlInfo& from);

  inline WindowsCtrlInfo& operator=(const WindowsCtrlInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowsCtrlInfo& default_instance();

  void Swap(WindowsCtrlInfo* other);

  // implements Message ----------------------------------------------

  inline WindowsCtrlInfo* New() const { return New(NULL); }

  WindowsCtrlInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindowsCtrlInfo& from);
  void MergeFrom(const WindowsCtrlInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowsCtrlInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .WindowPos window_pos = 1;
  bool has_window_pos() const;
  void clear_window_pos();
  static const int kWindowPosFieldNumber = 1;
  ::WindowPos window_pos() const;
  void set_window_pos(::WindowPos value);

  // optional uint32 window_opened_value = 2;
  bool has_window_opened_value() const;
  void clear_window_opened_value();
  static const int kWindowOpenedValueFieldNumber = 2;
  ::google::protobuf::uint32 window_opened_value() const;
  void set_window_opened_value(::google::protobuf::uint32 value);

  // optional int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WindowsCtrlInfo)
 private:
  inline void set_has_window_pos();
  inline void clear_has_window_pos();
  inline void set_has_window_opened_value();
  inline void clear_has_window_opened_value();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int window_pos_;
  ::google::protobuf::uint32 window_opened_value_;
  ::google::protobuf::int32 result_;
  friend void  protobuf_AddDesc_ctrl_5fwindows_2eproto();
  friend void protobuf_AssignDesc_ctrl_5fwindows_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5fwindows_2eproto();

  void InitAsDefaultInstance();
  static WindowsCtrlInfo* default_instance_;
};
// -------------------------------------------------------------------

class WindowsStateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WindowsStateInfo) */ {
 public:
  WindowsStateInfo();
  virtual ~WindowsStateInfo();

  WindowsStateInfo(const WindowsStateInfo& from);

  inline WindowsStateInfo& operator=(const WindowsStateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowsStateInfo& default_instance();

  void Swap(WindowsStateInfo* other);

  // implements Message ----------------------------------------------

  inline WindowsStateInfo* New() const { return New(NULL); }

  WindowsStateInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindowsStateInfo& from);
  void MergeFrom(const WindowsStateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowsStateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .WindowPos window_pos = 1;
  bool has_window_pos() const;
  void clear_window_pos();
  static const int kWindowPosFieldNumber = 1;
  ::WindowPos window_pos() const;
  void set_window_pos(::WindowPos value);

  // optional uint32 window_opened_value = 2;
  bool has_window_opened_value() const;
  void clear_window_opened_value();
  static const int kWindowOpenedValueFieldNumber = 2;
  ::google::protobuf::uint32 window_opened_value() const;
  void set_window_opened_value(::google::protobuf::uint32 value);

  // optional .WindowStatus window_status = 3;
  bool has_window_status() const;
  void clear_window_status();
  static const int kWindowStatusFieldNumber = 3;
  ::WindowStatus window_status() const;
  void set_window_status(::WindowStatus value);

  // @@protoc_insertion_point(class_scope:WindowsStateInfo)
 private:
  inline void set_has_window_pos();
  inline void clear_has_window_pos();
  inline void set_has_window_opened_value();
  inline void clear_has_window_opened_value();
  inline void set_has_window_status();
  inline void clear_has_window_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int window_pos_;
  ::google::protobuf::uint32 window_opened_value_;
  int window_status_;
  friend void  protobuf_AddDesc_ctrl_5fwindows_2eproto();
  friend void protobuf_AssignDesc_ctrl_5fwindows_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5fwindows_2eproto();

  void InitAsDefaultInstance();
  static WindowsStateInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlWindowsMessage

// optional .CtrlCommonParamTbox common_param = 1;
inline bool CtrlWindowsMessage::has_common_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CtrlWindowsMessage::set_has_common_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CtrlWindowsMessage::clear_has_common_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CtrlWindowsMessage::clear_common_param() {
  if (common_param_ != NULL) common_param_->::CtrlCommonParamTbox::Clear();
  clear_has_common_param();
}
inline const ::CtrlCommonParamTbox& CtrlWindowsMessage::common_param() const {
  // @@protoc_insertion_point(field_get:CtrlWindowsMessage.common_param)
  return common_param_ != NULL ? *common_param_ : *default_instance_->common_param_;
}
inline ::CtrlCommonParamTbox* CtrlWindowsMessage::mutable_common_param() {
  set_has_common_param();
  if (common_param_ == NULL) {
    common_param_ = new ::CtrlCommonParamTbox;
  }
  // @@protoc_insertion_point(field_mutable:CtrlWindowsMessage.common_param)
  return common_param_;
}
inline ::CtrlCommonParamTbox* CtrlWindowsMessage::release_common_param() {
  // @@protoc_insertion_point(field_release:CtrlWindowsMessage.common_param)
  clear_has_common_param();
  ::CtrlCommonParamTbox* temp = common_param_;
  common_param_ = NULL;
  return temp;
}
inline void CtrlWindowsMessage::set_allocated_common_param(::CtrlCommonParamTbox* common_param) {
  delete common_param_;
  common_param_ = common_param;
  if (common_param) {
    set_has_common_param();
  } else {
    clear_has_common_param();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlWindowsMessage.common_param)
}

// repeated .WindowsCtrlInfo windows_ctrl_info = 2;
inline int CtrlWindowsMessage::windows_ctrl_info_size() const {
  return windows_ctrl_info_.size();
}
inline void CtrlWindowsMessage::clear_windows_ctrl_info() {
  windows_ctrl_info_.Clear();
}
inline const ::WindowsCtrlInfo& CtrlWindowsMessage::windows_ctrl_info(int index) const {
  // @@protoc_insertion_point(field_get:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_.Get(index);
}
inline ::WindowsCtrlInfo* CtrlWindowsMessage::mutable_windows_ctrl_info(int index) {
  // @@protoc_insertion_point(field_mutable:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_.Mutable(index);
}
inline ::WindowsCtrlInfo* CtrlWindowsMessage::add_windows_ctrl_info() {
  // @@protoc_insertion_point(field_add:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::WindowsCtrlInfo >*
CtrlWindowsMessage::mutable_windows_ctrl_info() {
  // @@protoc_insertion_point(field_mutable_list:CtrlWindowsMessage.windows_ctrl_info)
  return &windows_ctrl_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::WindowsCtrlInfo >&
CtrlWindowsMessage::windows_ctrl_info() const {
  // @@protoc_insertion_point(field_list:CtrlWindowsMessage.windows_ctrl_info)
  return windows_ctrl_info_;
}

// repeated .WindowsStateInfo windows_state_info = 4;
inline int CtrlWindowsMessage::windows_state_info_size() const {
  return windows_state_info_.size();
}
inline void CtrlWindowsMessage::clear_windows_state_info() {
  windows_state_info_.Clear();
}
inline const ::WindowsStateInfo& CtrlWindowsMessage::windows_state_info(int index) const {
  // @@protoc_insertion_point(field_get:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_.Get(index);
}
inline ::WindowsStateInfo* CtrlWindowsMessage::mutable_windows_state_info(int index) {
  // @@protoc_insertion_point(field_mutable:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_.Mutable(index);
}
inline ::WindowsStateInfo* CtrlWindowsMessage::add_windows_state_info() {
  // @@protoc_insertion_point(field_add:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::WindowsStateInfo >*
CtrlWindowsMessage::mutable_windows_state_info() {
  // @@protoc_insertion_point(field_mutable_list:CtrlWindowsMessage.windows_state_info)
  return &windows_state_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::WindowsStateInfo >&
CtrlWindowsMessage::windows_state_info() const {
  // @@protoc_insertion_point(field_list:CtrlWindowsMessage.windows_state_info)
  return windows_state_info_;
}

// -------------------------------------------------------------------

// WindowsCtrlInfo

// optional .WindowPos window_pos = 1;
inline bool WindowsCtrlInfo::has_window_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowsCtrlInfo::set_has_window_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowsCtrlInfo::clear_has_window_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowsCtrlInfo::clear_window_pos() {
  window_pos_ = 1;
  clear_has_window_pos();
}
inline ::WindowPos WindowsCtrlInfo::window_pos() const {
  // @@protoc_insertion_point(field_get:WindowsCtrlInfo.window_pos)
  return static_cast< ::WindowPos >(window_pos_);
}
inline void WindowsCtrlInfo::set_window_pos(::WindowPos value) {
  assert(::WindowPos_IsValid(value));
  set_has_window_pos();
  window_pos_ = value;
  // @@protoc_insertion_point(field_set:WindowsCtrlInfo.window_pos)
}

// optional uint32 window_opened_value = 2;
inline bool WindowsCtrlInfo::has_window_opened_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowsCtrlInfo::set_has_window_opened_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowsCtrlInfo::clear_has_window_opened_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowsCtrlInfo::clear_window_opened_value() {
  window_opened_value_ = 0u;
  clear_has_window_opened_value();
}
inline ::google::protobuf::uint32 WindowsCtrlInfo::window_opened_value() const {
  // @@protoc_insertion_point(field_get:WindowsCtrlInfo.window_opened_value)
  return window_opened_value_;
}
inline void WindowsCtrlInfo::set_window_opened_value(::google::protobuf::uint32 value) {
  set_has_window_opened_value();
  window_opened_value_ = value;
  // @@protoc_insertion_point(field_set:WindowsCtrlInfo.window_opened_value)
}

// optional int32 result = 3;
inline bool WindowsCtrlInfo::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowsCtrlInfo::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowsCtrlInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowsCtrlInfo::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 WindowsCtrlInfo::result() const {
  // @@protoc_insertion_point(field_get:WindowsCtrlInfo.result)
  return result_;
}
inline void WindowsCtrlInfo::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:WindowsCtrlInfo.result)
}

// -------------------------------------------------------------------

// WindowsStateInfo

// optional .WindowPos window_pos = 1;
inline bool WindowsStateInfo::has_window_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowsStateInfo::set_has_window_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowsStateInfo::clear_has_window_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowsStateInfo::clear_window_pos() {
  window_pos_ = 1;
  clear_has_window_pos();
}
inline ::WindowPos WindowsStateInfo::window_pos() const {
  // @@protoc_insertion_point(field_get:WindowsStateInfo.window_pos)
  return static_cast< ::WindowPos >(window_pos_);
}
inline void WindowsStateInfo::set_window_pos(::WindowPos value) {
  assert(::WindowPos_IsValid(value));
  set_has_window_pos();
  window_pos_ = value;
  // @@protoc_insertion_point(field_set:WindowsStateInfo.window_pos)
}

// optional uint32 window_opened_value = 2;
inline bool WindowsStateInfo::has_window_opened_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowsStateInfo::set_has_window_opened_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowsStateInfo::clear_has_window_opened_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowsStateInfo::clear_window_opened_value() {
  window_opened_value_ = 0u;
  clear_has_window_opened_value();
}
inline ::google::protobuf::uint32 WindowsStateInfo::window_opened_value() const {
  // @@protoc_insertion_point(field_get:WindowsStateInfo.window_opened_value)
  return window_opened_value_;
}
inline void WindowsStateInfo::set_window_opened_value(::google::protobuf::uint32 value) {
  set_has_window_opened_value();
  window_opened_value_ = value;
  // @@protoc_insertion_point(field_set:WindowsStateInfo.window_opened_value)
}

// optional .WindowStatus window_status = 3;
inline bool WindowsStateInfo::has_window_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowsStateInfo::set_has_window_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowsStateInfo::clear_has_window_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowsStateInfo::clear_window_status() {
  window_status_ = 0;
  clear_has_window_status();
}
inline ::WindowStatus WindowsStateInfo::window_status() const {
  // @@protoc_insertion_point(field_get:WindowsStateInfo.window_status)
  return static_cast< ::WindowStatus >(window_status_);
}
inline void WindowsStateInfo::set_window_status(::WindowStatus value) {
  assert(::WindowStatus_IsValid(value));
  set_has_window_status();
  window_status_ = value;
  // @@protoc_insertion_point(field_set:WindowsStateInfo.window_status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::WindowPos> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WindowPos>() {
  return ::WindowPos_descriptor();
}
template <> struct is_proto_enum< ::WindowStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WindowStatus>() {
  return ::WindowStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ctrl_5fwindows_2eproto__INCLUDED
