// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_confirm_upload.proto

#ifndef PROTOBUF_device_5fconfirm_5fupload_2eproto__INCLUDED
#define PROTOBUF_device_5fconfirm_5fupload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "device_upload_common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_device_5fconfirm_5fupload_2eproto();
void protobuf_AssignDesc_device_5fconfirm_5fupload_2eproto();
void protobuf_ShutdownFile_device_5fconfirm_5fupload_2eproto();

class DeviceConfirmUploadMessage;

// ===================================================================

class DeviceConfirmUploadMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DeviceConfirmUploadMessage) */ {
 public:
  DeviceConfirmUploadMessage();
  virtual ~DeviceConfirmUploadMessage();

  DeviceConfirmUploadMessage(const DeviceConfirmUploadMessage& from);

  inline DeviceConfirmUploadMessage& operator=(const DeviceConfirmUploadMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceConfirmUploadMessage& default_instance();

  void Swap(DeviceConfirmUploadMessage* other);

  // implements Message ----------------------------------------------

  inline DeviceConfirmUploadMessage* New() const { return New(NULL); }

  DeviceConfirmUploadMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceConfirmUploadMessage& from);
  void MergeFrom(const DeviceConfirmUploadMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceConfirmUploadMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DeviceUploadCommonMessage device_upload_common = 1;
  bool has_device_upload_common() const;
  void clear_device_upload_common();
  static const int kDeviceUploadCommonFieldNumber = 1;
  const ::DeviceUploadCommonMessage& device_upload_common() const;
  ::DeviceUploadCommonMessage* mutable_device_upload_common();
  ::DeviceUploadCommonMessage* release_device_upload_common();
  void set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common);

  // optional uint32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // optional string url = 4;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 4;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:DeviceConfirmUploadMessage)
 private:
  inline void set_has_device_upload_common();
  inline void clear_has_device_upload_common();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DeviceUploadCommonMessage* device_upload_common_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_device_5fconfirm_5fupload_2eproto();
  friend void protobuf_AssignDesc_device_5fconfirm_5fupload_2eproto();
  friend void protobuf_ShutdownFile_device_5fconfirm_5fupload_2eproto();

  void InitAsDefaultInstance();
  static DeviceConfirmUploadMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceConfirmUploadMessage

// optional .DeviceUploadCommonMessage device_upload_common = 1;
inline bool DeviceConfirmUploadMessage::has_device_upload_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceConfirmUploadMessage::set_has_device_upload_common() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceConfirmUploadMessage::clear_has_device_upload_common() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceConfirmUploadMessage::clear_device_upload_common() {
  if (device_upload_common_ != NULL) device_upload_common_->::DeviceUploadCommonMessage::Clear();
  clear_has_device_upload_common();
}
inline const ::DeviceUploadCommonMessage& DeviceConfirmUploadMessage::device_upload_common() const {
  // @@protoc_insertion_point(field_get:DeviceConfirmUploadMessage.device_upload_common)
  return device_upload_common_ != NULL ? *device_upload_common_ : *default_instance_->device_upload_common_;
}
inline ::DeviceUploadCommonMessage* DeviceConfirmUploadMessage::mutable_device_upload_common() {
  set_has_device_upload_common();
  if (device_upload_common_ == NULL) {
    device_upload_common_ = new ::DeviceUploadCommonMessage;
  }
  // @@protoc_insertion_point(field_mutable:DeviceConfirmUploadMessage.device_upload_common)
  return device_upload_common_;
}
inline ::DeviceUploadCommonMessage* DeviceConfirmUploadMessage::release_device_upload_common() {
  // @@protoc_insertion_point(field_release:DeviceConfirmUploadMessage.device_upload_common)
  clear_has_device_upload_common();
  ::DeviceUploadCommonMessage* temp = device_upload_common_;
  device_upload_common_ = NULL;
  return temp;
}
inline void DeviceConfirmUploadMessage::set_allocated_device_upload_common(::DeviceUploadCommonMessage* device_upload_common) {
  delete device_upload_common_;
  device_upload_common_ = device_upload_common;
  if (device_upload_common) {
    set_has_device_upload_common();
  } else {
    clear_has_device_upload_common();
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceConfirmUploadMessage.device_upload_common)
}

// optional uint32 code = 2;
inline bool DeviceConfirmUploadMessage::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceConfirmUploadMessage::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceConfirmUploadMessage::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceConfirmUploadMessage::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 DeviceConfirmUploadMessage::code() const {
  // @@protoc_insertion_point(field_get:DeviceConfirmUploadMessage.code)
  return code_;
}
inline void DeviceConfirmUploadMessage::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:DeviceConfirmUploadMessage.code)
}

// optional string url = 4;
inline bool DeviceConfirmUploadMessage::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceConfirmUploadMessage::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceConfirmUploadMessage::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceConfirmUploadMessage::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
inline const ::std::string& DeviceConfirmUploadMessage::url() const {
  // @@protoc_insertion_point(field_get:DeviceConfirmUploadMessage.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConfirmUploadMessage::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceConfirmUploadMessage.url)
}
inline void DeviceConfirmUploadMessage::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceConfirmUploadMessage.url)
}
inline void DeviceConfirmUploadMessage::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceConfirmUploadMessage.url)
}
inline ::std::string* DeviceConfirmUploadMessage::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:DeviceConfirmUploadMessage.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceConfirmUploadMessage::release_url() {
  // @@protoc_insertion_point(field_release:DeviceConfirmUploadMessage.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceConfirmUploadMessage::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:DeviceConfirmUploadMessage.url)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_5fconfirm_5fupload_2eproto__INCLUDED
