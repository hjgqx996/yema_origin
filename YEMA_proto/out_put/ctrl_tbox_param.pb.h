// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ctrl_tbox_param.proto

#ifndef PROTOBUF_ctrl_5ftbox_5fparam_2eproto__INCLUDED
#define PROTOBUF_ctrl_5ftbox_5fparam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
void protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto();
void protobuf_ShutdownFile_ctrl_5ftbox_5fparam_2eproto();

class ConfigInfo;
class CtrlTboxParamMessage;
class StateInfo;
class VersionInfo;

enum ModeType {
  NORMAL = 0,
  CAN_FILE_MODE = 1,
  TBOX_FILE_MODE = 2,
  SAMPLING_MODE = 3
};
bool ModeType_IsValid(int value);
const ModeType ModeType_MIN = NORMAL;
const ModeType ModeType_MAX = SAMPLING_MODE;
const int ModeType_ARRAYSIZE = ModeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModeType_descriptor();
inline const ::std::string& ModeType_Name(ModeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModeType_descriptor(), value);
}
inline bool ModeType_Parse(
    const ::std::string& name, ModeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModeType>(
    ModeType_descriptor(), name, value);
}
enum LogLevel {
  LOG_ERROR = 0,
  LOG_WARNING = 1,
  LOG_INFO = 2,
  LOG_DEBUG = 3
};
bool LogLevel_IsValid(int value);
const LogLevel LogLevel_MIN = LOG_ERROR;
const LogLevel LogLevel_MAX = LOG_DEBUG;
const int LogLevel_ARRAYSIZE = LogLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogLevel_descriptor();
inline const ::std::string& LogLevel_Name(LogLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogLevel_descriptor(), value);
}
inline bool LogLevel_Parse(
    const ::std::string& name, LogLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogLevel>(
    LogLevel_descriptor(), name, value);
}
// ===================================================================

class CtrlTboxParamMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CtrlTboxParamMessage) */ {
 public:
  CtrlTboxParamMessage();
  virtual ~CtrlTboxParamMessage();

  CtrlTboxParamMessage(const CtrlTboxParamMessage& from);

  inline CtrlTboxParamMessage& operator=(const CtrlTboxParamMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlTboxParamMessage& default_instance();

  void Swap(CtrlTboxParamMessage* other);

  // implements Message ----------------------------------------------

  inline CtrlTboxParamMessage* New() const { return New(NULL); }

  CtrlTboxParamMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CtrlTboxParamMessage& from);
  void MergeFrom(const CtrlTboxParamMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CtrlTboxParamMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ConfigInfo config_info = 1;
  bool has_config_info() const;
  void clear_config_info();
  static const int kConfigInfoFieldNumber = 1;
  const ::ConfigInfo& config_info() const;
  ::ConfigInfo* mutable_config_info();
  ::ConfigInfo* release_config_info();
  void set_allocated_config_info(::ConfigInfo* config_info);

  // optional .VersionInfo version_info = 2;
  bool has_version_info() const;
  void clear_version_info();
  static const int kVersionInfoFieldNumber = 2;
  const ::VersionInfo& version_info() const;
  ::VersionInfo* mutable_version_info();
  ::VersionInfo* release_version_info();
  void set_allocated_version_info(::VersionInfo* version_info);

  // optional .StateInfo state_info = 3;
  bool has_state_info() const;
  void clear_state_info();
  static const int kStateInfoFieldNumber = 3;
  const ::StateInfo& state_info() const;
  ::StateInfo* mutable_state_info();
  ::StateInfo* release_state_info();
  void set_allocated_state_info(::StateInfo* state_info);

  // @@protoc_insertion_point(class_scope:CtrlTboxParamMessage)
 private:
  inline void set_has_config_info();
  inline void clear_has_config_info();
  inline void set_has_version_info();
  inline void clear_has_version_info();
  inline void set_has_state_info();
  inline void clear_has_state_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ConfigInfo* config_info_;
  ::VersionInfo* version_info_;
  ::StateInfo* state_info_;
  friend void  protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5ftbox_5fparam_2eproto();

  void InitAsDefaultInstance();
  static CtrlTboxParamMessage* default_instance_;
};
// -------------------------------------------------------------------

class ConfigInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConfigInfo) */ {
 public:
  ConfigInfo();
  virtual ~ConfigInfo();

  ConfigInfo(const ConfigInfo& from);

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigInfo& default_instance();

  void Swap(ConfigInfo* other);

  // implements Message ----------------------------------------------

  inline ConfigInfo* New() const { return New(NULL); }

  ConfigInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigInfo& from);
  void MergeFrom(const ConfigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 local_cycle = 1;
  bool has_local_cycle() const;
  void clear_local_cycle();
  static const int kLocalCycleFieldNumber = 1;
  ::google::protobuf::uint32 local_cycle() const;
  void set_local_cycle(::google::protobuf::uint32 value);

  // optional uint32 report_cycle = 2;
  bool has_report_cycle() const;
  void clear_report_cycle();
  static const int kReportCycleFieldNumber = 2;
  ::google::protobuf::uint32 report_cycle() const;
  void set_report_cycle(::google::protobuf::uint32 value);

  // optional uint32 alarm_cycle = 3;
  bool has_alarm_cycle() const;
  void clear_alarm_cycle();
  static const int kAlarmCycleFieldNumber = 3;
  ::google::protobuf::uint32 alarm_cycle() const;
  void set_alarm_cycle(::google::protobuf::uint32 value);

  // optional string enterprise_platform_url = 4;
  bool has_enterprise_platform_url() const;
  void clear_enterprise_platform_url();
  static const int kEnterprisePlatformUrlFieldNumber = 4;
  const ::std::string& enterprise_platform_url() const;
  void set_enterprise_platform_url(const ::std::string& value);
  void set_enterprise_platform_url(const char* value);
  void set_enterprise_platform_url(const char* value, size_t size);
  ::std::string* mutable_enterprise_platform_url();
  ::std::string* release_enterprise_platform_url();
  void set_allocated_enterprise_platform_url(::std::string* enterprise_platform_url);

  // optional uint32 enterprise_platform_port = 5;
  bool has_enterprise_platform_port() const;
  void clear_enterprise_platform_port();
  static const int kEnterprisePlatformPortFieldNumber = 5;
  ::google::protobuf::uint32 enterprise_platform_port() const;
  void set_enterprise_platform_port(::google::protobuf::uint32 value);

  // optional string public_platform_url = 6;
  bool has_public_platform_url() const;
  void clear_public_platform_url();
  static const int kPublicPlatformUrlFieldNumber = 6;
  const ::std::string& public_platform_url() const;
  void set_public_platform_url(const ::std::string& value);
  void set_public_platform_url(const char* value);
  void set_public_platform_url(const char* value, size_t size);
  ::std::string* mutable_public_platform_url();
  ::std::string* release_public_platform_url();
  void set_allocated_public_platform_url(::std::string* public_platform_url);

  // optional uint32 public_platform_port = 7;
  bool has_public_platform_port() const;
  void clear_public_platform_port();
  static const int kPublicPlatformPortFieldNumber = 7;
  ::google::protobuf::uint32 public_platform_port() const;
  void set_public_platform_port(::google::protobuf::uint32 value);

  // optional uint32 tbox_timeout = 8;
  bool has_tbox_timeout() const;
  void clear_tbox_timeout();
  static const int kTboxTimeoutFieldNumber = 8;
  ::google::protobuf::uint32 tbox_timeout() const;
  void set_tbox_timeout(::google::protobuf::uint32 value);

  // optional uint32 platform_timeout = 9;
  bool has_platform_timeout() const;
  void clear_platform_timeout();
  static const int kPlatformTimeoutFieldNumber = 9;
  ::google::protobuf::uint32 platform_timeout() const;
  void set_platform_timeout(::google::protobuf::uint32 value);

  // optional uint32 interval = 10;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 10;
  ::google::protobuf::uint32 interval() const;
  void set_interval(::google::protobuf::uint32 value);

  // optional uint32 heartbeat_cycle = 11;
  bool has_heartbeat_cycle() const;
  void clear_heartbeat_cycle();
  static const int kHeartbeatCycleFieldNumber = 11;
  ::google::protobuf::uint32 heartbeat_cycle() const;
  void set_heartbeat_cycle(::google::protobuf::uint32 value);

  // optional .ModeType mode_type = 12;
  bool has_mode_type() const;
  void clear_mode_type();
  static const int kModeTypeFieldNumber = 12;
  ::ModeType mode_type() const;
  void set_mode_type(::ModeType value);

  // optional fixed64 mode_begin_time = 13;
  bool has_mode_begin_time() const;
  void clear_mode_begin_time();
  static const int kModeBeginTimeFieldNumber = 13;
  ::google::protobuf::uint64 mode_begin_time() const;
  void set_mode_begin_time(::google::protobuf::uint64 value);

  // optional uint32 mode_time_quantum = 14;
  bool has_mode_time_quantum() const;
  void clear_mode_time_quantum();
  static const int kModeTimeQuantumFieldNumber = 14;
  ::google::protobuf::uint32 mode_time_quantum() const;
  void set_mode_time_quantum(::google::protobuf::uint32 value);

  // optional .LogLevel log_level = 15;
  bool has_log_level() const;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 15;
  ::LogLevel log_level() const;
  void set_log_level(::LogLevel value);

  // optional string offline_config_param = 16;
  bool has_offline_config_param() const;
  void clear_offline_config_param();
  static const int kOfflineConfigParamFieldNumber = 16;
  const ::std::string& offline_config_param() const;
  void set_offline_config_param(const ::std::string& value);
  void set_offline_config_param(const char* value);
  void set_offline_config_param(const char* value, size_t size);
  ::std::string* mutable_offline_config_param();
  ::std::string* release_offline_config_param();
  void set_allocated_offline_config_param(::std::string* offline_config_param);

  // optional string peps_security_auth_key = 17;
  bool has_peps_security_auth_key() const;
  void clear_peps_security_auth_key();
  static const int kPepsSecurityAuthKeyFieldNumber = 17;
  const ::std::string& peps_security_auth_key() const;
  void set_peps_security_auth_key(const ::std::string& value);
  void set_peps_security_auth_key(const char* value);
  void set_peps_security_auth_key(const char* value, size_t size);
  ::std::string* mutable_peps_security_auth_key();
  ::std::string* release_peps_security_auth_key();
  void set_allocated_peps_security_auth_key(::std::string* peps_security_auth_key);

  // optional uint32 tbox_usb_net_switch = 18;
  bool has_tbox_usb_net_switch() const;
  void clear_tbox_usb_net_switch();
  static const int kTboxUsbNetSwitchFieldNumber = 18;
  ::google::protobuf::uint32 tbox_usb_net_switch() const;
  void set_tbox_usb_net_switch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigInfo)
 private:
  inline void set_has_local_cycle();
  inline void clear_has_local_cycle();
  inline void set_has_report_cycle();
  inline void clear_has_report_cycle();
  inline void set_has_alarm_cycle();
  inline void clear_has_alarm_cycle();
  inline void set_has_enterprise_platform_url();
  inline void clear_has_enterprise_platform_url();
  inline void set_has_enterprise_platform_port();
  inline void clear_has_enterprise_platform_port();
  inline void set_has_public_platform_url();
  inline void clear_has_public_platform_url();
  inline void set_has_public_platform_port();
  inline void clear_has_public_platform_port();
  inline void set_has_tbox_timeout();
  inline void clear_has_tbox_timeout();
  inline void set_has_platform_timeout();
  inline void clear_has_platform_timeout();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_heartbeat_cycle();
  inline void clear_has_heartbeat_cycle();
  inline void set_has_mode_type();
  inline void clear_has_mode_type();
  inline void set_has_mode_begin_time();
  inline void clear_has_mode_begin_time();
  inline void set_has_mode_time_quantum();
  inline void clear_has_mode_time_quantum();
  inline void set_has_log_level();
  inline void clear_has_log_level();
  inline void set_has_offline_config_param();
  inline void clear_has_offline_config_param();
  inline void set_has_peps_security_auth_key();
  inline void clear_has_peps_security_auth_key();
  inline void set_has_tbox_usb_net_switch();
  inline void clear_has_tbox_usb_net_switch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_cycle_;
  ::google::protobuf::uint32 report_cycle_;
  ::google::protobuf::internal::ArenaStringPtr enterprise_platform_url_;
  ::google::protobuf::uint32 alarm_cycle_;
  ::google::protobuf::uint32 enterprise_platform_port_;
  ::google::protobuf::internal::ArenaStringPtr public_platform_url_;
  ::google::protobuf::uint32 public_platform_port_;
  ::google::protobuf::uint32 tbox_timeout_;
  ::google::protobuf::uint32 platform_timeout_;
  ::google::protobuf::uint32 interval_;
  ::google::protobuf::uint32 heartbeat_cycle_;
  int mode_type_;
  ::google::protobuf::uint64 mode_begin_time_;
  ::google::protobuf::uint32 mode_time_quantum_;
  int log_level_;
  ::google::protobuf::internal::ArenaStringPtr offline_config_param_;
  ::google::protobuf::internal::ArenaStringPtr peps_security_auth_key_;
  ::google::protobuf::uint32 tbox_usb_net_switch_;
  friend void  protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5ftbox_5fparam_2eproto();

  void InitAsDefaultInstance();
  static ConfigInfo* default_instance_;
};
// -------------------------------------------------------------------

class VersionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VersionInfo) */ {
 public:
  VersionInfo();
  virtual ~VersionInfo();

  VersionInfo(const VersionInfo& from);

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionInfo& default_instance();

  void Swap(VersionInfo* other);

  // implements Message ----------------------------------------------

  inline VersionInfo* New() const { return New(NULL); }

  VersionInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VersionInfo& from);
  void MergeFrom(const VersionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VersionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string upper_ware_version = 1;
  bool has_upper_ware_version() const;
  void clear_upper_ware_version();
  static const int kUpperWareVersionFieldNumber = 1;
  const ::std::string& upper_ware_version() const;
  void set_upper_ware_version(const ::std::string& value);
  void set_upper_ware_version(const char* value);
  void set_upper_ware_version(const char* value, size_t size);
  ::std::string* mutable_upper_ware_version();
  ::std::string* release_upper_ware_version();
  void set_allocated_upper_ware_version(::std::string* upper_ware_version);

  // optional string lower_ware_version = 2;
  bool has_lower_ware_version() const;
  void clear_lower_ware_version();
  static const int kLowerWareVersionFieldNumber = 2;
  const ::std::string& lower_ware_version() const;
  void set_lower_ware_version(const ::std::string& value);
  void set_lower_ware_version(const char* value);
  void set_lower_ware_version(const char* value, size_t size);
  ::std::string* mutable_lower_ware_version();
  ::std::string* release_lower_ware_version();
  void set_allocated_lower_ware_version(::std::string* lower_ware_version);

  // optional string upper_firmware_version = 3;
  bool has_upper_firmware_version() const;
  void clear_upper_firmware_version();
  static const int kUpperFirmwareVersionFieldNumber = 3;
  const ::std::string& upper_firmware_version() const;
  void set_upper_firmware_version(const ::std::string& value);
  void set_upper_firmware_version(const char* value);
  void set_upper_firmware_version(const char* value, size_t size);
  ::std::string* mutable_upper_firmware_version();
  ::std::string* release_upper_firmware_version();
  void set_allocated_upper_firmware_version(::std::string* upper_firmware_version);

  // @@protoc_insertion_point(class_scope:VersionInfo)
 private:
  inline void set_has_upper_ware_version();
  inline void clear_has_upper_ware_version();
  inline void set_has_lower_ware_version();
  inline void clear_has_lower_ware_version();
  inline void set_has_upper_firmware_version();
  inline void clear_has_upper_firmware_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr upper_ware_version_;
  ::google::protobuf::internal::ArenaStringPtr lower_ware_version_;
  ::google::protobuf::internal::ArenaStringPtr upper_firmware_version_;
  friend void  protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5ftbox_5fparam_2eproto();

  void InitAsDefaultInstance();
  static VersionInfo* default_instance_;
};
// -------------------------------------------------------------------

class StateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StateInfo) */ {
 public:
  StateInfo();
  virtual ~StateInfo();

  StateInfo(const StateInfo& from);

  inline StateInfo& operator=(const StateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateInfo& default_instance();

  void Swap(StateInfo* other);

  // implements Message ----------------------------------------------

  inline StateInfo* New() const { return New(NULL); }

  StateInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateInfo& from);
  void MergeFrom(const StateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool sampling = 1;
  bool has_sampling() const;
  void clear_sampling();
  static const int kSamplingFieldNumber = 1;
  bool sampling() const;
  void set_sampling(bool value);

  // @@protoc_insertion_point(class_scope:StateInfo)
 private:
  inline void set_has_sampling();
  inline void clear_has_sampling();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool sampling_;
  friend void  protobuf_AddDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_AssignDesc_ctrl_5ftbox_5fparam_2eproto();
  friend void protobuf_ShutdownFile_ctrl_5ftbox_5fparam_2eproto();

  void InitAsDefaultInstance();
  static StateInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlTboxParamMessage

// optional .ConfigInfo config_info = 1;
inline bool CtrlTboxParamMessage::has_config_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CtrlTboxParamMessage::set_has_config_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CtrlTboxParamMessage::clear_has_config_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CtrlTboxParamMessage::clear_config_info() {
  if (config_info_ != NULL) config_info_->::ConfigInfo::Clear();
  clear_has_config_info();
}
inline const ::ConfigInfo& CtrlTboxParamMessage::config_info() const {
  // @@protoc_insertion_point(field_get:CtrlTboxParamMessage.config_info)
  return config_info_ != NULL ? *config_info_ : *default_instance_->config_info_;
}
inline ::ConfigInfo* CtrlTboxParamMessage::mutable_config_info() {
  set_has_config_info();
  if (config_info_ == NULL) {
    config_info_ = new ::ConfigInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTboxParamMessage.config_info)
  return config_info_;
}
inline ::ConfigInfo* CtrlTboxParamMessage::release_config_info() {
  // @@protoc_insertion_point(field_release:CtrlTboxParamMessage.config_info)
  clear_has_config_info();
  ::ConfigInfo* temp = config_info_;
  config_info_ = NULL;
  return temp;
}
inline void CtrlTboxParamMessage::set_allocated_config_info(::ConfigInfo* config_info) {
  delete config_info_;
  config_info_ = config_info;
  if (config_info) {
    set_has_config_info();
  } else {
    clear_has_config_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTboxParamMessage.config_info)
}

// optional .VersionInfo version_info = 2;
inline bool CtrlTboxParamMessage::has_version_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CtrlTboxParamMessage::set_has_version_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CtrlTboxParamMessage::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CtrlTboxParamMessage::clear_version_info() {
  if (version_info_ != NULL) version_info_->::VersionInfo::Clear();
  clear_has_version_info();
}
inline const ::VersionInfo& CtrlTboxParamMessage::version_info() const {
  // @@protoc_insertion_point(field_get:CtrlTboxParamMessage.version_info)
  return version_info_ != NULL ? *version_info_ : *default_instance_->version_info_;
}
inline ::VersionInfo* CtrlTboxParamMessage::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) {
    version_info_ = new ::VersionInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTboxParamMessage.version_info)
  return version_info_;
}
inline ::VersionInfo* CtrlTboxParamMessage::release_version_info() {
  // @@protoc_insertion_point(field_release:CtrlTboxParamMessage.version_info)
  clear_has_version_info();
  ::VersionInfo* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
inline void CtrlTboxParamMessage::set_allocated_version_info(::VersionInfo* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTboxParamMessage.version_info)
}

// optional .StateInfo state_info = 3;
inline bool CtrlTboxParamMessage::has_state_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CtrlTboxParamMessage::set_has_state_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CtrlTboxParamMessage::clear_has_state_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CtrlTboxParamMessage::clear_state_info() {
  if (state_info_ != NULL) state_info_->::StateInfo::Clear();
  clear_has_state_info();
}
inline const ::StateInfo& CtrlTboxParamMessage::state_info() const {
  // @@protoc_insertion_point(field_get:CtrlTboxParamMessage.state_info)
  return state_info_ != NULL ? *state_info_ : *default_instance_->state_info_;
}
inline ::StateInfo* CtrlTboxParamMessage::mutable_state_info() {
  set_has_state_info();
  if (state_info_ == NULL) {
    state_info_ = new ::StateInfo;
  }
  // @@protoc_insertion_point(field_mutable:CtrlTboxParamMessage.state_info)
  return state_info_;
}
inline ::StateInfo* CtrlTboxParamMessage::release_state_info() {
  // @@protoc_insertion_point(field_release:CtrlTboxParamMessage.state_info)
  clear_has_state_info();
  ::StateInfo* temp = state_info_;
  state_info_ = NULL;
  return temp;
}
inline void CtrlTboxParamMessage::set_allocated_state_info(::StateInfo* state_info) {
  delete state_info_;
  state_info_ = state_info;
  if (state_info) {
    set_has_state_info();
  } else {
    clear_has_state_info();
  }
  // @@protoc_insertion_point(field_set_allocated:CtrlTboxParamMessage.state_info)
}

// -------------------------------------------------------------------

// ConfigInfo

// optional uint32 local_cycle = 1;
inline bool ConfigInfo::has_local_cycle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigInfo::set_has_local_cycle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigInfo::clear_has_local_cycle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigInfo::clear_local_cycle() {
  local_cycle_ = 0u;
  clear_has_local_cycle();
}
inline ::google::protobuf::uint32 ConfigInfo::local_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.local_cycle)
  return local_cycle_;
}
inline void ConfigInfo::set_local_cycle(::google::protobuf::uint32 value) {
  set_has_local_cycle();
  local_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.local_cycle)
}

// optional uint32 report_cycle = 2;
inline bool ConfigInfo::has_report_cycle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigInfo::set_has_report_cycle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigInfo::clear_has_report_cycle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigInfo::clear_report_cycle() {
  report_cycle_ = 0u;
  clear_has_report_cycle();
}
inline ::google::protobuf::uint32 ConfigInfo::report_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.report_cycle)
  return report_cycle_;
}
inline void ConfigInfo::set_report_cycle(::google::protobuf::uint32 value) {
  set_has_report_cycle();
  report_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.report_cycle)
}

// optional uint32 alarm_cycle = 3;
inline bool ConfigInfo::has_alarm_cycle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigInfo::set_has_alarm_cycle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigInfo::clear_has_alarm_cycle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigInfo::clear_alarm_cycle() {
  alarm_cycle_ = 0u;
  clear_has_alarm_cycle();
}
inline ::google::protobuf::uint32 ConfigInfo::alarm_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.alarm_cycle)
  return alarm_cycle_;
}
inline void ConfigInfo::set_alarm_cycle(::google::protobuf::uint32 value) {
  set_has_alarm_cycle();
  alarm_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.alarm_cycle)
}

// optional string enterprise_platform_url = 4;
inline bool ConfigInfo::has_enterprise_platform_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfigInfo::set_has_enterprise_platform_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConfigInfo::clear_has_enterprise_platform_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConfigInfo::clear_enterprise_platform_url() {
  enterprise_platform_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enterprise_platform_url();
}
inline const ::std::string& ConfigInfo::enterprise_platform_url() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.enterprise_platform_url)
  return enterprise_platform_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_enterprise_platform_url(const ::std::string& value) {
  set_has_enterprise_platform_url();
  enterprise_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.enterprise_platform_url)
}
inline void ConfigInfo::set_enterprise_platform_url(const char* value) {
  set_has_enterprise_platform_url();
  enterprise_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.enterprise_platform_url)
}
inline void ConfigInfo::set_enterprise_platform_url(const char* value, size_t size) {
  set_has_enterprise_platform_url();
  enterprise_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.enterprise_platform_url)
}
inline ::std::string* ConfigInfo::mutable_enterprise_platform_url() {
  set_has_enterprise_platform_url();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.enterprise_platform_url)
  return enterprise_platform_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_enterprise_platform_url() {
  // @@protoc_insertion_point(field_release:ConfigInfo.enterprise_platform_url)
  clear_has_enterprise_platform_url();
  return enterprise_platform_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_enterprise_platform_url(::std::string* enterprise_platform_url) {
  if (enterprise_platform_url != NULL) {
    set_has_enterprise_platform_url();
  } else {
    clear_has_enterprise_platform_url();
  }
  enterprise_platform_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enterprise_platform_url);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.enterprise_platform_url)
}

// optional uint32 enterprise_platform_port = 5;
inline bool ConfigInfo::has_enterprise_platform_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConfigInfo::set_has_enterprise_platform_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConfigInfo::clear_has_enterprise_platform_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConfigInfo::clear_enterprise_platform_port() {
  enterprise_platform_port_ = 0u;
  clear_has_enterprise_platform_port();
}
inline ::google::protobuf::uint32 ConfigInfo::enterprise_platform_port() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.enterprise_platform_port)
  return enterprise_platform_port_;
}
inline void ConfigInfo::set_enterprise_platform_port(::google::protobuf::uint32 value) {
  set_has_enterprise_platform_port();
  enterprise_platform_port_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.enterprise_platform_port)
}

// optional string public_platform_url = 6;
inline bool ConfigInfo::has_public_platform_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConfigInfo::set_has_public_platform_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConfigInfo::clear_has_public_platform_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConfigInfo::clear_public_platform_url() {
  public_platform_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_platform_url();
}
inline const ::std::string& ConfigInfo::public_platform_url() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.public_platform_url)
  return public_platform_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_public_platform_url(const ::std::string& value) {
  set_has_public_platform_url();
  public_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.public_platform_url)
}
inline void ConfigInfo::set_public_platform_url(const char* value) {
  set_has_public_platform_url();
  public_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.public_platform_url)
}
inline void ConfigInfo::set_public_platform_url(const char* value, size_t size) {
  set_has_public_platform_url();
  public_platform_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.public_platform_url)
}
inline ::std::string* ConfigInfo::mutable_public_platform_url() {
  set_has_public_platform_url();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.public_platform_url)
  return public_platform_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_public_platform_url() {
  // @@protoc_insertion_point(field_release:ConfigInfo.public_platform_url)
  clear_has_public_platform_url();
  return public_platform_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_public_platform_url(::std::string* public_platform_url) {
  if (public_platform_url != NULL) {
    set_has_public_platform_url();
  } else {
    clear_has_public_platform_url();
  }
  public_platform_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_platform_url);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.public_platform_url)
}

// optional uint32 public_platform_port = 7;
inline bool ConfigInfo::has_public_platform_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConfigInfo::set_has_public_platform_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConfigInfo::clear_has_public_platform_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConfigInfo::clear_public_platform_port() {
  public_platform_port_ = 0u;
  clear_has_public_platform_port();
}
inline ::google::protobuf::uint32 ConfigInfo::public_platform_port() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.public_platform_port)
  return public_platform_port_;
}
inline void ConfigInfo::set_public_platform_port(::google::protobuf::uint32 value) {
  set_has_public_platform_port();
  public_platform_port_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.public_platform_port)
}

// optional uint32 tbox_timeout = 8;
inline bool ConfigInfo::has_tbox_timeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConfigInfo::set_has_tbox_timeout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConfigInfo::clear_has_tbox_timeout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConfigInfo::clear_tbox_timeout() {
  tbox_timeout_ = 0u;
  clear_has_tbox_timeout();
}
inline ::google::protobuf::uint32 ConfigInfo::tbox_timeout() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.tbox_timeout)
  return tbox_timeout_;
}
inline void ConfigInfo::set_tbox_timeout(::google::protobuf::uint32 value) {
  set_has_tbox_timeout();
  tbox_timeout_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.tbox_timeout)
}

// optional uint32 platform_timeout = 9;
inline bool ConfigInfo::has_platform_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConfigInfo::set_has_platform_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConfigInfo::clear_has_platform_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConfigInfo::clear_platform_timeout() {
  platform_timeout_ = 0u;
  clear_has_platform_timeout();
}
inline ::google::protobuf::uint32 ConfigInfo::platform_timeout() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.platform_timeout)
  return platform_timeout_;
}
inline void ConfigInfo::set_platform_timeout(::google::protobuf::uint32 value) {
  set_has_platform_timeout();
  platform_timeout_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.platform_timeout)
}

// optional uint32 interval = 10;
inline bool ConfigInfo::has_interval() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConfigInfo::set_has_interval() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConfigInfo::clear_has_interval() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConfigInfo::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 ConfigInfo::interval() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.interval)
  return interval_;
}
inline void ConfigInfo::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.interval)
}

// optional uint32 heartbeat_cycle = 11;
inline bool ConfigInfo::has_heartbeat_cycle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConfigInfo::set_has_heartbeat_cycle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConfigInfo::clear_has_heartbeat_cycle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConfigInfo::clear_heartbeat_cycle() {
  heartbeat_cycle_ = 0u;
  clear_has_heartbeat_cycle();
}
inline ::google::protobuf::uint32 ConfigInfo::heartbeat_cycle() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.heartbeat_cycle)
  return heartbeat_cycle_;
}
inline void ConfigInfo::set_heartbeat_cycle(::google::protobuf::uint32 value) {
  set_has_heartbeat_cycle();
  heartbeat_cycle_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.heartbeat_cycle)
}

// optional .ModeType mode_type = 12;
inline bool ConfigInfo::has_mode_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConfigInfo::set_has_mode_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConfigInfo::clear_has_mode_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConfigInfo::clear_mode_type() {
  mode_type_ = 0;
  clear_has_mode_type();
}
inline ::ModeType ConfigInfo::mode_type() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.mode_type)
  return static_cast< ::ModeType >(mode_type_);
}
inline void ConfigInfo::set_mode_type(::ModeType value) {
  assert(::ModeType_IsValid(value));
  set_has_mode_type();
  mode_type_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.mode_type)
}

// optional fixed64 mode_begin_time = 13;
inline bool ConfigInfo::has_mode_begin_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConfigInfo::set_has_mode_begin_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConfigInfo::clear_has_mode_begin_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConfigInfo::clear_mode_begin_time() {
  mode_begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_mode_begin_time();
}
inline ::google::protobuf::uint64 ConfigInfo::mode_begin_time() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.mode_begin_time)
  return mode_begin_time_;
}
inline void ConfigInfo::set_mode_begin_time(::google::protobuf::uint64 value) {
  set_has_mode_begin_time();
  mode_begin_time_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.mode_begin_time)
}

// optional uint32 mode_time_quantum = 14;
inline bool ConfigInfo::has_mode_time_quantum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConfigInfo::set_has_mode_time_quantum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConfigInfo::clear_has_mode_time_quantum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConfigInfo::clear_mode_time_quantum() {
  mode_time_quantum_ = 0u;
  clear_has_mode_time_quantum();
}
inline ::google::protobuf::uint32 ConfigInfo::mode_time_quantum() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.mode_time_quantum)
  return mode_time_quantum_;
}
inline void ConfigInfo::set_mode_time_quantum(::google::protobuf::uint32 value) {
  set_has_mode_time_quantum();
  mode_time_quantum_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.mode_time_quantum)
}

// optional .LogLevel log_level = 15;
inline bool ConfigInfo::has_log_level() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConfigInfo::set_has_log_level() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConfigInfo::clear_has_log_level() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConfigInfo::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
inline ::LogLevel ConfigInfo::log_level() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.log_level)
  return static_cast< ::LogLevel >(log_level_);
}
inline void ConfigInfo::set_log_level(::LogLevel value) {
  assert(::LogLevel_IsValid(value));
  set_has_log_level();
  log_level_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.log_level)
}

// optional string offline_config_param = 16;
inline bool ConfigInfo::has_offline_config_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConfigInfo::set_has_offline_config_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConfigInfo::clear_has_offline_config_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConfigInfo::clear_offline_config_param() {
  offline_config_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_offline_config_param();
}
inline const ::std::string& ConfigInfo::offline_config_param() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.offline_config_param)
  return offline_config_param_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_offline_config_param(const ::std::string& value) {
  set_has_offline_config_param();
  offline_config_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.offline_config_param)
}
inline void ConfigInfo::set_offline_config_param(const char* value) {
  set_has_offline_config_param();
  offline_config_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.offline_config_param)
}
inline void ConfigInfo::set_offline_config_param(const char* value, size_t size) {
  set_has_offline_config_param();
  offline_config_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.offline_config_param)
}
inline ::std::string* ConfigInfo::mutable_offline_config_param() {
  set_has_offline_config_param();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.offline_config_param)
  return offline_config_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_offline_config_param() {
  // @@protoc_insertion_point(field_release:ConfigInfo.offline_config_param)
  clear_has_offline_config_param();
  return offline_config_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_offline_config_param(::std::string* offline_config_param) {
  if (offline_config_param != NULL) {
    set_has_offline_config_param();
  } else {
    clear_has_offline_config_param();
  }
  offline_config_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offline_config_param);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.offline_config_param)
}

// optional string peps_security_auth_key = 17;
inline bool ConfigInfo::has_peps_security_auth_key() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConfigInfo::set_has_peps_security_auth_key() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConfigInfo::clear_has_peps_security_auth_key() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConfigInfo::clear_peps_security_auth_key() {
  peps_security_auth_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peps_security_auth_key();
}
inline const ::std::string& ConfigInfo::peps_security_auth_key() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.peps_security_auth_key)
  return peps_security_auth_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_peps_security_auth_key(const ::std::string& value) {
  set_has_peps_security_auth_key();
  peps_security_auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigInfo.peps_security_auth_key)
}
inline void ConfigInfo::set_peps_security_auth_key(const char* value) {
  set_has_peps_security_auth_key();
  peps_security_auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigInfo.peps_security_auth_key)
}
inline void ConfigInfo::set_peps_security_auth_key(const char* value, size_t size) {
  set_has_peps_security_auth_key();
  peps_security_auth_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigInfo.peps_security_auth_key)
}
inline ::std::string* ConfigInfo::mutable_peps_security_auth_key() {
  set_has_peps_security_auth_key();
  // @@protoc_insertion_point(field_mutable:ConfigInfo.peps_security_auth_key)
  return peps_security_auth_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_peps_security_auth_key() {
  // @@protoc_insertion_point(field_release:ConfigInfo.peps_security_auth_key)
  clear_has_peps_security_auth_key();
  return peps_security_auth_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_peps_security_auth_key(::std::string* peps_security_auth_key) {
  if (peps_security_auth_key != NULL) {
    set_has_peps_security_auth_key();
  } else {
    clear_has_peps_security_auth_key();
  }
  peps_security_auth_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peps_security_auth_key);
  // @@protoc_insertion_point(field_set_allocated:ConfigInfo.peps_security_auth_key)
}

// optional uint32 tbox_usb_net_switch = 18;
inline bool ConfigInfo::has_tbox_usb_net_switch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConfigInfo::set_has_tbox_usb_net_switch() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConfigInfo::clear_has_tbox_usb_net_switch() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConfigInfo::clear_tbox_usb_net_switch() {
  tbox_usb_net_switch_ = 0u;
  clear_has_tbox_usb_net_switch();
}
inline ::google::protobuf::uint32 ConfigInfo::tbox_usb_net_switch() const {
  // @@protoc_insertion_point(field_get:ConfigInfo.tbox_usb_net_switch)
  return tbox_usb_net_switch_;
}
inline void ConfigInfo::set_tbox_usb_net_switch(::google::protobuf::uint32 value) {
  set_has_tbox_usb_net_switch();
  tbox_usb_net_switch_ = value;
  // @@protoc_insertion_point(field_set:ConfigInfo.tbox_usb_net_switch)
}

// -------------------------------------------------------------------

// VersionInfo

// optional string upper_ware_version = 1;
inline bool VersionInfo::has_upper_ware_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionInfo::set_has_upper_ware_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionInfo::clear_has_upper_ware_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionInfo::clear_upper_ware_version() {
  upper_ware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upper_ware_version();
}
inline const ::std::string& VersionInfo::upper_ware_version() const {
  // @@protoc_insertion_point(field_get:VersionInfo.upper_ware_version)
  return upper_ware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_upper_ware_version(const ::std::string& value) {
  set_has_upper_ware_version();
  upper_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VersionInfo.upper_ware_version)
}
inline void VersionInfo::set_upper_ware_version(const char* value) {
  set_has_upper_ware_version();
  upper_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VersionInfo.upper_ware_version)
}
inline void VersionInfo::set_upper_ware_version(const char* value, size_t size) {
  set_has_upper_ware_version();
  upper_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.upper_ware_version)
}
inline ::std::string* VersionInfo::mutable_upper_ware_version() {
  set_has_upper_ware_version();
  // @@protoc_insertion_point(field_mutable:VersionInfo.upper_ware_version)
  return upper_ware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionInfo::release_upper_ware_version() {
  // @@protoc_insertion_point(field_release:VersionInfo.upper_ware_version)
  clear_has_upper_ware_version();
  return upper_ware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_upper_ware_version(::std::string* upper_ware_version) {
  if (upper_ware_version != NULL) {
    set_has_upper_ware_version();
  } else {
    clear_has_upper_ware_version();
  }
  upper_ware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upper_ware_version);
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.upper_ware_version)
}

// optional string lower_ware_version = 2;
inline bool VersionInfo::has_lower_ware_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionInfo::set_has_lower_ware_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionInfo::clear_has_lower_ware_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionInfo::clear_lower_ware_version() {
  lower_ware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lower_ware_version();
}
inline const ::std::string& VersionInfo::lower_ware_version() const {
  // @@protoc_insertion_point(field_get:VersionInfo.lower_ware_version)
  return lower_ware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_lower_ware_version(const ::std::string& value) {
  set_has_lower_ware_version();
  lower_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VersionInfo.lower_ware_version)
}
inline void VersionInfo::set_lower_ware_version(const char* value) {
  set_has_lower_ware_version();
  lower_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VersionInfo.lower_ware_version)
}
inline void VersionInfo::set_lower_ware_version(const char* value, size_t size) {
  set_has_lower_ware_version();
  lower_ware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.lower_ware_version)
}
inline ::std::string* VersionInfo::mutable_lower_ware_version() {
  set_has_lower_ware_version();
  // @@protoc_insertion_point(field_mutable:VersionInfo.lower_ware_version)
  return lower_ware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionInfo::release_lower_ware_version() {
  // @@protoc_insertion_point(field_release:VersionInfo.lower_ware_version)
  clear_has_lower_ware_version();
  return lower_ware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_lower_ware_version(::std::string* lower_ware_version) {
  if (lower_ware_version != NULL) {
    set_has_lower_ware_version();
  } else {
    clear_has_lower_ware_version();
  }
  lower_ware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lower_ware_version);
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.lower_ware_version)
}

// optional string upper_firmware_version = 3;
inline bool VersionInfo::has_upper_firmware_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionInfo::set_has_upper_firmware_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VersionInfo::clear_has_upper_firmware_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VersionInfo::clear_upper_firmware_version() {
  upper_firmware_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upper_firmware_version();
}
inline const ::std::string& VersionInfo::upper_firmware_version() const {
  // @@protoc_insertion_point(field_get:VersionInfo.upper_firmware_version)
  return upper_firmware_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_upper_firmware_version(const ::std::string& value) {
  set_has_upper_firmware_version();
  upper_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VersionInfo.upper_firmware_version)
}
inline void VersionInfo::set_upper_firmware_version(const char* value) {
  set_has_upper_firmware_version();
  upper_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VersionInfo.upper_firmware_version)
}
inline void VersionInfo::set_upper_firmware_version(const char* value, size_t size) {
  set_has_upper_firmware_version();
  upper_firmware_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VersionInfo.upper_firmware_version)
}
inline ::std::string* VersionInfo::mutable_upper_firmware_version() {
  set_has_upper_firmware_version();
  // @@protoc_insertion_point(field_mutable:VersionInfo.upper_firmware_version)
  return upper_firmware_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionInfo::release_upper_firmware_version() {
  // @@protoc_insertion_point(field_release:VersionInfo.upper_firmware_version)
  clear_has_upper_firmware_version();
  return upper_firmware_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_upper_firmware_version(::std::string* upper_firmware_version) {
  if (upper_firmware_version != NULL) {
    set_has_upper_firmware_version();
  } else {
    clear_has_upper_firmware_version();
  }
  upper_firmware_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upper_firmware_version);
  // @@protoc_insertion_point(field_set_allocated:VersionInfo.upper_firmware_version)
}

// -------------------------------------------------------------------

// StateInfo

// optional bool sampling = 1;
inline bool StateInfo::has_sampling() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateInfo::set_has_sampling() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateInfo::clear_has_sampling() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateInfo::clear_sampling() {
  sampling_ = false;
  clear_has_sampling();
}
inline bool StateInfo::sampling() const {
  // @@protoc_insertion_point(field_get:StateInfo.sampling)
  return sampling_;
}
inline void StateInfo::set_sampling(bool value) {
  set_has_sampling();
  sampling_ = value;
  // @@protoc_insertion_point(field_set:StateInfo.sampling)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ModeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ModeType>() {
  return ::ModeType_descriptor();
}
template <> struct is_proto_enum< ::LogLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogLevel>() {
  return ::LogLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ctrl_5ftbox_5fparam_2eproto__INCLUDED
