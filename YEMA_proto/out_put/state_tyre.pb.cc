// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_tyre.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "state_tyre.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StateTyreMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateTyreMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_state_5ftyre_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_state_5ftyre_2eproto() {
  protobuf_AddDesc_state_5ftyre_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "state_tyre.proto");
  GOOGLE_CHECK(file != NULL);
  StateTyreMessage_descriptor_ = file->message_type(0);
  static const int StateTyreMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_pressure_left_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_pressure_right_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_pressure_right_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_pressure_left_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_temperature_left_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_temperature_right_before_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_temperature_right_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, tire_temperature_left_back_),
  };
  StateTyreMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StateTyreMessage_descriptor_,
      StateTyreMessage::default_instance_,
      StateTyreMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(StateTyreMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTyreMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_state_5ftyre_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateTyreMessage_descriptor_, &StateTyreMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_state_5ftyre_2eproto() {
  delete StateTyreMessage::default_instance_;
  delete StateTyreMessage_reflection_;
}

void protobuf_AddDesc_state_5ftyre_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_state_5ftyre_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020state_tyre.proto\"\262\002\n\020StateTyreMessage\022"
    "!\n\031tire_pressure_left_before\030\001 \001(\001\022\"\n\032ti"
    "re_pressure_right_before\030\002 \001(\001\022 \n\030tire_p"
    "ressure_right_back\030\003 \001(\001\022\037\n\027tire_pressur"
    "e_left_back\030\004 \001(\001\022$\n\034tire_temperature_le"
    "ft_before\030\005 \001(\001\022%\n\035tire_temperature_righ"
    "t_before\030\006 \001(\001\022#\n\033tire_temperature_right"
    "_back\030\007 \001(\001\022\"\n\032tire_temperature_left_bac"
    "k\030\010 \001(\001B3\n\"com.mx.server.remote.v2.bean."
    "stateB\rStateTyreBean", 380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "state_tyre.proto", &protobuf_RegisterTypes);
  StateTyreMessage::default_instance_ = new StateTyreMessage();
  StateTyreMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_state_5ftyre_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_state_5ftyre_2eproto {
  StaticDescriptorInitializer_state_5ftyre_2eproto() {
    protobuf_AddDesc_state_5ftyre_2eproto();
  }
} static_descriptor_initializer_state_5ftyre_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateTyreMessage::kTirePressureLeftBeforeFieldNumber;
const int StateTyreMessage::kTirePressureRightBeforeFieldNumber;
const int StateTyreMessage::kTirePressureRightBackFieldNumber;
const int StateTyreMessage::kTirePressureLeftBackFieldNumber;
const int StateTyreMessage::kTireTemperatureLeftBeforeFieldNumber;
const int StateTyreMessage::kTireTemperatureRightBeforeFieldNumber;
const int StateTyreMessage::kTireTemperatureRightBackFieldNumber;
const int StateTyreMessage::kTireTemperatureLeftBackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateTyreMessage::StateTyreMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StateTyreMessage)
}

void StateTyreMessage::InitAsDefaultInstance() {
}

StateTyreMessage::StateTyreMessage(const StateTyreMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StateTyreMessage)
}

void StateTyreMessage::SharedCtor() {
  _cached_size_ = 0;
  tire_pressure_left_before_ = 0;
  tire_pressure_right_before_ = 0;
  tire_pressure_right_back_ = 0;
  tire_pressure_left_back_ = 0;
  tire_temperature_left_before_ = 0;
  tire_temperature_right_before_ = 0;
  tire_temperature_right_back_ = 0;
  tire_temperature_left_back_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateTyreMessage::~StateTyreMessage() {
  // @@protoc_insertion_point(destructor:StateTyreMessage)
  SharedDtor();
}

void StateTyreMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateTyreMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateTyreMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateTyreMessage_descriptor_;
}

const StateTyreMessage& StateTyreMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_state_5ftyre_2eproto();
  return *default_instance_;
}

StateTyreMessage* StateTyreMessage::default_instance_ = NULL;

StateTyreMessage* StateTyreMessage::New(::google::protobuf::Arena* arena) const {
  StateTyreMessage* n = new StateTyreMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateTyreMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StateTyreMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StateTyreMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StateTyreMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(tire_pressure_left_before_, tire_temperature_left_back_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StateTyreMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StateTyreMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tire_pressure_left_before = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_pressure_left_before_)));
          set_has_tire_pressure_left_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_tire_pressure_right_before;
        break;
      }

      // optional double tire_pressure_right_before = 2;
      case 2: {
        if (tag == 17) {
         parse_tire_pressure_right_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_pressure_right_before_)));
          set_has_tire_pressure_right_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_tire_pressure_right_back;
        break;
      }

      // optional double tire_pressure_right_back = 3;
      case 3: {
        if (tag == 25) {
         parse_tire_pressure_right_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_pressure_right_back_)));
          set_has_tire_pressure_right_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_tire_pressure_left_back;
        break;
      }

      // optional double tire_pressure_left_back = 4;
      case 4: {
        if (tag == 33) {
         parse_tire_pressure_left_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_pressure_left_back_)));
          set_has_tire_pressure_left_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_tire_temperature_left_before;
        break;
      }

      // optional double tire_temperature_left_before = 5;
      case 5: {
        if (tag == 41) {
         parse_tire_temperature_left_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_temperature_left_before_)));
          set_has_tire_temperature_left_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_tire_temperature_right_before;
        break;
      }

      // optional double tire_temperature_right_before = 6;
      case 6: {
        if (tag == 49) {
         parse_tire_temperature_right_before:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_temperature_right_before_)));
          set_has_tire_temperature_right_before();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_tire_temperature_right_back;
        break;
      }

      // optional double tire_temperature_right_back = 7;
      case 7: {
        if (tag == 57) {
         parse_tire_temperature_right_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_temperature_right_back_)));
          set_has_tire_temperature_right_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_tire_temperature_left_back;
        break;
      }

      // optional double tire_temperature_left_back = 8;
      case 8: {
        if (tag == 65) {
         parse_tire_temperature_left_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tire_temperature_left_back_)));
          set_has_tire_temperature_left_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StateTyreMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StateTyreMessage)
  return false;
#undef DO_
}

void StateTyreMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StateTyreMessage)
  // optional double tire_pressure_left_before = 1;
  if (has_tire_pressure_left_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tire_pressure_left_before(), output);
  }

  // optional double tire_pressure_right_before = 2;
  if (has_tire_pressure_right_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tire_pressure_right_before(), output);
  }

  // optional double tire_pressure_right_back = 3;
  if (has_tire_pressure_right_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->tire_pressure_right_back(), output);
  }

  // optional double tire_pressure_left_back = 4;
  if (has_tire_pressure_left_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tire_pressure_left_back(), output);
  }

  // optional double tire_temperature_left_before = 5;
  if (has_tire_temperature_left_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tire_temperature_left_before(), output);
  }

  // optional double tire_temperature_right_before = 6;
  if (has_tire_temperature_right_before()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tire_temperature_right_before(), output);
  }

  // optional double tire_temperature_right_back = 7;
  if (has_tire_temperature_right_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->tire_temperature_right_back(), output);
  }

  // optional double tire_temperature_left_back = 8;
  if (has_tire_temperature_left_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->tire_temperature_left_back(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StateTyreMessage)
}

::google::protobuf::uint8* StateTyreMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StateTyreMessage)
  // optional double tire_pressure_left_before = 1;
  if (has_tire_pressure_left_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tire_pressure_left_before(), target);
  }

  // optional double tire_pressure_right_before = 2;
  if (has_tire_pressure_right_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tire_pressure_right_before(), target);
  }

  // optional double tire_pressure_right_back = 3;
  if (has_tire_pressure_right_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->tire_pressure_right_back(), target);
  }

  // optional double tire_pressure_left_back = 4;
  if (has_tire_pressure_left_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tire_pressure_left_back(), target);
  }

  // optional double tire_temperature_left_before = 5;
  if (has_tire_temperature_left_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tire_temperature_left_before(), target);
  }

  // optional double tire_temperature_right_before = 6;
  if (has_tire_temperature_right_before()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tire_temperature_right_before(), target);
  }

  // optional double tire_temperature_right_back = 7;
  if (has_tire_temperature_right_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->tire_temperature_right_back(), target);
  }

  // optional double tire_temperature_left_back = 8;
  if (has_tire_temperature_left_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->tire_temperature_left_back(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StateTyreMessage)
  return target;
}

int StateTyreMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StateTyreMessage)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional double tire_pressure_left_before = 1;
    if (has_tire_pressure_left_before()) {
      total_size += 1 + 8;
    }

    // optional double tire_pressure_right_before = 2;
    if (has_tire_pressure_right_before()) {
      total_size += 1 + 8;
    }

    // optional double tire_pressure_right_back = 3;
    if (has_tire_pressure_right_back()) {
      total_size += 1 + 8;
    }

    // optional double tire_pressure_left_back = 4;
    if (has_tire_pressure_left_back()) {
      total_size += 1 + 8;
    }

    // optional double tire_temperature_left_before = 5;
    if (has_tire_temperature_left_before()) {
      total_size += 1 + 8;
    }

    // optional double tire_temperature_right_before = 6;
    if (has_tire_temperature_right_before()) {
      total_size += 1 + 8;
    }

    // optional double tire_temperature_right_back = 7;
    if (has_tire_temperature_right_back()) {
      total_size += 1 + 8;
    }

    // optional double tire_temperature_left_back = 8;
    if (has_tire_temperature_left_back()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateTyreMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StateTyreMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StateTyreMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StateTyreMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StateTyreMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StateTyreMessage)
    MergeFrom(*source);
  }
}

void StateTyreMessage::MergeFrom(const StateTyreMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StateTyreMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tire_pressure_left_before()) {
      set_tire_pressure_left_before(from.tire_pressure_left_before());
    }
    if (from.has_tire_pressure_right_before()) {
      set_tire_pressure_right_before(from.tire_pressure_right_before());
    }
    if (from.has_tire_pressure_right_back()) {
      set_tire_pressure_right_back(from.tire_pressure_right_back());
    }
    if (from.has_tire_pressure_left_back()) {
      set_tire_pressure_left_back(from.tire_pressure_left_back());
    }
    if (from.has_tire_temperature_left_before()) {
      set_tire_temperature_left_before(from.tire_temperature_left_before());
    }
    if (from.has_tire_temperature_right_before()) {
      set_tire_temperature_right_before(from.tire_temperature_right_before());
    }
    if (from.has_tire_temperature_right_back()) {
      set_tire_temperature_right_back(from.tire_temperature_right_back());
    }
    if (from.has_tire_temperature_left_back()) {
      set_tire_temperature_left_back(from.tire_temperature_left_back());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StateTyreMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StateTyreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateTyreMessage::CopyFrom(const StateTyreMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StateTyreMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateTyreMessage::IsInitialized() const {

  return true;
}

void StateTyreMessage::Swap(StateTyreMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateTyreMessage::InternalSwap(StateTyreMessage* other) {
  std::swap(tire_pressure_left_before_, other->tire_pressure_left_before_);
  std::swap(tire_pressure_right_before_, other->tire_pressure_right_before_);
  std::swap(tire_pressure_right_back_, other->tire_pressure_right_back_);
  std::swap(tire_pressure_left_back_, other->tire_pressure_left_back_);
  std::swap(tire_temperature_left_before_, other->tire_temperature_left_before_);
  std::swap(tire_temperature_right_before_, other->tire_temperature_right_before_);
  std::swap(tire_temperature_right_back_, other->tire_temperature_right_back_);
  std::swap(tire_temperature_left_back_, other->tire_temperature_left_back_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateTyreMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateTyreMessage_descriptor_;
  metadata.reflection = StateTyreMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StateTyreMessage

// optional double tire_pressure_left_before = 1;
bool StateTyreMessage::has_tire_pressure_left_before() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StateTyreMessage::set_has_tire_pressure_left_before() {
  _has_bits_[0] |= 0x00000001u;
}
void StateTyreMessage::clear_has_tire_pressure_left_before() {
  _has_bits_[0] &= ~0x00000001u;
}
void StateTyreMessage::clear_tire_pressure_left_before() {
  tire_pressure_left_before_ = 0;
  clear_has_tire_pressure_left_before();
}
 double StateTyreMessage::tire_pressure_left_before() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_pressure_left_before)
  return tire_pressure_left_before_;
}
 void StateTyreMessage::set_tire_pressure_left_before(double value) {
  set_has_tire_pressure_left_before();
  tire_pressure_left_before_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_pressure_left_before)
}

// optional double tire_pressure_right_before = 2;
bool StateTyreMessage::has_tire_pressure_right_before() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StateTyreMessage::set_has_tire_pressure_right_before() {
  _has_bits_[0] |= 0x00000002u;
}
void StateTyreMessage::clear_has_tire_pressure_right_before() {
  _has_bits_[0] &= ~0x00000002u;
}
void StateTyreMessage::clear_tire_pressure_right_before() {
  tire_pressure_right_before_ = 0;
  clear_has_tire_pressure_right_before();
}
 double StateTyreMessage::tire_pressure_right_before() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_pressure_right_before)
  return tire_pressure_right_before_;
}
 void StateTyreMessage::set_tire_pressure_right_before(double value) {
  set_has_tire_pressure_right_before();
  tire_pressure_right_before_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_pressure_right_before)
}

// optional double tire_pressure_right_back = 3;
bool StateTyreMessage::has_tire_pressure_right_back() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StateTyreMessage::set_has_tire_pressure_right_back() {
  _has_bits_[0] |= 0x00000004u;
}
void StateTyreMessage::clear_has_tire_pressure_right_back() {
  _has_bits_[0] &= ~0x00000004u;
}
void StateTyreMessage::clear_tire_pressure_right_back() {
  tire_pressure_right_back_ = 0;
  clear_has_tire_pressure_right_back();
}
 double StateTyreMessage::tire_pressure_right_back() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_pressure_right_back)
  return tire_pressure_right_back_;
}
 void StateTyreMessage::set_tire_pressure_right_back(double value) {
  set_has_tire_pressure_right_back();
  tire_pressure_right_back_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_pressure_right_back)
}

// optional double tire_pressure_left_back = 4;
bool StateTyreMessage::has_tire_pressure_left_back() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StateTyreMessage::set_has_tire_pressure_left_back() {
  _has_bits_[0] |= 0x00000008u;
}
void StateTyreMessage::clear_has_tire_pressure_left_back() {
  _has_bits_[0] &= ~0x00000008u;
}
void StateTyreMessage::clear_tire_pressure_left_back() {
  tire_pressure_left_back_ = 0;
  clear_has_tire_pressure_left_back();
}
 double StateTyreMessage::tire_pressure_left_back() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_pressure_left_back)
  return tire_pressure_left_back_;
}
 void StateTyreMessage::set_tire_pressure_left_back(double value) {
  set_has_tire_pressure_left_back();
  tire_pressure_left_back_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_pressure_left_back)
}

// optional double tire_temperature_left_before = 5;
bool StateTyreMessage::has_tire_temperature_left_before() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StateTyreMessage::set_has_tire_temperature_left_before() {
  _has_bits_[0] |= 0x00000010u;
}
void StateTyreMessage::clear_has_tire_temperature_left_before() {
  _has_bits_[0] &= ~0x00000010u;
}
void StateTyreMessage::clear_tire_temperature_left_before() {
  tire_temperature_left_before_ = 0;
  clear_has_tire_temperature_left_before();
}
 double StateTyreMessage::tire_temperature_left_before() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_temperature_left_before)
  return tire_temperature_left_before_;
}
 void StateTyreMessage::set_tire_temperature_left_before(double value) {
  set_has_tire_temperature_left_before();
  tire_temperature_left_before_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_temperature_left_before)
}

// optional double tire_temperature_right_before = 6;
bool StateTyreMessage::has_tire_temperature_right_before() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StateTyreMessage::set_has_tire_temperature_right_before() {
  _has_bits_[0] |= 0x00000020u;
}
void StateTyreMessage::clear_has_tire_temperature_right_before() {
  _has_bits_[0] &= ~0x00000020u;
}
void StateTyreMessage::clear_tire_temperature_right_before() {
  tire_temperature_right_before_ = 0;
  clear_has_tire_temperature_right_before();
}
 double StateTyreMessage::tire_temperature_right_before() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_temperature_right_before)
  return tire_temperature_right_before_;
}
 void StateTyreMessage::set_tire_temperature_right_before(double value) {
  set_has_tire_temperature_right_before();
  tire_temperature_right_before_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_temperature_right_before)
}

// optional double tire_temperature_right_back = 7;
bool StateTyreMessage::has_tire_temperature_right_back() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StateTyreMessage::set_has_tire_temperature_right_back() {
  _has_bits_[0] |= 0x00000040u;
}
void StateTyreMessage::clear_has_tire_temperature_right_back() {
  _has_bits_[0] &= ~0x00000040u;
}
void StateTyreMessage::clear_tire_temperature_right_back() {
  tire_temperature_right_back_ = 0;
  clear_has_tire_temperature_right_back();
}
 double StateTyreMessage::tire_temperature_right_back() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_temperature_right_back)
  return tire_temperature_right_back_;
}
 void StateTyreMessage::set_tire_temperature_right_back(double value) {
  set_has_tire_temperature_right_back();
  tire_temperature_right_back_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_temperature_right_back)
}

// optional double tire_temperature_left_back = 8;
bool StateTyreMessage::has_tire_temperature_left_back() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StateTyreMessage::set_has_tire_temperature_left_back() {
  _has_bits_[0] |= 0x00000080u;
}
void StateTyreMessage::clear_has_tire_temperature_left_back() {
  _has_bits_[0] &= ~0x00000080u;
}
void StateTyreMessage::clear_tire_temperature_left_back() {
  tire_temperature_left_back_ = 0;
  clear_has_tire_temperature_left_back();
}
 double StateTyreMessage::tire_temperature_left_back() const {
  // @@protoc_insertion_point(field_get:StateTyreMessage.tire_temperature_left_back)
  return tire_temperature_left_back_;
}
 void StateTyreMessage::set_tire_temperature_left_back(double value) {
  set_has_tire_temperature_left_back();
  tire_temperature_left_back_ = value;
  // @@protoc_insertion_point(field_set:StateTyreMessage.tire_temperature_left_back)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
